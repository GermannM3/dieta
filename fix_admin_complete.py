#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import sys
import os
import bcrypt

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import select, delete
from database.init_database import async_session, WebUser

async def fix_admin_complete():
    """–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üîß –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    # –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_email = "germannm@vk.com"
    new_password = "admin123"
    
    try:
        async with async_session() as session:
            # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            await session.execute(
                delete(WebUser).where(WebUser.email == admin_email)
            )
            await session.commit()
            print("üóëÔ∏è  –°—Ç–∞—Ä—ã–π –∞–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω")
            
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–µ—à–µ–º
            password_hash = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            
            new_admin = WebUser(
                email=admin_email,
                password_hash=password_hash,
                name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                is_confirmed=True,
                confirmation_code=None
            )
            
            session.add(new_admin)
            await session.commit()
            await session.refresh(new_admin)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            print(f"üìß Email: {admin_email}")
            print(f"üîë –ü–∞—Ä–æ–ª—å: {new_password}")
            print(f"üîê –•–µ—à: {password_hash[:20]}...")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç
            test_check = bcrypt.checkpw(new_password.encode('utf-8'), password_hash.encode('utf-8'))
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞: {'OK' if test_check else 'FAIL'}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(fix_admin_complete()) 