from aiogram import Dispatcher
import asyncio
import logging
import sys
import time
from datetime import datetime

from core.init_bot import bot
from components.handlers.user_handlers import router as user_router
from components.handlers.admin_handlers import admin_router
from components.handlers.fat_tracker_handlers import router as fat_tracker_router
from components.payment_system.payment_handlers import router as payment_router
from database.init_database import init_db


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.FileHandler('bot_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class BotKeepAlive:
    def __init__(self):
        self.last_activity = time.time()
        self.restart_count = 0
        self.max_restarts = 10
        
    async def heartbeat(self):
        """Heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        while True:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                await bot.get_me()
                self.last_activity = time.time()
                logging.debug("Heartbeat: –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                await asyncio.sleep(30)
            except Exception as e:
                logging.warning(f"Heartbeat –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(10)
                
    async def activity_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        while True:
            try:
                current_time = time.time()
                if current_time - self.last_activity > 300:  # 5 –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    logging.warning("–ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                    try:
                        await bot.get_me()
                        self.last_activity = current_time
                        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")
                        raise e
                        
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                await asyncio.sleep(30)

async def start_polling_with_retry(dp, keep_alive):
    """–ó–∞–ø—É—Å–∫ polling —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    while keep_alive.restart_count < keep_alive.max_restarts:
        try:
            logging.info(f"–ó–∞–ø—É—Å–∫ polling (–ø–æ–ø—ã—Ç–∫–∞ {keep_alive.restart_count + 1})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            keep_alive.last_activity = time.time()
            
            await dp.start_polling(
                bot,
                polling_timeout=60,          # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                request_timeout=30,          # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
                skip_updates=False,          # –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                allowed_updates=["message", "callback_query", "inline_query"],
                drop_pending_updates=False,  # –ù–µ —É–¥–∞–ª—è–µ–º pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                handle_signals=False         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å–∞–º–∏
            )
            
        except asyncio.CancelledError:
            logging.info("Polling –æ—Ç–º–µ–Ω–µ–Ω")
            break
        except Exception as e:
            keep_alive.restart_count += 1
            error_msg = f"–û—à–∏–±–∫–∞ –≤ polling (–ø–æ–ø—ã—Ç–∫–∞ {keep_alive.restart_count}): {e}"
            logging.error(error_msg)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            delay = min(30, 5 * keep_alive.restart_count)
            logging.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(delay)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try:
                await bot.delete_webhook(drop_pending_updates=True)
                await asyncio.sleep(2)
            except:
                pass
    
    if keep_alive.restart_count >= keep_alive.max_restarts:
        logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        raise RuntimeError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    logging.info("=" * 50)
    logging.info("ü§ñ –ó–∞–ø—É—Å–∫ –î–∏–µ—Ç–æ–ª–æ–≥-–±–æ—Ç–∞")
    logging.info("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logging.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()
        dp.include_routers(admin_router, payment_router, fat_tracker_router, user_router)
        logging.info("‚úÖ –†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
        logging.info("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        bot_info = await bot.get_me()
        logging.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ @{bot_info.username} ({bot_info.full_name})")
        
        # –û—á–∏—Å—Ç–∫–∞ webhook
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã keep-alive
        keep_alive = BotKeepAlive()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        heartbeat_task = asyncio.create_task(keep_alive.heartbeat())
        monitor_task = asyncio.create_task(keep_alive.activity_monitor())
        
        logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logging.info("üí° –°–∏—Å—Ç–µ–º–∞ keep-alive –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        logging.info("-" * 50)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π polling
        polling_task = asyncio.create_task(start_polling_with_retry(dp, keep_alive))
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
        done, pending = await asyncio.wait(
            [polling_task, heartbeat_task, monitor_task],
            return_when=asyncio.FIRST_COMPLETED
        )
        
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        for task in pending:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for task in done:
            if task.exception():
                raise task.exception()
                
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        try:
            await bot.session.close()
            logging.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except:
            pass

if __name__ == '__main__':
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
        if sys.platform == 'win32':
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logging.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
