import os
import asyncio
from datetime import datetime, date
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy import select, desc, and_

from database.init_database import async_session, User, FatTracking
from components.states.user_states import FatTracker
from components.keyboards.user_kb import fat_tracker_kb, fat_confirm_kb, back_kb
from api.ai_api.fat_calculator import FatPercentageCalculator
from api.ai_api.generate_text import answer_to_text_prompt

router = Router()

@router.message(F.text == '–¢—Ä–µ–∫–µ—Ä –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã')
async def fat_tracker_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä–∞ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            result = await session.execute(
                select(FatTracking)
                .where(FatTracking.user_id == message.from_user.id)
                .order_by(desc(FatTracking.created_at))
                .limit(1)
            )
            last_measurement = result.scalar_one_or_none()
        
        if last_measurement:
            text = (
                f"üèÉ‚Äç‚ôÄÔ∏è <b>–¢—Ä–µ–∫–µ—Ä –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã</b>\n\n"
                f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ:</b>\n"
                f"‚Ä¢ –î–∞—Ç–∞: {last_measurement.date}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: {last_measurement.body_fat_percent}% {FatPercentageCalculator.get_fat_category(last_measurement.body_fat_percent, last_measurement.gender)['emoji']}\n"
                f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {FatPercentageCalculator.get_fat_category(last_measurement.body_fat_percent, last_measurement.gender)['category']}\n"
                f"‚Ä¢ –¢–∞–ª–∏—è: {last_measurement.waist_cm} —Å–º\n"
                f"‚Ä¢ –ë–µ–¥—Ä–∞: {last_measurement.hip_cm} —Å–º\n"
            )
            if last_measurement.goal_fat_percent:
                text += f"‚Ä¢ –¶–µ–ª—å: {last_measurement.goal_fat_percent}%\n"
        else:
            text = (
                f"üèÉ‚Äç‚ôÄÔ∏è <b>–¢—Ä–µ–∫–µ—Ä –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã</b>\n\n"
                f"üìà <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ</b>\n\n"
                f"üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                f"‚Ä¢ –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ Navy Method\n"
                f"‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
                f"‚Ä¢ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Mistral\n"
                f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π\n\n"
                f"üìè <b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ!</b>"
            )
        
        await message.answer(text, reply_markup=fat_tracker_kb, parse_mode='HTML')
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä–∞: {e}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_kb
        )

@router.callback_query(F.data == 'fat_new_measurement')
async def start_new_measurement(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
    
    if not user or not user.gender:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–î–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª).\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=back_kb,
            parse_mode='HTML'
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    gender_normalized = 'male' if user.gender.lower() in ['–º', '–º—É–∂—Å–∫–æ–π', 'male'] else 'female'
    gender_display = '–ú—É–∂—Å–∫–æ–π' if gender_normalized == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        user_id=callback.from_user.id,
        gender=gender_normalized,
        height=user.height,
        age=user.age
    )
    
    await state.set_state(FatTracker.waist)
    
    await callback.message.edit_text(
        f"üìè <b>–ù–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã</b>\n\n"
        f"üë§ –ü–æ–ª: {gender_display}\n\n"
        f"üìê <b>–®–∞–≥ 1/3:</b> –í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö\n\n"
        f"üí° <b>–ö–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å:</b>\n"
        f"‚Ä¢ –í—Å—Ç–∞–Ω—å—Ç–µ –ø—Ä—è–º–æ, –¥—ã—à–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
        f"‚Ä¢ –ò–∑–º–µ—Ä—å—Ç–µ –≤ —Å–∞–º–æ–π —É–∑–∫–æ–π —á–∞—Å—Ç–∏ —Ç–∞–ª–∏–∏\n"
        f"‚Ä¢ –õ–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø–ª–æ—Ç–Ω–æ –ø—Ä–∏–ª–µ–≥–∞—Ç—å, –Ω–æ –Ω–µ –¥–∞–≤–∏—Ç—å\n\n"
        f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5):</b>",
        reply_markup=back_kb,
        parse_mode='HTML'
    )

@router.message(FatTracker.waist)
async def process_waist(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏"""
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '–Ω–∞–∑–∞–¥']:
        await state.clear()
        await message.answer("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=fat_tracker_kb)
        return
    
    try:
        waist = float(message.text.replace(',', '.'))
        if waist < 50 or waist > 150:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 150 —Å–º.",
                reply_markup=back_kb
            )
            return
        
        await state.update_data(waist_cm=waist)
        await state.set_state(FatTracker.hip)
        
        await message.answer(
            f"‚úÖ –¢–∞–ª–∏—è: {waist} —Å–º\n\n"
            f"üìê <b>–®–∞–≥ 2/3:</b> –í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö\n\n"
            f"üí° <b>–ö–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å:</b>\n"
            f"‚Ä¢ –í—Å—Ç–∞–Ω—å—Ç–µ –ø—Ä—è–º–æ, –Ω–æ–≥–∏ –≤–º–µ—Å—Ç–µ\n"
            f"‚Ä¢ –ò–∑–º–µ—Ä—å—Ç–µ –≤ —Å–∞–º–æ–π —à–∏—Ä–æ–∫–æ–π —á–∞—Å—Ç–∏ –±–µ–¥–µ—Ä\n"
            f"‚Ä¢ –õ–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞ –ø–æ–ª—É\n\n"
            f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 95.0):</b>",
            reply_markup=back_kb,
            parse_mode='HTML'
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5)",
            reply_markup=back_kb
        )

@router.message(FatTracker.hip)
async def process_hip(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ö–≤–∞—Ç–∞ –±–µ–¥–µ—Ä"""
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '–Ω–∞–∑–∞–¥']:
        await state.clear()
        await message.answer("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=fat_tracker_kb)
        return
    
    try:
        hip = float(message.text.replace(',', '.'))
        if hip < 60 or hip > 200:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 60 –¥–æ 200 —Å–º.",
                reply_markup=back_kb
            )
            return
        
        data = await state.get_data()
        gender = data.get('gender')
        
        await state.update_data(hip_cm=hip)
        
        # –î–ª—è –º—É–∂—á–∏–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ö–≤–∞—Ç —à–µ–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        if gender == 'male' and data.get('height'):
            await state.set_state(FatTracker.neck)
            await message.answer(
                f"‚úÖ –ë–µ–¥—Ä–∞: {hip} —Å–º\n\n"
                f"üìê <b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç —à–µ–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö\n\n"
                f"üí° <b>–ö–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å:</b>\n"
                f"‚Ä¢ –ò–∑–º–µ—Ä—å—Ç–µ –ø–æ–¥ –∫–∞–¥—ã–∫–æ–º\n"
                f"‚Ä¢ –õ–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø–ª–æ—Ç–Ω–æ –ø—Ä–∏–ª–µ–≥–∞—Ç—å\n"
                f"‚Ä¢ –≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞\n\n"
                f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 38.0):</b>\n"
                f"<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞</i>",
                reply_markup=back_kb,
                parse_mode='HTML'
            )
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–ª–∏ —Å—Ä–∞–∑—É
            await state.set_state(FatTracker.goal)
            await message.answer(
                f"‚úÖ –ë–µ–¥—Ä–∞: {hip} —Å–º\n\n"
                f"üéØ <b>–®–∞–≥ 3/3:</b> –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞\n\n"
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:</b>\n"
                f"{'‚Ä¢ –ú—É–∂—á–∏–Ω—ã: 10-20% (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 15%)' if gender == 'male' else '‚Ä¢ –ñ–µ–Ω—â–∏–Ω—ã: 16-25% (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 20%)'}\n\n"
                f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.0):</b>\n"
                f"<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞</i>",
                reply_markup=back_kb,
                parse_mode='HTML'
            )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 95.0)",
            reply_markup=back_kb
        )

@router.message(FatTracker.neck)
async def process_neck(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ö–≤–∞—Ç–∞ —à–µ–∏"""
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '–Ω–∞–∑–∞–¥']:
        await state.clear()
        await message.answer("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=fat_tracker_kb)
        return
    
    neck = None
    
    if message.text != '/skip':
        try:
            neck = float(message.text.replace(',', '.'))
            if neck < 25 or neck > 50:
                await message.answer(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–û–±—Ö–≤–∞—Ç —à–µ–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 25 –¥–æ 50 —Å–º.",
                    reply_markup=back_kb
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /skip",
                reply_markup=back_kb
            )
            return
    
    await state.update_data(neck_cm=neck)
    await state.set_state(FatTracker.goal)
    
    data = await state.get_data()
    gender = data.get('gender')
    
    await message.answer(
        f"‚úÖ –®–µ—è: {neck if neck else '–ü—Ä–æ–ø—É—â–µ–Ω–æ'} —Å–º\n\n"
        f"üéØ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥:</b> –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞\n\n"
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:</b>\n"
        f"{'‚Ä¢ –ú—É–∂—á–∏–Ω—ã: 10-20% (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 15%)' if gender == 'male' else '‚Ä¢ –ñ–µ–Ω—â–∏–Ω—ã: 16-25% (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 20%)'}\n\n"
        f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18.0):</b>\n"
        f"<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞</i>",
        reply_markup=back_kb,
        parse_mode='HTML'
    )

@router.message(FatTracker.goal)
async def process_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –∏ —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '–Ω–∞–∑–∞–¥']:
        await state.clear()
        await message.answer("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=fat_tracker_kb)
        return
    
    goal = None
    
    if message.text != '/skip':
        try:
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ % –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
            goal_text = message.text.replace('%', '').replace(',', '.').strip()
            goal = float(goal_text)
            if goal < 5 or goal > 50:
                await message.answer(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 50%.",
                    reply_markup=back_kb
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /skip",
                reply_markup=back_kb
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ 
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—å (–±–µ–∑ –∏–∑–º–µ—Ä–µ–Ω–∏–π)
    if data.get('setting_goal_only'):
        # –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –±–µ–∑ —Ä–∞—Å—á–µ—Ç–æ–≤
        if goal is None:
            await message.answer(
                "‚ùå –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!",
                reply_markup=back_kb
            )
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            result = await session.execute(
                select(FatTracking)
                .where(FatTracking.user_id == message.from_user.id)
                .order_by(desc(FatTracking.created_at))
                .limit(1)
            )
            last_measurement = result.scalar_one_or_none()
            
            if last_measurement:
                last_measurement.goal_fat_percent = goal
                await session.commit()
                
                diff = goal - last_measurement.body_fat_percent
                if abs(diff) <= 1:
                    status = "üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!"
                elif diff > 0:
                    status = f"üéØ –î–æ —Ü–µ–ª–∏: {diff:.1f}% –∂–∏—Ä–∞"
                else:
                    status = f"üéØ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ {abs(diff):.1f}%"
                    
                await message.answer(
                    f"‚úÖ <b>–¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                    f"üéØ –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: {goal}%\n"
                    f"üìä –¢–µ–∫—É—â–∏–π: {last_measurement.body_fat_percent}%\n\n"
                    f"{status}",
                    reply_markup=fat_tracker_kb
                )
            else:
                await message.answer(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã!\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                    reply_markup=fat_tracker_kb
                )
        
        await state.clear()
        return
    
    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
    waist_cm = data['waist_cm']
    hip_cm = data['hip_cm']
    neck_cm = data.get('neck_cm')
    height_cm = data.get('height')
    gender = data['gender']
    age = data.get('age')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
    result = FatPercentageCalculator.calculate_fat_percentage(
        waist_cm=waist_cm,
        hip_cm=hip_cm,
        height_cm=height_cm,
        neck_cm=neck_cm,
        gender=gender,
        age=age
    )
    
    if 'error' in result:
        await message.answer(
            f"‚ùå {result['error']}",
            reply_markup=back_kb
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await state.update_data(
        goal_fat_percent=goal,
        calculation_result=result
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    fat_percent = result['fat_percent']
    category = result['category']
    emoji = result['emoji']
    method = result['method']
    waist_hip_ratio = result['waist_hip_ratio']
    
    text = (
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è</b>\n\n"
        f"üèÉ‚Äç‚ôÄÔ∏è <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: {fat_percent}%</b> {emoji}\n"
        f"üìà –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–∞–ª–∏—è/–±–µ–¥—Ä–∞: {waist_hip_ratio}\n"
        f"üî¨ –ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞: {method}\n\n"
        f"üìè <b>–ò–∑–º–µ—Ä–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ –¢–∞–ª–∏—è: {waist_cm} —Å–º\n"
        f"‚Ä¢ –ë–µ–¥—Ä–∞: {hip_cm} —Å–º\n"
    )
    
    if neck_cm:
        text += f"‚Ä¢ –®–µ—è: {neck_cm} —Å–º\n"
    
    if goal:
        diff = goal - fat_percent
        if abs(diff) <= 1:
            text += f"\nüéØ <b>–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!</b> –í–∞—à–∞ —Ü–µ–ª—å: {goal}%"
        elif diff > 0:
            text += f"\nüéØ –î–æ —Ü–µ–ª–∏ ({goal}%): {diff:.1f}% –∂–∏—Ä–∞"
        else:
            text += f"\nüéØ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–∏ ({goal}%) –Ω–∞ {abs(diff):.1f}%"
    
    text += "\n\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ?"
    
    await message.answer(text, reply_markup=fat_confirm_kb, parse_mode='HTML')

@router.callback_query(F.data == 'fat_save')
async def save_measurement(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer()
    
    try:
        data = await state.get_data()
        result = data['calculation_result']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            fat_record = FatTracking(
                user_id=data['user_id'],
                waist_cm=data['waist_cm'],
                hip_cm=data['hip_cm'],
                neck_cm=data.get('neck_cm'),
                gender=data['gender'],
                body_fat_percent=result['fat_percent'],
                goal_fat_percent=data.get('goal_fat_percent'),
                date=date.today().strftime('%Y-%m-%d')
            )
            session.add(fat_record)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, data['user_id'])
            if user:
                user.body_fat_percent = result['fat_percent']
                if data.get('goal_fat_percent'):
                    user.goal_fat_percent = data['goal_fat_percent']
            
            await session.commit()
            
            # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            try:
                import requests
                api_url = os.getenv('API_BASE_URL', 'http://127.0.0.1:8000')
                fat_data = {
                    'user_id': data['user_id'],
                    'fat_percent': result['fat_percent'],
                    'goal_fat_percent': data.get('goal_fat_percent')
                }
                requests.post(f'{api_url}/api/fat-data', json=fat_data, timeout=5)
            except:
                pass  # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        
        await state.clear()
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
            f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: {result['fat_percent']}% {result['emoji']}\n"
            f"üìÖ –î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n\n"
            f"üí° –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò?",
            reply_markup=fat_tracker_kb,
            parse_mode='HTML'
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}",
            reply_markup=back_kb
        )
        await state.clear()

@router.callback_query(F.data == 'fat_restart')
async def restart_measurement(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    await callback.answer()
    await state.clear()
    await start_new_measurement(callback, state)

@router.callback_query(F.data == 'fat_history')
async def show_fat_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
    await callback.answer()
    
    try:
        async with async_session() as session:
            result = await session.execute(
                select(FatTracking)
                .where(FatTracking.user_id == callback.from_user.id)
                .order_by(desc(FatTracking.created_at))
                .limit(10)
            )
            measurements = result.scalars().all()
        
        if not measurements:
            await callback.message.edit_text(
                "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π</b>\n\n"
                "üìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π.\n"
                "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ!",
                reply_markup=fat_tracker_kb,
                parse_mode='HTML'
            )
            return
        
        text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π –∂–∏—Ä–∞</b>\n\n"
        
        for i, m in enumerate(measurements):
            category = FatPercentageCalculator.get_fat_category(m.body_fat_percent, m.gender)
            text += (
                f"üìÖ <b>{m.date}</b>\n"
                f"‚Ä¢ {m.body_fat_percent}% {category['emoji']}\n"
                f"‚Ä¢ –¢–∞–ª–∏—è: {m.waist_cm} —Å–º, –ë–µ–¥—Ä–∞: {m.hip_cm} —Å–º\n"
            )
            if m.goal_fat_percent:
                diff = m.goal_fat_percent - m.body_fat_percent
                text += f"‚Ä¢ –¶–µ–ª—å: {m.goal_fat_percent}% ({'–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞' if abs(diff) <= 1 else f'{diff:+.1f}%'})\n"
            text += "\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if len(measurements) > 1:
            latest = measurements[0].body_fat_percent
            previous = measurements[1].body_fat_percent
            change = latest - previous
            
            if abs(change) > 0.1:
                text += f"üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {change:+.1f}% —Å –ø—Ä–æ—à–ª–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
        
        await callback.message.edit_text(text, reply_markup=fat_tracker_kb, parse_mode='HTML')
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}",
            reply_markup=back_kb
        )

@router.callback_query(F.data == 'fat_set_goal')
async def set_fat_goal(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∂–∏—Ä–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        user_result = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        measurement_result = await session.execute(
            select(FatTracking)
            .where(FatTracking.user_id == callback.from_user.id)
            .order_by(desc(FatTracking.created_at))
            .limit(1)
        )
        last_measurement = measurement_result.scalar_one_or_none()
    
    if not user or not user.gender:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!",
            reply_markup=back_kb
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    gender_normalized = 'male' if user.gender.lower() in ['–º', '–º—É–∂—Å–∫–æ–π', 'male'] else 'female'
    
    healthy_range = FatPercentageCalculator.get_healthy_range(gender_normalized, user.age)
    
    text = (
        f"üéØ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –ø–æ –∂–∏—Ä—É</b>\n\n"
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:</b>\n"
        f"‚Ä¢ –ó–¥–æ—Ä–æ–≤—ã–π: {healthy_range['min']}-{healthy_range['max']}%\n"
        f"‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π: ~{healthy_range['optimal']}%\n\n"
    )
    
    if last_measurement:
        text += f"üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {last_measurement.body_fat_percent}%\n\n"
    
    text += "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞:</b>"
    
    await state.set_state(FatTracker.goal)
    await state.update_data(setting_goal_only=True, user_gender=gender_normalized)
    
    await callback.message.edit_text(text, reply_markup=back_kb, parse_mode='HTML')

@router.callback_query(F.data == 'fat_recommendations')
async def get_fat_recommendations(callback: CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç Mistral AI"""
    await callback.answer()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            user_result = await session.execute(
                select(User).where(User.tg_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()
            
            measurement_result = await session.execute(
                select(FatTracking)
                .where(FatTracking.user_id == callback.from_user.id)
                .order_by(desc(FatTracking.created_at))
                .limit(5)
            )
            measurements = measurement_result.scalars().all()
        
        if not measurements:
            await callback.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã!",
                reply_markup=fat_tracker_kb
            )
            return
        
        latest = measurements[0]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            "ü§ñ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...</b>\n\n"
            "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ò–ò...",
            parse_mode='HTML'
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        from api.ai_api.fat_recommendations import generate_fat_recommendations
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ—Ä–µ–Ω–∏–π
        history = []
        for m in measurements:
            history.append({
                'fat_percent': m.body_fat_percent,
                'date': datetime.strptime(m.date, '%Y-%m-%d').date(),
                'waist_cm': m.waist_cm,
                'hip_cm': m.hip_cm
            })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await generate_fat_recommendations(
            fat_percent=latest.body_fat_percent,
            goal_fat_percent=latest.goal_fat_percent,
            gender=latest.gender,
            age=user.age if user else None,
            height_cm=user.height if user else None,
            weight_kg=user.weight if user else None,
            activity_level=user.activity_level if user else None,
            waist_cm=latest.waist_cm,
            hip_cm=latest.hip_cm,
            measurement_history=history
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        text = (
            f"ü§ñ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò</b>\n\n"
            f"üìä <b>–ê–Ω–∞–ª–∏–∑:</b> {recommendations['analysis']}\n\n"
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            f"{recommendations['recommendations']}\n\n"
            f"üéØ –ò—Å—Ç–æ—á–Ω–∏–∫: {('Mistral AI' if recommendations['source'] == 'mistral_ai' else '–°–∏—Å—Ç–µ–º–Ω—ã–µ')}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            latest.recommendation = recommendations['recommendations']
            session.add(latest)
            await session.commit()
        
        await callback.message.edit_text(text, reply_markup=fat_tracker_kb, parse_mode='HTML')
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=fat_tracker_kb
        ) 