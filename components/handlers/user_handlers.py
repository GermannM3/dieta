from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
import os
import requests
import json
from datetime import datetime, timedelta
import asyncio
import logging

from database.crud import add_user_if_not_exists, reset_context, add_to_context, save_fsm_state, get_fsm_state, clear_fsm_state
import components.keyboards.user_kb as kb
from components.states.user_states import Chat, Image
from api.ai_api.generate_text import translate
from api.ai_api.gigachat_api import generate_text_gigachat
from components.keyboards.user_kb import main_menu_kb

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º async_session ---
from database.init_database import async_session, User, Meal, Preset

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤
REQUEST_TIMEOUT = 30  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
CONNECTION_TIMEOUT = 10  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

# API URL –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
API_URL = os.getenv('API_BASE_URL', 'http://127.0.0.1:8000')

router = Router()

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–∏–µ—Ç–æ–ª–æ–≥–∞
DIETOLOG_PROMPT = """
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø–∏—Ç–∞–Ω–∏—é, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∏–µ—Ç –∏ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è.

–¢–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1. –ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ
2. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è - —É—á–∏—Ç—ã–≤–∞–µ—à—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –¥–∏–µ—Ç—ã –∏–ª–∏ –æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
4. –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - –ø–æ–º–æ–≥–∞–µ—à—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å
5. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –º–æ—Ç–∏–≤–∏—Ä—É–µ—à—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–æ–≤

–¢—ã —É–º–µ–µ—à—å:
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –ë–ñ–£
- –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è
- –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é/–Ω–∞–±–æ—Ä—É –≤–µ—Å–∞
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Ö —Å–æ—á–µ—Ç–∞–Ω–∏—è
- –û–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è
- –ü–æ–º–æ–≥–∞—Ç—å —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ–º —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π

–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.
"""

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await add_user_if_not_exists(tg_id=message.from_user.id)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –µ—Å–ª–∏ –µ—Å—Ç—å
    saved_state, saved_data = await get_fsm_state(message.from_user.id)
    if saved_state:
        await state.set_state(saved_state)
        if saved_data:
            await state.set_data(saved_data)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ —á–µ—Ä–µ–∑ API –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ API
        r = requests.get(f'{API_URL}/api/profile?tg_id={message.from_user.id}')
        if r.status_code == 200:
            profile = r.json().get('profile')
            if not profile.get('name'):
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                profile_data = {
                    "tg_id": message.from_user.id,
                    "name": message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    "age": 25,
                    "gender": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                    "weight": 70.0,
                    "height": 170.0,
                    "activity_level": 2
                }
                requests.post(f'{API_URL}/api/profile', json=profile_data)
    except:
        pass  # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
    await message.answer(
        f'<b>üéâ –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n'
        f'–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é! ü•ó\n\n'
        
        f'<b>ü§ñ –ß—Ç–æ —è —É–º–µ—é:</b>\n'
        f'üçé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –ª—é–±—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò\n'
        f'üìä –í–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å\n'
        f'ü•ò –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ–Ω—é –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏\n'
        f'üë®‚Äç‚öïÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥\n'
        f'üíß –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n'
        f'üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—é –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö\n'
        f'üìù –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥\n'
        f'üèÜ –ú–æ—Ç–∏–≤–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–æ–π –±–∞–ª–ª–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n'
        
        f'<b>üéØ –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n'
        f'‚Ä¢ –¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ GigaChat\n'
        f'‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n'
        f'‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∏—â–µ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n'
        f'‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–µ–ª–µ–π: –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ\n\n'
        
        f'<b>üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n'
        f'1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /profile üë§\n'
        f'2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏: /addmeal üçΩÔ∏è\n'
        f'3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é: /menu üìã\n'
        f'4Ô∏è‚É£ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–∏–µ—Ç–æ–ª–æ–≥—É: /dietolog üë®‚Äç‚öïÔ∏è\n\n'
        
        f'<b>üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        f'/profile ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º\n'
        f'/addmeal ‚Äî –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É\n'
        f'/history ‚Äî –ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è\n'
        f'/menu ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é\n'
        f'/dietolog ‚Äî –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–∏–µ—Ç–æ–ª–æ–≥–∞\n'
        f'/water ‚Äî –¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã\n'
        f'/score ‚Äî –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n'
        f'/presets ‚Äî –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã\n\n'
        
        f'<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n'
        f'<i>–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!</i>\n\n'
        
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è',
        reply_markup=main_menu_kb
    )

@router.callback_query(F.data == 'start_dialog')
async def start_dialog(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'Chat:active':
        await callback.answer('–î–∏–∞–ª–æ–≥ —É–∂–µ –Ω–∞—á–∞—Ç')
        await callback.message.answer('<b>–î–∏–∞–ª–æ–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω</b>')
    else:
        await callback.message.answer('<b>–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop</b>')
        await callback.answer('–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç')
        await state.set_state(Chat.active)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await save_fsm_state(callback.from_user.id, 'Chat:active')

@router.message(Command('stop'))
async def stop(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'Chat:active':
        await state.clear()
        await clear_fsm_state(message.from_user.id)
        await message.answer('<b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dietolog</b>')
        await reset_context(tg_id=message.from_user.id)
    elif current_state == 'Chat:waiting':
        await message.answer('<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>')
    else:
        await message.answer('<b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dietolog</b>')

@router.message(Command('reset'))
async def reset(message: Message, state: FSMContext):
    await reset_context(tg_id=message.from_user.id)
    await clear_fsm_state(message.from_user.id)
    await state.clear()
    await message.answer('<b>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ—á–∏—â–µ–Ω–∞</b>')

@router.message(Command('generate'))
async def generate_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'Chat:active' or current_state == 'Chat:waiting':
        await message.answer('<b>–î–∏–∞–ª–æ–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω</b>')
    else:
        await message.answer('<b>–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop</b>')
        await state.set_state(Chat.active)
        await save_fsm_state(message.from_user.id, 'Chat:active')

@router.message(Command('info'))
async def info(message: Message):
    await message.answer('üö´ <b><i>–ü—Ä–∞–≤–∏–ª–∞:</i></b>\n‚Ä¢ –ó–∞–ø—Ä–µ—â—ë–Ω –∫–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–µ–Ω–∞–≤–∏—Å—Ç—å—é, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–µ–π (—Ä–∞—Å–∞, –ø–æ–ª, —Ä–µ–ª–∏–≥–∏—è –∏ –¥—Ä.), –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø/–ª–∏—á–Ω–æ—Å—Ç–µ–π.\n‚Ä¢ –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –±—É–ª–ª–∏–Ω–≥–∞, —É–≥—Ä–æ–∑, –∫—Å–µ–Ω–æ—Ñ–æ–±–∏–∏, —Ä–∞—Å–∏–∑–º–∞ –∏–ª–∏ —É–Ω–∏–∂–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã.\n\n<b>–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö —Ü–µ–ª—è—Ö ‚Äî —Å–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ! üôå</b>')

@router.message(Chat.active)
async def chat_active(message: Message, state: FSMContext): 
    current_state = await state.get_state()
    if current_state == 'Chat:waiting':
        await message.answer('<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞</b>')
    else:
        if message.content_type == ContentType.TEXT:
            waiting_message = await message.answer('<b><i>‚è≥ –î–∏–µ—Ç–æ–ª–æ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...</i></b>')
            await state.set_state(Chat.waiting)
            await save_fsm_state(message.from_user.id, 'Chat:waiting')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                r = requests.get(f'{API_URL}/api/profile?tg_id={message.from_user.id}', timeout=REQUEST_TIMEOUT)
                profile_data = {}
                if r.status_code == 200:
                    profile = r.json().get('profile', {})
                    if profile.get('name'):
                        profile_data = profile
            except:
                profile_data = {}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
            profile_context = ""
            if profile_data:
                profile_context = f"""
–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
- –ò–º—è: {profile_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
- –í–æ–∑—Ä–∞—Å—Ç: {profile_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç
- –ü–æ–ª: {profile_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}
- –í–µ—Å: {profile_data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥
- –†–æ—Å—Ç: {profile_data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º
- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {profile_data.get('activity_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}

"""
            
            full_prompt = f"{DIETOLOG_PROMPT}\n\n{profile_context}–ö–ª–∏–µ–Ω—Ç: {message.text}\n\n–î–∏–µ—Ç–æ–ª–æ–≥:"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –¥–∏–µ—Ç–æ–ª–æ–≥–∞
            ai_response = await generate_text_gigachat(prompt=full_prompt)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å /stop
            ai_response += "\n\nüí° –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏—ë–º, –Ω–∞–∂–º–∏—Ç–µ /stop"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            await add_to_context(tg_id=message.from_user.id, message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}")
            await add_to_context(tg_id=message.from_user.id, message=f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}")
            
            try:
                await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
            except TelegramBadRequest:
                await message.answer(ai_response[:4050], parse_mode=None)
            await state.set_state(Chat.active)
            await save_fsm_state(message.from_user.id, 'Chat:active')
            await waiting_message.delete()
        elif message.content_type == ContentType.PHOTO:
            access = check_premium(tg_id=message.from_user.id)
            if not access:
                await message.answer('<b>–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É /premium</b>')
                return
            waiting_message = await message.answer('<b><i>‚è≥ –û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</i></b>')
            await state.set_state(Chat.waiting)
            await save_fsm_state(message.from_user.id, 'Chat:waiting')
            ai_response = await answer_to_view_prompt(message=message)
            ai_response = await style_changer(latex_code=ai_response)
            try:
                await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
            except TelegramBadRequest:
                await message.answer(ai_response[:4050], parse_mode=None)
            await state.set_state(Chat.active)
            await save_fsm_state(message.from_user.id, 'Chat:active')
            await waiting_message.delete()
        else: 
            await message.answer('<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>')

@router.message(Chat.waiting)
async def waiting(message: Message):
    await message.answer('<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞</b>')

@router.callback_query(F.data == 'back')
async def back(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        f'<b>üéâ –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!</b>\n'
        f'–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é! ü•ó\n\n'
        
        f'<b>ü§ñ –ß—Ç–æ —è —É–º–µ—é:</b>\n'
        f'üçé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –ª—é–±—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò\n'
        f'üìä –í–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å\n'
        f'ü•ò –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ–Ω—é –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏\n'
        f'üë®‚Äç‚öïÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥\n'
        f'üíß –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n'
        f'üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—é –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö\n'
        f'üìù –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥\n'
        f'üèÜ –ú–æ—Ç–∏–≤–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–æ–π –±–∞–ª–ª–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n'
        
        f'<b>üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n'
        f'1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /profile üë§\n'
        f'2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏: /addmeal üçΩÔ∏è\n'
        f'3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é: /menu üìã\n'
        f'4Ô∏è‚É£ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–∏–µ—Ç–æ–ª–æ–≥—É: /dietolog üë®‚Äç‚öïÔ∏è\n\n'
        
        f'<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n'
        f'<i>–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!</i>\n\n'
        
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è',
        reply_markup=kb.main_menu_kb
    )
    await state.clear()

class ProfileFSM(StatesGroup):
    name = State()
    age = State()
    gender = State()
    weight = State()
    height = State()
    activity = State()

class EditProfileFSM(StatesGroup):
    waiting = State()

@router.callback_query(F.data == 'profile')
async def profile_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    import requests
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    try:
        r = requests.get(f'{API_URL}/api/profile?tg_id={user_id}')
        if r.status_code == 200:
            profile = r.json().get('profile')
            if not profile or not profile.get('name'):
                await callback.message.answer('<b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º!</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
                await state.set_state(ProfileFSM.name)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–µ
            water_r = requests.get(f'{API_URL}/api/water?user_id={user_id}')
            water_ml = 0
            if water_r.status_code == 200:
                water_data = water_r.json()
                water_ml = water_data.get('water_ml', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∂–∏—Ä–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            fat_info = ""
            try:
                from database.init_database import async_session, User
                from api.ai_api.fat_calculator import FatPercentageCalculator
                
                async with async_session() as session:
                    user = await session.get(User, user_id)
                    if user and user.body_fat_percent:
                        category = FatPercentageCalculator.get_fat_category(
                            user.body_fat_percent, 
                            user.gender or 'male'
                        )
                        fat_info = f'üèÉ‚Äç‚ôÄÔ∏è % –∂–∏—Ä–∞: {user.body_fat_percent}% {category["emoji"]}\n'
                        if user.goal_fat_percent:
                            diff = user.goal_fat_percent - user.body_fat_percent
                            if abs(diff) <= 1:
                                fat_info += f'üéØ –¶–µ–ª—å: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!\n'
                            else:
                                fat_info += f'üéØ –î–æ —Ü–µ–ª–∏: {abs(diff):.1f}%\n'
            except:
                pass  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∂–∏—Ä–µ
            
            # –£—Ä–æ–≤–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_levels = {
                1: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                2: "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
                3: "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                4: "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                5: "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            }
            
            await callback.message.edit_text(
                f'<b>üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n'
                f'üë§ –ò–º—è: {profile.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}\n'
                f'üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω")} –ª–µ—Ç\n'
                f'‚öß –ü–æ–ª: {profile.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω")}\n'
                f'‚öñÔ∏è –í–µ—Å: {profile.get("weight", "–ù–µ —É–∫–∞–∑–∞–Ω")} –∫–≥\n'
                f'üìè –†–æ—Å—Ç: {profile.get("height", "–ù–µ —É–∫–∞–∑–∞–Ω")} —Å–º\n'
                f'üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_levels.get(profile.get("activity_level"), "–ù–µ —É–∫–∞–∑–∞–Ω")}\n'
                f'{fat_info}'
                f'üíß –í–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è: {water_ml} –º–ª\n'
                f'üèÜ –ë–∞–ª–ª—ã: {profile.get("score", 0)}\n'
                f'üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {profile.get("streak_days", 0)}\n\n'
                f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
                reply_markup=kb.profile_kb
            )
        else:
            await callback.message.answer('<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è</b>')
    except Exception as e:
        error_msg = str(e).replace('<', '&lt;').replace('>', '&gt;')
        await callback.message.answer(f'<b>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {error_msg}</b>')

@router.message(ProfileFSM.name)
async def profile_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):</b>')
    await state.set_state(ProfileFSM.age)

@router.message(ProfileFSM.age)
async def profile_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if not (5 < age < 120): raise ValueError
    except:
        await message.answer('<b>–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 6 –¥–æ 119</b>')
        return
    await state.update_data(age=age)
    await message.answer('<b>–í–∞—à –ø–æ–ª? (–º/–∂):</b>')
    await state.set_state(ProfileFSM.gender)

@router.message(ProfileFSM.gender)
async def profile_gender(message: Message, state: FSMContext):
    gender = message.text.strip().lower()
    if gender not in ['–º', '–∂']:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ "–º" –∏–ª–∏ "–∂"</b>')
        return
    await state.update_data(gender=gender)
    await message.answer('<b>–í–∞—à –≤–µ—Å (–∫–≥):</b>')
    await state.set_state(ProfileFSM.weight)

@router.message(ProfileFSM.weight)
async def profile_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text.strip())
        if not (20 < weight < 400): raise ValueError
    except:
        await message.answer('<b>–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (20-400)</b>')
        return
    await state.update_data(weight=weight)
    await message.answer('<b>–í–∞—à —Ä–æ—Å—Ç (—Å–º):</b>')
    await state.set_state(ProfileFSM.height)

@router.message(ProfileFSM.height)
async def profile_height(message: Message, state: FSMContext):
    try:
        height = float(message.text.strip())
        if not (80 < height < 250): raise ValueError
    except:
        await message.answer('<b>–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (80-250)</b>')
        return
    await state.update_data(height=height)
    await message.answer('<b>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1-5):\n1 ‚Äî –º–∏–Ω–∏–º—É–º, 5 ‚Äî –º–∞–∫—Å–∏–º—É–º</b>')
    await state.set_state(ProfileFSM.activity)

@router.message(ProfileFSM.activity)
async def profile_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text.strip())
        if not (1 <= activity <= 5): raise ValueError
    except:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5</b>')
        return
    await state.update_data(activity=activity)
    data = await state.get_data()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ backend
    import requests
    payload = {
        'tg_id': message.from_user.id,
        'name': data['name'],
        'age': data['age'],
        'gender': data['gender'],
        'weight': data['weight'],
        'height': data['height'],
        'activity_level': data['activity']
    }
    try:
        r = requests.post(f'{API_URL}/api/profile', json=payload, timeout=REQUEST_TIMEOUT)
        if r.status_code == 200:
            await message.answer('<b>‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>', reply_markup=kb.main_menu_kb)
        else:
            error_detail = r.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if r.status_code != 500 else '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            await message.answer(f'<b>‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {error_detail}</b>')
    except requests.exceptions.RequestException as e:
        await message.answer(f'<b>‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.</b>')
    except Exception as e:
        error_msg = str(e).replace('<', '&lt;').replace('>', '&gt;')
        await message.answer(f'<b>‚ùå –û—à–∏–±–∫–∞: {error_msg}</b>')
    await state.clear()

@router.callback_query(F.data == 'edit_profile')
async def edit_profile_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('<b>–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    await state.set_state(ProfileFSM.name)
    await save_fsm_state(callback.from_user.id, 'ProfileFSM:name')

@router.message(EditProfileFSM.waiting)
async def edit_profile_waiting(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '–Ω–∞–∑–∞–¥']:
        await state.clear()
        await clear_fsm_state(message.from_user.id)
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.main_menu_kb)
        return
    
    try:
        parts = message.text.strip().split('|')
        if len(parts) != 6:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "<code>–∏–º—è|–≤–æ–∑—Ä–∞—Å—Ç|–ø–æ–ª|–≤–µ—Å|—Ä–æ—Å—Ç|–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</code>"
            )
            return
        
        name, age_str, gender, weight_str, height_str, activity_str = parts
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        try:
            age = int(age_str)
            if not (5 < age < 120):
                raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 119")
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
            return
        
        if gender.lower() not in ['–º', '–∂']:
            await message.answer("‚ùå –ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–º' –∏–ª–∏ '–∂'")
            return
        
        try:
            weight = float(weight_str)
            if not (20 < weight < 400):
                raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 400 –∫–≥")
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å")
            return
        
        try:
            height = float(height_str)
            if not (80 < height < 250):
                raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 80 –¥–æ 250 —Å–º")
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç")
            return
        
        try:
            activity = int(activity_str)
            if not (1 <= activity <= 5):
                raise ValueError("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ API
        profile_data = {
            'name': name,
            'age': age,
            'gender': gender.lower(),
            'weight': weight,
            'height': height,
            'activity_level': activity
        }
        
        r = requests.put(f'{API_URL}/api/profile', params={'tg_id': message.from_user.id}, json=profile_data, timeout=10)
        
        if r.status_code == 200:
            await message.answer(
                "‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üë§ –ò–º—è: {name}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
                f"‚öß –ü–æ–ª: {gender}\n"
                f"‚öñÔ∏è –í–µ—Å: {weight} –∫–≥\n"
                f"üìè –†–æ—Å—Ç: {height} —Å–º\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}/5",
                reply_markup=kb.main_menu_kb
            )
        else:
            error_detail = r.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if r.content else '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {error_detail}")
    
    except requests.exceptions.RequestException as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API —Å–µ—Ä–≤–µ—Ä–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()
    await clear_fsm_state(message.from_user.id)

# --- FSM –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ---
class AddMealFSM(StatesGroup):
    waiting = State()

class PresetFSM(StatesGroup):
    name = State()
    food = State()

class WaterFSM(StatesGroup):
    add = State()

class MoodFSM(StatesGroup):
    waiting = State()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã ---
@router.message(Command('addmeal'))
@router.message(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –µ–¥—É')
async def addmeal_command(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await clear_fsm_state(message.from_user.id)
    
    message_text = (
        "üçΩÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö\n"
        "üí° <i>–ü—Ä–∏–º–µ—Ä: –Ø–±–ª–æ–∫–æ 150</i>\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –Ω–∏–∂–µ üëá"
    )
    
    await message.answer(message_text, reply_markup=kb.add_food_kb, parse_mode='HTML')
    await state.set_state(AddMealFSM.waiting)
    await save_fsm_state(message.from_user.id, 'AddMealFSM:waiting')

@router.message(AddMealFSM.waiting)
async def addmeal_waiting(message: Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await state.clear()
        await clear_fsm_state(message.from_user.id)
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.main_menu_kb)
        return
        
    parts = message.text.strip().rsplit(' ', 1)
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("–§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö.\n–ü—Ä–∏–º–µ—Ä: –Ø–±–ª–æ–∫–æ 150")
        return
    food_name, weight = parts[0], float(parts[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É
    now = datetime.now()
    date = now.strftime('%Y-%m-%d')
    time = now.strftime('%H:%M')
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π —Å –∂–µ—Å—Ç–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
    prompt = f"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ù–ï –§–ê–ù–¢–ê–ó–ò–†–£–ô –ò –ù–ï –ó–ê–í–´–®–ê–ô –∫–∞–ª–æ—Ä–∏–∏!

–ó–ê–î–ê–ß–ê: –†–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ—á–Ω—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è "{food_name}" –≤–µ—Å–æ–º {weight} –≥—Ä–∞–º–º.

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –Ω–∞ 100–≥
2. –ù–ï –¥–æ–±–∞–≤–ª—è–π –∫–∞–ª–æ—Ä–∏–∏ "–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π"
3. –ù–ï —É—á–∏—Ç—ã–≤–∞–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
4. –ù–ï –¥–æ–±–∞–≤–ª—è–π –º–∞—Å–ª–æ/—Å–æ—É—Å—ã –µ—Å–ª–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã
5. –î–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –±–µ–∑ –¥–æ–±–∞–≤–æ–∫ –∫–∞–ª–æ—Ä–∏–∏ = 0-5 –∫–∫–∞–ª
6. –†–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –∫–æ—Ñ–µ –ë–ï–ó –î–û–ë–ê–í–û–ö = 2-4 –∫–∫–∞–ª –Ω–∞ —á–∞—à–∫—É!

–†–ï–§–ï–†–ï–ù–°–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –Ω–∞ 100–≥:
- –Ø–±–ª–æ–∫–æ: 52 –∫–∫–∞–ª, –±–µ–ª–∫–∏ 0.3–≥, –∂–∏—Ä—ã 0.2–≥, —É–≥–ª–µ–≤–æ–¥—ã 14–≥
- –ë–∞–Ω–∞–Ω: 89 –∫–∫–∞–ª, –±–µ–ª–∫–∏ 1.1–≥, –∂–∏—Ä—ã 0.3–≥, —É–≥–ª–µ–≤–æ–¥—ã 23–≥
- –ö—É—Ä–∏—Ü–∞ –≤–∞—Ä–µ–Ω–∞—è: 165 –∫–∫–∞–ª, –±–µ–ª–∫–∏ 31–≥, –∂–∏—Ä—ã 3.6–≥, —É–≥–ª–µ–≤–æ–¥—ã 0–≥
- –†–∏—Å –≤–∞—Ä–µ–Ω—ã–π: 130 –∫–∫–∞–ª, –±–µ–ª–∫–∏ 2.7–≥, –∂–∏—Ä—ã 0.3–≥, —É–≥–ª–µ–≤–æ–¥—ã 28–≥
- –ö–æ—Ñ–µ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –ë–ï–ó –¥–æ–±–∞–≤–æ–∫: 2 –∫–∫–∞–ª –Ω–∞ 100–º–ª!

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û JSON):
{{
    "calories": —Ç–æ—á–Ω–æ–µ_—á–∏—Å–ª–æ_–∫–∞–ª–æ—Ä–∏–π,
    "protein": –±–µ–ª–∫–∏_–≤_–≥—Ä–∞–º–º–∞—Ö,
    "fat": –∂–∏—Ä—ã_–≤_–≥—Ä–∞–º–º–∞—Ö,
    "carbs": —É–≥–ª–µ–≤–æ–¥—ã_–≤_–≥—Ä–∞–º–º–∞—Ö
}}

–ü—Ä–æ–¥—É–∫—Ç: "{food_name}"
–í–µ—Å: {weight}–≥
–†–∞—Å—Å—á–∏—Ç–∞–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ 100–≥.
"""
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
        analyzing_msg = await message.answer("ü§ñ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–¥—É–∫—Ç...</b>")
        
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∫—ç—à) - —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ 1–≥
        fallback_foods = {
            "—è–±–ª–æ–∫–æ": {"calories": 0.52, "protein": 0.003, "fat": 0.002, "carbs": 0.14},
            "–±–∞–Ω–∞–Ω": {"calories": 0.89, "protein": 0.011, "fat": 0.003, "carbs": 0.23},
            "—Ö–ª–µ–±": {"calories": 2.64, "protein": 0.089, "fat": 0.033, "carbs": 0.491},
            "–∫—É—Ä–∏—Ü–∞": {"calories": 1.65, "protein": 0.31, "fat": 0.036, "carbs": 0.0},
            "—Ä–∏—Å": {"calories": 1.30, "protein": 0.028, "fat": 0.003, "carbs": 0.28},
            "–∫–æ—Ñ–µ": {"calories": 0.02, "protein": 0.0002, "fat": 0.0, "carbs": 0.0},
            "—Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –∫–æ—Ñ–µ": {"calories": 0.02, "protein": 0.0002, "fat": 0.0, "carbs": 0.0},
            "—á–∞–π": {"calories": 0.01, "protein": 0.0, "fat": 0.0, "carbs": 0.0},
            "–≤–æ–¥–∞": {"calories": 0.0, "protein": 0.0, "fat": 0.0, "carbs": 0.0}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –∫—ç—à–µ
        food_lower = food_name.lower()
        for key, values in fallback_foods.items():
            if key in food_lower:
                nutrition_data = {
                    "calories": values["calories"] * weight,
                    "protein": values["protein"] * weight,
                    "fat": values["fat"] * weight,
                    "carbs": values["carbs"] * weight
                }
                await analyzing_msg.edit_text("‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!</b>")
                break
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç GigaChat —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
            try:
                ai_response = await generate_text_gigachat(prompt=prompt)
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                import json
                import re
                
                # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                json_match = re.search(r'\{.*\}', ai_response, re.DOTALL)
                if json_match:
                    nutrition_data = json.loads(json_match.group())
                    await analyzing_msg.edit_text("‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>")
                else:
                    raise ValueError("–ù–µ—Ç JSON –≤ –æ—Ç–≤–µ—Ç–µ")
            except Exception as e:
                # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ GigaChat
                nutrition_data = {
                    "calories": weight * 1.5,  # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    "protein": weight * 0.05,
                    "fat": weight * 0.02,
                    "carbs": weight * 0.15
                }
                await analyzing_msg.edit_text("‚ö†Ô∏è <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>")
        
        calories = nutrition_data.get('calories', 0)
        protein = nutrition_data.get('protein', 0)
        fat = nutrition_data.get('fat', 0)
        carbs = nutrition_data.get('carbs', 0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–¥—ã
        payload = {
            'user_id': message.from_user.id,
            'food_name': food_name,
            'weight_grams': weight,
            'date': date,
            'time': time,
            'calories': calories,
            'protein': protein,
            'fat': fat,
            'carbs': carbs
        }
        
        r = requests.post(f'{API_URL}/api/meal', json=payload, timeout=REQUEST_TIMEOUT)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
        await analyzing_msg.delete()
        
        if r.status_code == 200:
            await message.answer(
                f"‚úÖ <b>{food_name.title()} ({weight} –≥) –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üìä <b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–∏: {calories:.1f} –∫–∫–∞–ª\n"
                f"ü•© –ë–µ–ª–∫–∏: {protein:.1f} –≥\n"
                f"üßà –ñ–∏—Ä—ã: {fat:.1f} –≥\n"
                f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f} –≥",
                reply_markup=kb.main_menu_kb
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–¥—ã", reply_markup=kb.main_menu_kb)
        
        await state.clear()
        await clear_fsm_state(message.from_user.id)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ–¥—ã: {str(e)[:100]}...",
            reply_markup=kb.main_menu_kb
        )
        await state.clear()
        await clear_fsm_state(message.from_user.id)

# --- Preset FSM ---
@router.callback_query(F.data == 'food_templates')
async def food_templates_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤' –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ–¥—ã"""
    await callback.answer()
    user_id = callback.from_user.id
    
    try:
        import requests
        r = await safe_api_request('GET', f'{API_URL}/api/presets?user_id={user_id}')
        if r.status_code == 200:
            presets = r.json().get('presets', [])
            if not presets:
                await callback.message.edit_text(
                    "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n"
                    "üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω:\n"
                    "1. –í—ã–±–µ—Ä–∏—Ç–µ <b>¬´–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã¬ª</b> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n"
                    "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è\n\n"
                    "–ê –ø–æ–∫–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–¥—É –≤—Ä—É—á–Ω—É—é üëá\n"
                    "üìù –í–≤–µ–¥–∏—Ç–µ: <i>–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Å_–≤_–≥—Ä–∞–º–º–∞—Ö</i>\n"
                    "üçé –ü—Ä–∏–º–µ—Ä: <code>–Ø–±–ª–æ–∫–æ 150</code>",
                    reply_markup=kb.back_kb,
                    parse_mode='HTML'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard = []
            for preset in presets:
                keyboard.append([InlineKeyboardButton(
                    text=f"üçΩÔ∏è {preset['name']}", 
                    callback_data=f"select_preset_{preset['id']}"
                )])
            
            keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é', callback_data='back_to_add_food')])
            templates_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await callback.message.edit_text(
                "üçΩÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
                "üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω –≤—ã—à–µ",
                reply_markup=templates_kb,
                parse_mode='HTML'
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=kb.back_kb
            )
    except Exception as e:
                 await callback.message.edit_text(
             "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
             reply_markup=kb.back_kb
         )

@router.callback_query(F.data.startswith('select_preset_'))
async def select_preset_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    await callback.answer()
    preset_id = int(callback.data.split('_')[-1])
    user_id = callback.from_user.id
    
    try:
        import requests
        r = await safe_api_request('POST', f'{API_URL}/api/add_preset_meals', 
                                 json={'user_id': user_id, 'preset_id': preset_id})
        
        if r.status_code == 200:
            result = r.json()
            await callback.message.edit_text(
                f"‚úÖ <b>–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üçΩÔ∏è <b>{result.get('preset_name', '–®–∞–±–ª–æ–Ω')}</b>\n"
                f"üìä –ö–∞–ª–æ—Ä–∏–∏: {result.get('total_calories', 0):.1f} –∫–∫–∞–ª\n"
                f"ü•© –ë–µ–ª–∫–∏: {result.get('total_protein', 0):.1f} –≥\n"
                f"üßà –ñ–∏—Ä—ã: {result.get('total_fat', 0):.1f} –≥\n"
                f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {result.get('total_carbs', 0):.1f} –≥\n\n"
                f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –±–ª—é–¥: {result.get('meals_count', 0)}",
                reply_markup=kb.back_kb,
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            await clear_fsm_state(user_id)
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=kb.back_kb
            )
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.back_kb
        )

@router.callback_query(F.data == 'back_to_add_food')
async def back_to_add_food_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–æ—Ä–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥—ã"""
    await callback.answer()
    
    message_text = (
        "üçΩÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö\n"
        "üí° <i>–ü—Ä–∏–º–µ—Ä: –Ø–±–ª–æ–∫–æ 150</i>\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –Ω–∏–∂–µ üëá"
    )
    
    await callback.message.edit_text(message_text, reply_markup=kb.add_food_kb, parse_mode='HTML')
    await state.set_state(AddMealFSM.waiting)
    await save_fsm_state(callback.from_user.id, 'AddMealFSM:waiting')

@router.callback_query(F.data == 'presets')
async def presets_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    import requests
    user_id = callback.from_user.id
    try:
        r = requests.get(f'{API_URL}/api/presets?user_id={user_id}', timeout=REQUEST_TIMEOUT)
        if r.status_code == 200:
            presets = r.json().get('presets', [])
            if not presets:
                await callback.message.answer('<b>–£ –≤–∞—Å –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:</b>')
                await state.set_state(PresetFSM.name)
                await save_fsm_state(user_id, 'PresetFSM:name')
                return
            text = '<b>–í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã:</b>\n'
            for p in presets:
                text += f"\n{p['id']}: {p['name']} ‚Äî {len(p['food_items'])} –±–ª—é–¥"
            text += '\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞.'
            await callback.message.answer(text)
            await state.set_state(PresetFSM.name)
            await save_fsm_state(user_id, 'PresetFSM:name')
        else:
            await callback.message.answer('<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤</b>')
    except Exception as e:
        error_msg = str(e).replace('<', '&lt;').replace('>', '&gt;')
        await callback.message.answer(f'<b>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {error_msg}</b>')

@router.message(PresetFSM.name)
async def preset_name(message: Message, state: FSMContext):
    await state.update_data(preset_name=message.text.strip(), food_items=[])
    await save_fsm_state(message.from_user.id, 'PresetFSM:name', {'preset_name': message.text.strip(), 'food_items': []})
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ –∏ –≤–µ—Å (–ø—Ä–∏–º–µ—Ä: –Ø–±–ª–æ–∫–æ, 100). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ".</b>')
    await state.set_state(PresetFSM.food)
    await save_fsm_state(message.from_user.id, 'PresetFSM:food')

@router.message(PresetFSM.food)
async def preset_food(message: Message, state: FSMContext):
    if message.text.strip().lower() == '–≥–æ—Ç–æ–≤–æ':
        data = await state.get_data()
        import requests
        payload = {
            'user_id': message.from_user.id,
            'name': data['preset_name'],
            'food_items': data['food_items']
        }
        try:
            r = requests.post(f'{API_URL}/api/preset', json=payload, timeout=REQUEST_TIMEOUT)
            if r.status_code == 200:
                await message.answer('<b>–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>', reply_markup=kb.main_menu_kb)
            else:
                await message.answer('<b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞</b>', reply_markup=kb.main_menu_kb)
        except Exception as e:
            error_msg = str(e).replace('<', '&lt;').replace('>', '&gt;')
            await message.answer(f'<b>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {error_msg}</b>', reply_markup=kb.main_menu_kb)
        await state.clear()
        await clear_fsm_state(message.from_user.id)
        return
    
    try:
        food_name, weight = [x.strip() for x in message.text.split(',')]
        weight = float(weight)
    except Exception:
        await message.answer('<b>–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: –Ø–±–ª–æ–∫–æ, 100</b>')
        return
    
    data = await state.get_data()
    food_items = data.get('food_items', [])
    food_items.append({'food_name': food_name, 'weight': weight})
    await state.update_data(food_items=food_items)
    await save_fsm_state(message.from_user.id, 'PresetFSM:food', {'preset_name': data['preset_name'], 'food_items': food_items})
    await message.answer('<b>–î–æ–±–∞–≤–ª–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ –∏–ª–∏ "–≥–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.</b>')

# --- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ FSM ---
@router.message(Command('mood'))
@router.message(lambda message: message.text == '–¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è')
async def mood_command(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await clear_fsm_state(message.from_user.id)
    await message.answer("–ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? (–æ—Ç 1 –¥–æ 5)", reply_markup=kb.back_kb)
    await state.set_state(MoodFSM.waiting)
    await save_fsm_state(message.from_user.id, 'MoodFSM:waiting')

@router.message(MoodFSM.waiting)
async def mood_waiting(message: Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await state.clear()
        await clear_fsm_state(message.from_user.id)
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.main_menu_kb)
        return
        
    if message.text not in ['1', '2', '3', '4', '5']:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
        return
    await message.answer(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message.text}", reply_markup=kb.main_menu_kb)
    await state.clear()
    await clear_fsm_state(message.from_user.id)

# –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ë–µ—Å–µ–¥–∞ —Å –ò–ò" - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# --- –¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã —Å FSM ---
@router.message(Command('water'))
@router.message(lambda message: message.text == '–¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã')
async def water_command(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await clear_fsm_state(message.from_user.id)
    
    # –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        current_water = (user.water_ml or 0) if user else 0
    
    await message.answer(f"–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: {current_water} –º–ª\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤—ã–ø–∏–ª–∏:", reply_markup=kb.back_kb)
    await state.set_state(WaterFSM.add)
    await save_fsm_state(message.from_user.id, 'WaterFSM:add')

@router.message(WaterFSM.add)
async def water_add_input(message: Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await state.clear()
        await clear_fsm_state(message.from_user.id)
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.main_menu_kb)
        return
        
    try:
        ml = int(message.text.strip())
        if not (0 < ml < 5000):
            raise ValueError
    except:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª (1-5000)</b>')
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–¥—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            user = User(tg_id=message.from_user.id, water_ml=ml)
            session.add(user)
        else:
            user.water_ml = (user.water_ml or 0) + ml
        await session.commit()
    
    # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    import requests
    payload = {'user_id': message.from_user.id, 'ml': ml}
    try:
        r = requests.post(f'{API_URL}/api/water', json=payload, timeout=REQUEST_TIMEOUT)
        if r.status_code == 200:
            await message.answer(f'<b>üíß –ó–∞–ø–∏—Å–∞–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {ml} –º–ª –≤–æ–¥—ã</b>\n\n<b>–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {user.water_ml} –º–ª</b>', reply_markup=kb.main_menu_kb)
        else:
            # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ)
            await message.answer(f'<b>üíß –ó–∞–ø–∏—Å–∞–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {ml} –º–ª –≤–æ–¥—ã</b>\n\n<b>–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {user.water_ml} –º–ª</b>', reply_markup=kb.main_menu_kb)
    except:
        # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ)
        await message.answer(f'<b>üíß –ó–∞–ø–∏—Å–∞–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {ml} –º–ª –≤–æ–¥—ã</b>\n\n<b>–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {user.water_ml} –º–ª</b>', reply_markup=kb.main_menu_kb)
    
    await state.clear()
    await clear_fsm_state(message.from_user.id)

@router.message(Command('premium'))
async def premium_info(message: Message):
    from components.payment_system.payment_operations import check_premium
    status = check_premium(message.from_user.id)
    await message.answer(f"–ü—Ä–µ–º–∏—É–º {'–∞–∫—Ç–∏–≤–µ–Ω' if status else '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}.")

@router.callback_query(F.data == 'dietolog')
async def dietolog_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    access = check_premium(tg_id=callback.from_user.id)
    if not access:
        await callback.message.answer('<b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç—å: /premium</b>')
        return
    await callback.message.answer('<b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!</b>')

@router.callback_query(F.data == 'menu')
async def menu_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    import requests
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        r = requests.get(f'{API_URL}/api/profile?tg_id={callback.from_user.id}')
        if r.status_code == 200:
            profile = r.json().get('profile', {})
            if not profile:
                await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /profile")
                return
            
            user_data = {
                'name': profile.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                'age': profile.get('age', 25),
                'gender': profile.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                'weight': profile.get('weight', 70),
                'height': profile.get('height', 170),
                'activity_level': profile.get('activity_level', 2)
            }
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /profile")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        stats_data = {}
        try:
            stats_r = requests.get(f'{API_URL}/api/daily_stats?user_id={callback.from_user.id}&days=7')
            if stats_r.status_code == 200:
                stats_data = stats_r.json().get('daily_stats', [])
        except:
            pass
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
        if user_data['gender'].lower() in ['–º', '–º—É–∂—Å–∫–æ–π', 'male']:
            bmr = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age'] + 5
        else:
            bmr = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age'] - 161
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_coefficients = {1: 1.2, 2: 1.375, 3: 1.55, 4: 1.725, 5: 1.9}
        tdee = bmr * activity_coefficients.get(user_data['activity_level'], 1.375)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è
        avg_calories = 0
        avg_protein = 0
        avg_fat = 0
        avg_carbs = 0
        
        if stats_data:
            total_days = len(stats_data)
            total_calories = sum(day.get('calories', 0) for day in stats_data)
            total_protein = sum(day.get('protein', 0) for day in stats_data)
            total_fat = sum(day.get('fat', 0) for day in stats_data)
            total_carbs = sum(day.get('carbs', 0) for day in stats_data)
            
            if total_days > 0:
                avg_calories = total_calories / total_days
                avg_protein = total_protein / total_days
                avg_fat = total_fat / total_days
                avg_carbs = total_carbs / total_days
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        recommendations = ""
        if avg_calories > 0:
            if avg_calories > tdee * 1.1:
                recommendations += "üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –≤—ã –ø–æ—Ç—Ä–µ–±–ª—è–ª–∏ –±–æ–ª—å—à–µ –∫–∞–ª–æ—Ä–∏–π, —á–µ–º –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ä—Ü–∏–∏.\n"
            elif avg_calories < tdee * 0.9:
                recommendations += "üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –≤—ã –ø–æ—Ç—Ä–µ–±–ª—è–ª–∏ –º–µ–Ω—å—à–µ –∫–∞–ª–æ—Ä–∏–π, —á–µ–º –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ä—Ü–∏–∏.\n"
            
            if avg_protein < user_data['weight'] * 1.2:
                recommendations += "ü•© –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–∫–∞ –≤ —Ä–∞—Ü–∏–æ–Ω–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n"
            if avg_fat > tdee * 0.35 / 9:
                recommendations += "üßà –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∏—Ä–æ–≤. –£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é GigaChat
        prompt = f"""
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:

–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
- –ò–º—è: {user_data['name']}
- –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç
- –ü–æ–ª: {user_data['gender']}
- –í–µ—Å: {user_data['weight']} –∫–≥
- –†–æ—Å—Ç: {user_data['height']} —Å–º
- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data['activity_level']}/5
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö: {tdee:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å

–ê–ù–ê–õ–ò–ó –ü–ò–¢–ê–ù–ò–Ø –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 7 –î–ù–ï–ô:
- –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π: {avg_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å
- –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤: {avg_protein:.1f} –≥/–¥–µ–Ω—å
- –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤: {avg_fat:.1f} –≥/–¥–µ–Ω—å
- –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤: {avg_carbs:.1f} –≥/–¥–µ–Ω—å

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
{recommendations}

–°–û–ó–î–ê–ô –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ï –ú–ï–ù–Æ –ù–ê –î–ï–ù–¨:

1. üç≥ –ó–ê–í–¢–†–ê–ö ({tdee*0.25:.0f} –∫–∫–∞–ª)
2. üçΩÔ∏è –û–ë–ï–î ({tdee*0.35:.0f} –∫–∫–∞–ª)
3. üç¥ –£–ñ–ò–ù ({tdee*0.25:.0f} –∫–∫–∞–ª)
4. üçé –ü–ï–†–ï–ö–£–°–´ ({tdee*0.15:.0f} –∫–∫–∞–ª)

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∂–∏:
- –ù–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
- –¢–æ—á–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö
- –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
- –ë–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã

–ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –∏ –≤–∫—É—Å–Ω—ã–º
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –≤ –∫–∞–ª–æ—Ä–∏—è—Ö
- –í–∫–ª—é—á–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ —Ä–∞—Ü–∏–æ–Ω–∞

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
"""
        
        waiting_msg = await callback.message.answer("üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</b>")
        menu_response = await generate_text_gigachat(prompt=prompt)
        
        await waiting_msg.delete()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –æ—Ç–≤–µ—Ç—É
        stats_summary = ""
        if avg_calories > 0:
            stats_summary = f"\n\nüìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
            stats_summary += f"üî• –°—Ä–µ–¥–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {avg_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            stats_summary += f"ü•© –°—Ä–µ–¥–Ω–∏–µ –±–µ–ª–∫–∏: {avg_protein:.1f} –≥/–¥–µ–Ω—å\n"
            stats_summary += f"üßà –°—Ä–µ–¥–Ω–∏–µ –∂–∏—Ä—ã: {avg_fat:.1f} –≥/–¥–µ–Ω—å\n"
            stats_summary += f"üçû –°—Ä–µ–¥–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥—ã: {avg_carbs:.1f} –≥/–¥–µ–Ω—å\n"
            stats_summary += f"üìà –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {tdee:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å"
        
        await callback.message.answer(
            f"üçΩÔ∏è <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è {user_data['name']}</b>\n\n{menu_response}{stats_summary}", 
            reply_markup=kb.main_menu_kb
        )
        
    except Exception as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb.main_menu_kb)

# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –µ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º ‚Äî –ø—Ä–µ–º–∏—É–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

@router.callback_query(F.data == 'recognize_image')
async def recognize_image_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('<b>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –µ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ!</b>')

def fake_callback_query(message):
    return type(
        'FakeCallbackQuery', (), {
            'from_user': message.from_user,
            'message': message,
            'answer': lambda *args, **kwargs: None
        }
    )()

# --- –î–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ä–µ–∞–ª–∏–∑—É—é —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
# /profile
@router.message(Command('profile'))
@router.message(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def profile_command(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    import requests
    user_id = message.from_user.id
    try:
        r = requests.get(f'{API_URL}/api/profile?tg_id={user_id}')
        if r.status_code == 200:
            profile = r.json().get('profile')
            if not profile or not profile.get('name'):
                await message.answer('<b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º!</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
                await state.set_state(ProfileFSM.name)
            else:
                profile_text = f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                profile_text += f"üë§ –ò–º—è: {profile.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                profile_text += f"‚ö• –ü–æ–ª: {profile.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                profile_text += f"‚öñÔ∏è –í–µ—Å: {profile.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
                profile_text += f"üìè –†–æ—Å—Ç: {profile.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º\n"
                profile_text += f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile.get('activity_level', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                
                if profile.get('bmr'):
                    profile_text += f"\nüî• –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º: {profile['bmr']} –∫–∫–∞–ª/–¥–µ–Ω—å"
                if profile.get('daily_calories'):
                    profile_text += f"\nüçΩÔ∏è –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {profile['daily_calories']} –∫–∫–∞–ª"
                
                await message.answer(profile_text, reply_markup=kb.profile_kb)
        else:
            await message.answer('<b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º!</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
            await state.set_state(ProfileFSM.name)
    except Exception as e:
        await message.answer('<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π!</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        await state.set_state(ProfileFSM.name)

# /history
@router.message(Command('history'))
@router.message(lambda message: message.text == '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏')
async def history_command(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    import requests
    try:
        r = requests.get(f'{API_URL}/api/meals?user_id={message.from_user.id}')
        if r.status_code == 200:
            meals = r.json().get('meals', [])
            if not meals:
                await message.answer("<b>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.</b>")
            else:
                text = "<b>üçΩÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏:</b>\n\n"
                for m in meals[-10:]:
                    text += f"üìÖ {m['date']} {m['time']}: {m['food_name']} ‚Äî {m['weight_grams']} –≥, {m['calories']} –∫–∫–∞–ª\n"
                await message.answer(text)
        else:
            await message.answer('<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏</b>')
    except Exception as e:
        error_msg = str(e).replace('<', '&lt;').replace('>', '&gt;')
        await message.answer(f'<b>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {error_msg}</b>')

# /presets
@router.message(Command('presets'))
@router.message(lambda message: message.text == '–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã')
async def presets_command(message: Message, state: FSMContext):
    await state.clear()
    await clear_fsm_state(message.from_user.id)
    
    async with async_session() as session:
        presets = await session.execute(select(Preset).where(Preset.user_id == message.from_user.id))
        presets = presets.scalars().all()
        
        if not presets:
            await message.answer(
                "<b>üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n"
                "üéØ <b>–ß—Ç–æ —Ç–∞–∫–æ–µ —à–∞–±–ª–æ–Ω—ã?</b>\n"
                "–®–∞–±–ª–æ–Ω—ã ‚Äî —ç—Ç–æ –≥–æ—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã –±–ª—é–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —á–∞—Å—Ç–æ –µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–µ.\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤:</b>\n"
                "‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω + –∫–æ—Ñ–µ\n"
                "‚Ä¢ –û–±–µ–¥: –∫—É—Ä–∏—Ü–∞ + —Ä–∏—Å + –æ–≤–æ—â–∏\n"
                "‚Ä¢ –ü–µ—Ä–µ–∫—É—Å: —è–±–ª–æ–∫–æ + –æ—Ä–µ—Ö–∏\n\n"
                "üìù <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω:</b>\n"
                "1. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω' –Ω–∏–∂–µ\n"
                "2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Ö –≤–µ—Å\n"
                "4. –ù–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
                "üöÄ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤:</b>\n"
                "‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\n"
                "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏\n"
                "‚Ä¢ –¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π\n\n"
                "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>",
                reply_markup=kb.create_template_kb
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Mistral AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤
            prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

–®–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{chr(10).join([f"- {p.name}: {p.food_items}" for p in presets])}

–î–∞–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
2. ‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
3. ‚ö†Ô∏è –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
4. üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
5. üéØ –ò–¥–µ–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤

–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
"""
            
            try:
                analysis = await generate_text_gigachat(prompt=prompt)
                
                text = "<b>üìã –í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã:</b>\n\n"
                for i, p in enumerate(presets, 1):
                    text += f"{i}. <b>{p.name}</b>\n   {p.food_items}\n\n"
                
                text += f"\nü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò-–¥–∏–µ—Ç–æ–ª–æ–≥–∞:</b>\n\n{analysis}"
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if len(text) > 4000:
                    parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
                    for i, part in enumerate(parts):
                        if i == 0:
                            await message.answer(part)
                        else:
                            await message.answer(f"<b>üìã –®–∞–±–ª–æ–Ω—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1}):</b>\n\n{part}")
                else:
                    await message.answer(text)
                    
            except Exception as e:
                # Fallback –±–µ–∑ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
                text = "<b>üìã –í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã:</b>\n\n"
                for i, p in enumerate(presets, 1):
                    text += f"{i}. <b>{p.name}</b>\n   {p.food_items}\n\n"
                text += "üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏!"
                await message.answer(text)

@router.callback_query(F.data == 'create_template')
async def create_template_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    await callback.answer()
    await callback.message.edit_text(
        "<b>üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π:</b>\n"
        "‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
        "‚Ä¢ –û–±–µ–¥ —Ñ–∏—Ç–Ω–µ—Å\n"
        "‚Ä¢ –ü–µ—Ä–µ–∫—É—Å –æ—Ñ–∏—Å–Ω—ã–π\n\n"
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>",
        reply_markup=kb.back_kb
    )
    await state.set_state(PresetFSM.name)
    await save_fsm_state(callback.from_user.id, 'PresetFSM:name')

@router.callback_query(F.data == 'create_template_from_addmeal')
async def create_template_from_addmeal_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥—ã"""
    await callback.answer()
    await callback.message.edit_text(
        "<b>üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π:</b>\n"
        "‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
        "‚Ä¢ –û–±–µ–¥ —Ñ–∏—Ç–Ω–µ—Å\n"
        "‚Ä¢ –ü–µ—Ä–µ–∫—É—Å –æ—Ñ–∏—Å–Ω—ã–π\n\n"
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>",
        reply_markup=kb.back_kb
    )
    await state.set_state(PresetFSM.name)
    await save_fsm_state(callback.from_user.id, 'PresetFSM:name')

# /dietolog
@router.message(Command('dietolog'))
@router.message(lambda message: message.text == '–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥')
async def dietolog_command(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–∏–µ—Ç–æ–ª–æ–≥–∞
    from components.payment_system.payment_operations import PaymentManager
    has_subscription = await PaymentManager.check_subscription(message.from_user.id, 'diet_consultant')
    
    if has_subscription:
        await message.answer(
            '<b>üë®‚Äç‚öïÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –¥–∏–µ—Ç–æ–ª–æ–≥—É!\n\n'
            '–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å:\n'
            '‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞\n'
            '‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n'
            '‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è\n'
            '‚Ä¢ –†–∞—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£\n'
            '‚Ä¢ –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é/–Ω–∞–±–æ—Ä—É –≤–µ—Å–∞\n'
            '‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n'
            '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –¥–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n'
            '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop</b>'
        )
        await state.set_state(Chat.active)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await message.answer(
            "üë®‚Äç‚öïÔ∏è <b>–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥</b>\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò-–¥–∏–µ—Ç–æ–ª–æ–≥–∞:\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–µ—Ç–µ\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π\n\n"
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 200‚ÇΩ –∑–∞ 7 –¥–Ω–µ–π\n\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /diet_consultant",
            parse_mode="HTML"
        )

# /menu
@router.message(Command('menu'))
@router.message(lambda message: message.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é')
async def menu_command(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ–Ω—é
    from components.payment_system.payment_operations import PaymentManager
    has_subscription = await PaymentManager.check_subscription(message.from_user.id, 'menu_generator')
    
    if not has_subscription:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await message.answer(
            "üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é</b>\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:\n"
            "‚Ä¢ –£—á–µ—Ç –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
            "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
            "‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n\n"
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 200‚ÇΩ –∑–∞ 7 –¥–Ω–µ–π\n\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /menu_generator",
            parse_mode="HTML"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        r = requests.get(f'{API_URL}/api/profile?tg_id={message.from_user.id}')
        if r.status_code == 200:
            profile = r.json().get('profile', {})
            if not profile:
                await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /profile")
                return
            
            user_data = {
                'name': profile.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                'age': profile.get('age', 25),
                'gender': profile.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                'weight': profile.get('weight', 70),
                'height': profile.get('height', 170),
                'activity_level': profile.get('activity_level', 2)
            }
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /profile")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
        if user_data['gender'].lower() == '–º—É–∂—Å–∫–æ–π':
            bmr = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age'] + 5
        else:
            bmr = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age'] - 161
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_coefficients = {1: 1.2, 2: 1.375, 3: 1.55, 4: 1.725, 5: 1.9}
        tdee = bmr * activity_coefficients.get(user_data['activity_level'], 1.375)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é GigaChat
        prompt = f"""
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:

–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
- –ò–º—è: {user_data['name']}
- –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç
- –ü–æ–ª: {user_data['gender']}
- –í–µ—Å: {user_data['weight']} –∫–≥
- –†–æ—Å—Ç: {user_data['height']} —Å–º
- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data['activity_level']}
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö: {tdee:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å

–°–æ–∑–¥–∞–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º:

1. üç≥ –ó–ê–í–¢–†–ê–ö (25% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã - {tdee*0.25:.0f} –∫–∫–∞–ª)
2. üçΩÔ∏è –û–ë–ï–î (35% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã - {tdee*0.35:.0f} –∫–∫–∞–ª)
3. üç¥ –£–ñ–ò–ù (25% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã - {tdee*0.25:.0f} –∫–∫–∞–ª)
4. üçé –ü–ï–†–ï–ö–£–°–´ (15% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã - {tdee*0.15:.0f} –∫–∫–∞–ª)

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∂–∏:
- –ù–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
- –¢–æ—á–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö
- –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
- –ë–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã

–ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –∏ –≤–∫—É—Å–Ω—ã–º
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –≤ –∫–∞–ª–æ—Ä–∏—è—Ö
- –í–∫–ª—é—á–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
"""
        
        waiting_msg = await message.answer("üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é...</b>")
        menu_response = await generate_text_gigachat(prompt=prompt)
        
        await waiting_msg.delete()
        await message.answer(
            f"üçΩÔ∏è <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è {user_data['name']}</b>\n\n{menu_response}", 
            reply_markup=kb.main_menu_kb
        )
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb.main_menu_kb)

# /recognize
@router.message(Command('recognize'))
@router.message(lambda message: message.text == '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ')
async def recognize_food_command(message: Message, state: FSMContext):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –µ–¥—ã –ø–æ —Ñ–æ—Ç–æ"""
    await state.clear()
    await clear_fsm_state(message.from_user.id)
    
    await message.answer(
        "<b>üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –µ–¥—ã –ø–æ —Ñ–æ—Ç–æ</b>\n\n"
        "üîÆ <i>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –≤ –≥—Ä—è–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!</i>\n\n"
        "–í –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–ñ–£\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–î–æ–±–∞–≤–∏—Ç—å –µ–¥—É¬ª</b> –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ üòä"
    )

@router.message(Command('score'))
@router.message(lambda message: message.text == '–ë–∞–ª–ª—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å')
async def score_command(message: Message, state: FSMContext):
    await state.clear()
    await clear_fsm_state(message.from_user.id)
    
    # –ë—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –ë—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        progress_text = f"<b>üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
        progress_text += f"‚≠ê –û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user.score or 0} (–∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ +1)\n"
        progress_text += f"üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤–µ–¥–µ—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫: {user.streak_days or 0}\n"
        progress_text += f"üíß –í–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è: {user.water_ml or 0} –º–ª\n"
        progress_text += f"üíé –ü—Ä–µ–º–∏—É–º: {'–∞–∫—Ç–∏–≤–µ–Ω' if check_premium(user.tg_id) else '–Ω–µ—Ç'}\n\n"
        progress_text += f"<i>‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è...</i>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
        sent_message = await message.answer(progress_text)
        
        # –¢–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        import requests
        try:
            # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            r = requests.get(f'{API_URL}/api/stats?user_id={message.from_user.id}', timeout=5)
            if r.status_code == 200:
                stats = r.json().get('stats', {})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                updated_text = f"<b>üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
                updated_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {stats.get('total_calories', 0):.0f} –∫–∫–∞–ª\n"
                updated_text += f"üçΩÔ∏è –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {stats.get('total_meals', 0)}\n"
                updated_text += f"üíß –í–æ–¥–∞: {user.water_ml or 0} –º–ª\n\n"
                updated_text += f"<b>üèÜ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                updated_text += f"‚≠ê –û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user.score or 0} (–∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ +1)\n"
                updated_text += f"üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤–µ–¥–µ—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫: {user.streak_days or 0}\n"
                updated_text += f"üíé –ü—Ä–µ–º–∏—É–º: {'–∞–∫—Ç–∏–≤–µ–Ω' if check_premium(user.tg_id) else '–Ω–µ—Ç'}\n\n"
                updated_text += f"<i>üí° –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç—Ä–∏–∫–µ 7+ –¥–Ω–µ–π!</i>"
                
                await sent_message.edit_text(updated_text)
            else:
                # –ï—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º "–∑–∞–≥—Ä—É–∂–∞–µ–º"
                final_text = f"<b>üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
                final_text += f"‚≠ê –û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user.score or 0} (–∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ +1)\n"
                final_text += f"üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤–µ–¥–µ—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫: {user.streak_days or 0}\n"
                final_text += f"üíß –í–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è: {user.water_ml or 0} –º–ª\n"
                final_text += f"üíé –ü—Ä–µ–º–∏—É–º: {'–∞–∫—Ç–∏–≤–µ–Ω' if check_premium(user.tg_id) else '–Ω–µ—Ç'}\n\n"
                final_text += f"<i>üí° –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∏–∫–∞!</i>"
                await sent_message.edit_text(final_text)
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º "–∑–∞–≥—Ä—É–∂–∞–µ–º"
            final_text = f"<b>üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
            final_text += f"‚≠ê –û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user.score or 0} (–∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ +1)\n"
            final_text += f"üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤–µ–¥–µ—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫: {user.streak_days or 0}\n"
            final_text += f"üíß –í–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è: {user.water_ml or 0} –º–ª\n"
            final_text += f"üíé –ü—Ä–µ–º–∏—É–º: {'–∞–∫—Ç–∏–≤–µ–Ω' if check_premium(user.tg_id) else '–Ω–µ—Ç'}\n\n"
            final_text += f"<i>üí° –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∏–∫–∞!</i>"
            await sent_message.edit_text(final_text)

@router.message(Command('statistics'))
@router.message(lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def statistics_command(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º"""
    await state.clear()
    await clear_fsm_state(message.from_user.id)
    
    # –ë—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await message.answer("<b>üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...</b>")
    
    import requests
    try:
        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        r = requests.get(f'{API_URL}/api/daily_stats?user_id={message.from_user.id}&days=7', timeout=8)
        if r.status_code == 200:
            data = r.json().get('daily_stats', [])
            
            if not data:
                await loading_msg.edit_text("<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ!</b>")
                return
            
            stats_text = "<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n\n"
            
            for day_stat in data[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                date = day_stat['date']
                calories = day_stat.get('total_calories', 0) or day_stat.get('calories', 0)
                meals = day_stat.get('total_meals', 0) or day_stat.get('meal_count', 0)
                
                stats_text += f"üìÖ <b>{date}</b>\n"
                stats_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} –∫–∫–∞–ª\n"
                stats_text += f"üçΩÔ∏è –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {meals}\n\n"
            
            if len(data) > 5:
                stats_text += f"<i>... –∏ –µ—â–µ {len(data) - 5} –¥–Ω–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏</i>\n\n"
            
            stats_text += f"<i>üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏</i>"
            
            await loading_msg.edit_text(stats_text)
        else:
            await loading_msg.edit_text("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
            
    except Exception as e:
        # –ë—ã—Å—Ç—Ä—ã–π fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
        error_text = "<b>‚ùå –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
        error_text += f"<i>–û—à–∏–±–∫–∞: {str(e)[:50]}...</i>\n\n"
        error_text += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        error_text += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        error_text += f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
        error_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /addmeal –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥—ã"
        await loading_msg.edit_text(error_text)

# Catch-all —Ö–µ–Ω–¥–ª–µ—Ä –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
@router.message()
async def other(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    
    if current_state:
        # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–±—Ä–æ—Å–∏—Ç—å
        await message.answer(
            "ü§î –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_state —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏.",
            reply_markup=kb.main_menu_kb
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.main_menu_kb
        )

@router.message(Command('reset_state'))
async def reset_state_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM"""
    await state.clear()
    await clear_fsm_state(message.from_user.id)
    await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.", reply_markup=kb.main_menu_kb)

@router.message(Command('help'))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

üçΩÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ /addmeal - –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É
‚Ä¢ /profile - –ü—Ä–æ—Ñ–∏–ª—å
‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
‚Ä¢ /presets - –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã
‚Ä¢ /water - –¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã
‚Ä¢ /mood - –¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è

üí° <b>–ï—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b>
‚Ä¢ /reset_state - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
‚Ä¢ /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥

üéØ <b>–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ /dietolog - –õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥
‚Ä¢ /menu - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ /score - –ë–∞–ª–ª—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ /statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üÜò <b>–ü–æ–º–æ—â—å:</b>
‚Ä¢ /help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
"""
    await message.answer(help_text, parse_mode='HTML', reply_markup=kb.main_menu_kb)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry
async def safe_api_request(method, url, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    import time
    max_retries = 3
    base_delay = 1
    
    for attempt in range(max_retries):
        try:
            if method == 'GET':
                response = requests.get(url, timeout=REQUEST_TIMEOUT, **kwargs)
            else:
                response = requests.post(url, timeout=REQUEST_TIMEOUT, **kwargs)
            
            if response.status_code == 200:
                return response
            elif response.status_code >= 500:  # –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if attempt < max_retries - 1:
                    await asyncio.sleep(base_delay * (2 ** attempt))
                    continue
            return response
        except (requests.exceptions.Timeout, requests.exceptions.ConnectionError) as e:
            if attempt < max_retries - 1:
                await asyncio.sleep(base_delay * (2 ** attempt))
                continue
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ—Ç–∫–∞–∑–µ
            class MockResponse:
                status_code = 500
                def json(self): return {}
            return MockResponse()
    
    class MockResponse:
        status_code = 500
        def json(self): return {}
    return MockResponse()

@router.message(lambda message: message.text == 'üí≥ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
async def my_subscriptions_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        from components.payment_system.payment_operations import PaymentManager
        diet_subscription = await PaymentManager.get_subscription_info(user_id, 'diet_consultant')
        menu_subscription = await PaymentManager.get_subscription_info(user_id, 'menu_generator')
        
        response = "üìã <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –¥–∏–µ—Ç–æ–ª–æ–≥–∞
        if diet_subscription and diet_subscription['is_active']:
            response += f"üë®‚Äç‚öïÔ∏è <b>–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥:</b> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
            response += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {diet_subscription['days_left']}\n"
            response += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {diet_subscription['end_date'].strftime('%d.%m.%Y')}\n\n"
        else:
            response += "üë®‚Äç‚öïÔ∏è <b>–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥:</b> ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"
            response += "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: /diet_consultant\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –º–µ–Ω—é
        if menu_subscription and menu_subscription['is_active']:
            response += f"üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é:</b> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
            response += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {menu_subscription['days_left']}\n"
            response += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {menu_subscription['end_date'].strftime('%d.%m.%Y')}\n\n"
        else:
            response += "üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é:</b> ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"
            response += "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: /menu_generator\n\n"
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö.")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: {e}")

@router.message(lambda message: message.text == 'üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def buy_subscription_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    await message.answer(
        "üõí <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        "üë®‚Äç‚öïÔ∏è <b>–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥</b> - 200‚ÇΩ/7 –¥–Ω–µ–π\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò-–¥–∏–µ—Ç–æ–ª–æ–≥–∞\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–µ—Ç–µ –∏ –∑–¥–æ—Ä–æ–≤—å—é\n\n"
        "üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é</b> - 200‚ÇΩ/7 –¥–Ω–µ–π\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥\n"
        "‚Ä¢ –£—á–µ—Ç –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
        "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n\n"
        "üí≥ <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/diet_consultant - –õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥\n"
        "/menu_generator - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é\n\n"
        "üìã <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        "/subscription",
        parse_mode="HTML"
    )
