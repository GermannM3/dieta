from aiogram import Router, F
from aiogram.types import Message, PreCheckoutQuery, LabeledPrice
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.init_database import async_session, User
from sqlalchemy import select
from .payment_operations import PaymentManager
import os

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PaymentStates(StatesGroup):
    waiting_for_payment = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
YOOKASSA_PAYMENT_TOKEN = os.getenv('YOOKASSA_PAYMENT_TOKEN', '381764678:TEST:132209')
SUBSCRIPTION_PRICE = int(os.getenv('SUBSCRIPTION_PRICE', '200'))

@router.message(Command("diet_consultant"))
async def diet_consultant_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ª–∏—á–Ω–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await PaymentManager.check_subscription(user_id, 'diet_consultant')
    
    if has_subscription:
        await message.answer(
            "üéØ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–∏—á–Ω–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥!"
        )
        await state.clear()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await message.answer(
            "üë®‚Äç‚öïÔ∏è <b>–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥</b>\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò-–¥–∏–µ—Ç–æ–ª–æ–≥–∞:\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–µ—Ç–µ\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π\n\n"
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 200‚ÇΩ –∑–∞ 7 –¥–Ω–µ–π\n\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode="HTML"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        try:
            payment_info = await PaymentManager.create_payment(user_id, 'diet_consultant')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
            await message.bot.send_invoice(
                chat_id=message.chat.id,
                title="–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥",
                description="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –Ω–∞ 7 –¥–Ω–µ–π",
                payload=payment_info['payment_id'],
                provider_token=YOOKASSA_PAYMENT_TOKEN,
                currency="RUB",
                prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π", amount=SUBSCRIPTION_PRICE * 100)]
            )
            
            await state.set_state(PaymentStates.waiting_for_payment)
            
        except Exception as e:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¥–∏–µ—Ç–æ–ª–æ–≥–∞: {e}")

@router.message(Command("menu_generator"))
async def menu_generator_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await PaymentManager.check_subscription(user_id, 'menu_generator')
    
    if has_subscription:
        await message.answer(
            "üçΩÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ–Ω—é!\n\n"
            "–Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–∞–º –Ω—É–∂–Ω–æ –º–µ–Ω—é, –∏ —è –µ–≥–æ —Å–æ–∑–¥–∞–º!"
        )
        await state.clear()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await message.answer(
            "üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é</b>\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:\n"
            "‚Ä¢ –£—á–µ—Ç –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
            "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
            "‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n\n"
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 200‚ÇΩ –∑–∞ 7 –¥–Ω–µ–π\n\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode="HTML"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        try:
            payment_info = await PaymentManager.create_payment(user_id, 'menu_generator')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
            await message.bot.send_invoice(
                chat_id=message.chat.id,
                title="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é",
                description="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π",
                payload=payment_info['payment_id'],
                provider_token=YOOKASSA_PAYMENT_TOKEN,
                currency="RUB",
                prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π", amount=SUBSCRIPTION_PRICE * 100)]
            )
            
            await state.set_state(PaymentStates.waiting_for_payment)
            
        except Exception as e:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –º–µ–Ω—é: {e}")

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = message.successful_payment.invoice_payload
    
    try:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        success = await PaymentManager.confirm_payment(payment_id)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            async with async_session() as session:
                subscription = await session.execute(
                    select(Subscription).where(Subscription.payment_id == payment_id)
                )
                subscription = subscription.scalar_one_or_none()
                
                if subscription:
                    subscription_type = subscription.subscription_type
                    
                    if subscription_type == 'diet_consultant':
                        await message.answer(
                            "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–∏—á–Ω–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
                            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥!\n\n"
                            "‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: " + subscription.end_date.strftime("%d.%m.%Y"),
                            parse_mode="HTML"
                        )
                    elif subscription_type == 'menu_generator':
                        await message.answer(
                            "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ–Ω—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                            "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥.\n\n"
                            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–∞–º –Ω—É–∂–Ω–æ –º–µ–Ω—é, –∏ —è –µ–≥–æ —Å–æ–∑–¥–∞–º!\n\n"
                            "‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: " + subscription.end_date.strftime("%d.%m.%Y"),
                            parse_mode="HTML"
                        )
                    
                    await state.clear()
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")

@router.message(Command("subscription"))
async def subscription_info_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        diet_subscription = await PaymentManager.get_subscription_info(user_id, 'diet_consultant')
        menu_subscription = await PaymentManager.get_subscription_info(user_id, 'menu_generator')
        
        response = "üìã <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –¥–∏–µ—Ç–æ–ª–æ–≥–∞
        if diet_subscription and diet_subscription['is_active']:
            response += f"üë®‚Äç‚öïÔ∏è <b>–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥:</b> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
            response += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {diet_subscription['days_left']}\n"
            response += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {diet_subscription['end_date'].strftime('%d.%m.%Y')}\n\n"
        else:
            response += "üë®‚Äç‚öïÔ∏è <b>–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥:</b> ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"
            response += "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: /diet_consultant\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –º–µ–Ω—é
        if menu_subscription and menu_subscription['is_active']:
            response += f"üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é:</b> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
            response += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {menu_subscription['days_left']}\n"
            response += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {menu_subscription['end_date'].strftime('%d.%m.%Y')}\n\n"
        else:
            response += "üçΩÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é:</b> ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"
            response += "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: /menu_generator\n\n"
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö.")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: {e}")