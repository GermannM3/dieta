#!/bin/bash

echo "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú API –ò –ë–î..."

echo "1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í API..."
docker-compose logs api | tail -20

echo ""
echo "2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î –í–ù–£–¢–†–ò API –ö–û–ù–¢–ï–ô–ù–ï–†–ê..."
docker exec dieta-api-1 python3 -c "
import asyncio
from database.init_database import async_session_maker
from sqlalchemy import text

async def test_db():
    print('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon –ë–î...')
    
    async with async_session_maker() as session:
        try:
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            result = await session.execute(text('SELECT 1 as test'))
            row = result.fetchone()
            print(f'‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {row.test}')
            
            # –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã users
            result = await session.execute(text('SELECT COUNT(*) as count FROM users'))
            row = result.fetchone()
            print(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {row.count}')
            
            # –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã meals
            result = await session.execute(text('SELECT COUNT(*) as count FROM meals'))
            row = result.fetchone()
            print(f'‚úÖ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –ë–î: {row.count}')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}')

asyncio.run(test_db())
"

echo ""
echo "3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê GIGACHAT API..."
docker exec dieta-api-1 python3 -c "
import asyncio
from api.ai_api.gigachat_api import gigachat

async def test_gigachat():
    print('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat API...')
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        print('üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞...')
        token = await gigachat.get_access_token()
        if token:
            print(f'‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...')
        else:
            print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω')
            return
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        print('üí¨ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...')
        response = await gigachat.simple_completion('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?')
        if response:
            print(f'‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...')
        else:
            print('‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ GigaChat: {e}')

asyncio.run(test_gigachat())
"

echo ""
echo "4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê NUTRITION API..."
docker exec dieta-api-1 python3 -c "
import asyncio
from api.ai_api.nutrition_api import NutritionAPI

async def test_nutrition():
    print('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nutrition API...')
    
    try:
        nutrition = NutritionAPI()
        
        # –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
        print('üçé –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —è–±–ª–æ–∫–∞...')
        result = await nutrition.get_nutrition_data('—è–±–ª–æ–∫–æ', 100)
        print(f'‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}')
        
        # –¢–µ—Å—Ç fallback –¥–∞–Ω–Ω—ã—Ö
        print('üçï –¢–µ—Å—Ç fallback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏—Ü—Ü—ã...')
        result = await nutrition.get_fallback_nutrition('–ø–∏—Ü—Ü–∞', 200)
        print(f'‚úÖ Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ Nutrition API: {e}')

asyncio.run(test_nutrition())
"

echo ""
echo "5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ê–î–ú–ò–ù–ê..."
docker exec dieta-api-1 python3 -c "
import asyncio
import bcrypt
from database.init_database import async_session_maker
from sqlalchemy import text

async def test_admin():
    print('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞...')
    
    async with async_session_maker() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
            result = await session.execute(
                text('SELECT id, email, is_admin, is_verified FROM users WHERE email = :email'),
                {'email': 'germannm@vk.com'}
            )
            user = result.fetchone()
            
            if user:
                print(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.email}')
                print(f'   ID: {user.id}')
                print(f'   –ê–¥–º–∏–Ω: {user.is_admin}')
                print(f'   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {user.is_verified}')
                
                # –¢–µ—Å—Ç –ø–∞—Ä–æ–ª—è
                test_password = 'Germ@nnM3'
                result = await session.execute(
                    text('SELECT password_hash FROM users WHERE email = :email'),
                    {'email': 'germannm@vk.com'}
                )
                password_row = result.fetchone()
                
                if password_row and password_row.password_hash:
                    if bcrypt.checkpw(test_password.encode('utf-8'), password_row.password_hash.encode('utf-8')):
                        print('‚úÖ –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π')
                    else:
                        print('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π')
                else:
                    print('‚ùå –•–µ—à –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
            else:
                print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
                
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}')

asyncio.run(test_admin())
"

echo ""
echo "6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê API –≠–ù–î–ü–û–ò–ù–¢–û–í..."
echo "üîç –¢–µ—Å—Ç /api/search_food..."
curl -X POST http://5.129.198.80/api/search_food \
  -H "Content-Type: application/json" \
  -d '{"query": "—è–±–ª–æ–∫–æ"}' \
  2>/dev/null | head -1

echo ""
echo "üîç –¢–µ—Å—Ç /api/auth/login..."
curl -X POST http://5.129.198.80/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email": "germannm@vk.com", "password": "Germ@nnM3"}' \
  2>/dev/null | head -1

echo ""
echo "7Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê..."
docker ps

echo ""
echo "‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!" 