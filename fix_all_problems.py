#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import subprocess
import os
import sys
import requests
import time

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def fix_nginx_config():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    nginx_config = """server {
    listen 80;
    listen 443 ssl;
    server_name —Ç–≤–æ–π-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Ä—Ñ tvoi-kalkulyator.ru www.—Ç–≤–æ–π-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Ä—Ñ www.tvoi-kalkulyator.ru;
    
    # SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ssl_certificate /etc/ssl/certs/ssl-cert.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ React Router
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
    location /api {
        proxy_pass http://api:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # –°–∂–∞—Ç–∏–µ
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/json;
    gzip_disable "MSIE [1-6]\\.";
}"""
    
    try:
        with open('nginx.conf', 'w', encoding='utf-8') as f:
            f.write(nginx_config)
        print("‚úÖ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è nginx: {e}")
        return False

def fix_docker_compose():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç Docker Compose —Ñ–∞–π–ª"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker Compose...")
    
    compose_content = """services:
  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: python improved_api_server.py
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    env_file:
      - .env
    environment:
      - API_BASE_URL=http://api:8000
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - api

  # React Frontend —Å Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:80"  # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç —Å 80 –Ω–∞ 3000 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    restart: unless-stopped
    depends_on:
      - api

  # Nginx –¥–ª—è –¥–æ–º–µ–Ω–æ–≤
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/ssl
    restart: unless-stopped
    depends_on:
      - frontend
      - api

volumes:
  logs_data:
    driver: local
"""
    
    try:
        with open('docker-compose.yml', 'w', encoding='utf-8') as f:
            f.write(compose_content)
        print("‚úÖ Docker Compose —Ñ–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker Compose: {e}")
        return False

def stop_all_containers():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    commands = [
        "docker-compose down",
        "docker stop $(docker ps -q) 2>/dev/null || true",
        "docker system prune -f"
    ]
    
    for cmd in commands:
        success, output, error = run_command(cmd)
        if success:
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
        else:
            print(f"‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {cmd}")

def rebuild_containers():
    """–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
    print("üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    commands = [
        "docker-compose build --no-cache",
        "docker-compose up -d"
    ]
    
    for cmd in commands:
        print(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}")
        success, output, error = run_command(cmd)
        if success:
            print(f"‚úÖ {cmd} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        else:
            print(f"‚ùå {cmd} - –æ—à–∏–±–∫–∞: {error}")
            return False
    
    return True

def wait_for_services():
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    for i in range(30):  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        try:
            response = requests.get("http://5.129.198.80:8000/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ API –∑–∞–ø—É—â–µ–Ω")
                break
        except:
            pass
        
        time.sleep(1)
        if i % 5 == 0:
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... {i+1}/30")

def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    success, output, error = run_command("docker-compose ps")
    if success:
        print("üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print(output)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
        if "Up" in output and "Exit" not in output:
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            return True
        else:
            print("‚ö†Ô∏è  –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {error}")
        return False

def test_domains():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–º–µ–Ω—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤...")
    
    domains = [
        "https://—Ç–≤–æ–π-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Ä—Ñ",
        "https://tvoi-kalkulyator.ru"
    ]
    
    all_working = True
    for domain in domains:
        try:
            response = requests.get(domain, timeout=10, verify=False)
            if response.status_code == 200:
                print(f"‚úÖ {domain} - —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è  {domain} - —Å—Ç–∞—Ç—É—Å {response.status_code}")
                all_working = False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {domain} - –æ—à–∏–±–∫–∞: {e}")
            all_working = False
    
    return all_working

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    print("=" * 60)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    fix_nginx_config()
    fix_docker_compose()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    stop_all_containers()
    
    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    if rebuild_containers():
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        wait_for_services()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if check_services():
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã
            if test_domains():
                print("\n" + "=" * 60)
                print("üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
                print("=" * 60)
                print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
                print("üåê API: http://5.129.198.80:8000")
                print("üì± Frontend: https://—Ç–≤–æ–π-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Ä—Ñ")
                print("üì± Frontend: https://tvoi-kalkulyator.ru")
                print("ü§ñ –ë–æ—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
                print("\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("\n‚ö†Ô∏è  –î–æ–º–µ–Ω—ã –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
                print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        else:
            print("\n‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ö–û–ù–¢–ï–ô–ù–ï–†–û–í!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")

if __name__ == "__main__":
    main() 