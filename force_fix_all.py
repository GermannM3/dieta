#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
"""

import os
import re
import subprocess
import sys

def fix_api_url_in_file(file_path, old_urls, new_url):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç API URL –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ URL –Ω–∞ –Ω–æ–≤—ã–π
        for old_url in old_urls:
            content = content.replace(old_url, new_url)
        
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω API URL –≤ {file_path}")
            return True
        else:
            print(f"‚ÑπÔ∏è  API URL –≤ {file_path} —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
        return False

def fix_docker_compose():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç Docker Compose —Ñ–∞–π–ª"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker Compose...")
    
    compose_content = """services:
  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: python improved_api_server.py
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    env_file:
      - .env
    environment:
      - API_BASE_URL=http://api:8000
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - api

  # React Frontend —Å Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:80"  # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç —Å 80 –Ω–∞ 3000 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    restart: unless-stopped
    depends_on:
      - api

volumes:
  logs_data:
    driver: local
"""
    
    try:
        with open('docker-compose.yml', 'w', encoding='utf-8') as f:
            f.write(compose_content)
        print("‚úÖ Docker Compose —Ñ–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker Compose: {e}")
        return False

def stop_all_containers():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    commands = [
        "docker-compose down",
        "docker stop $(docker ps -q) 2>/dev/null || true",
        "docker system prune -f"
    ]
    
    for cmd in commands:
        try:
            subprocess.run(cmd, shell=True, check=True)
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {cmd}")

def rebuild_containers():
    """–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
    print("üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    commands = [
        "docker-compose build --no-cache",
        "docker-compose up -d"
    ]
    
    for cmd in commands:
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {cmd}")
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {cmd}: {e}")
            return False
    
    return True

def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        result = subprocess.run("docker-compose ps", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
            print(result.stdout)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
            if "Up" in result.stdout and "Exit" not in result.stdout:
                print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
                return True
            else:
                print("‚ö†Ô∏è  –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º...")
    print("=" * 60)
    
    # –§–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API URL
    files_to_fix = [
        'components/handlers/user_handlers.py',
        'components/handlers/admin_handlers.py',
        'components/handlers/fat_tracker_handlers.py',
        'components/payment_system/payment_handlers.py',
        'components/payment_system/payment_operations.py'
    ]
    
    old_urls = [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
        '127.0.0.1:8000',
        'localhost:8000',
        'http://5.129.198.80:8000'  # –í–Ω–µ—à–Ω–∏–π URL —Ç–æ–∂–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
    ]
    
    new_url = 'http://api:8000'  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL –¥–ª—è Docker —Å–µ—Ç–∏
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º API URL –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
    fixed_count = 0
    for file_path in files_to_fix:
        if os.path.exists(file_path):
            if fix_api_url_in_file(file_path, old_urls, new_url):
                fixed_count += 1
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Docker Compose
    fix_docker_compose()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    stop_all_containers()
    
    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    if rebuild_containers():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        check_services()
        
        print("\n" + "=" * 60)
        print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!")
        print("=" * 60)
        print("üìã –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        print("‚úÖ API URL –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ http://api:8000")
        print("‚úÖ Docker Compose –∏—Å–ø—Ä–∞–≤–ª–µ–Ω (–ø–æ—Ä—Ç frontend –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 3000)")
        print("‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print("üåê API: http://localhost:8000")
        print("ü§ñ –ë–æ—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
        print("üì± Frontend: http://localhost:3000")
        print("\nüìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print("docker-compose logs")
        print("docker-compose ps")
        print("curl http://localhost:8000/health")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ö–û–ù–¢–ï–ô–ù–ï–†–û–í!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")

if __name__ == "__main__":
    main() 