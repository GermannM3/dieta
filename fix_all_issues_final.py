#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
"""

import asyncio
import sys
import os
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.init_database import async_session_maker
from database.crud import get_user_by_tg_id, get_user_by_email
from sqlalchemy import text

async def fix_all_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    print("üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú!")
    print("=" * 50)
    
    # 1. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\n1Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "mistralai"], check=True)
        print("‚úÖ Mistral AI –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    async with async_session_maker() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
            await session.execute(text("""
                CREATE TABLE IF NOT EXISTS premium_functions (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    description TEXT,
                    price INTEGER NOT NULL,
                    duration_days INTEGER NOT NULL,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
            functions = [
                {
                    "name": "personal_dietitian",
                    "description": "–õ–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è",
                    "price": 200,
                    "duration_days": 7
                },
                {
                    "name": "menu_generation", 
                    "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é",
                    "price": 200,
                    "duration_days": 7
                },
                {
                    "name": "photo_recognition",
                    "description": "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –µ–¥—ã –ø–æ —Ñ–æ—Ç–æ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    "price": 0,
                    "duration_days": 0
                }
            ]
            
            for func in functions:
                result = await session.execute(
                    text("SELECT id FROM premium_functions WHERE name = :name"),
                    {"name": func["name"]}
                )
                
                if not result.fetchone():
                    await session.execute(text("""
                        INSERT INTO premium_functions (name, description, price, duration_days)
                        VALUES (:name, :description, :price, :duration_days)
                    """), func)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func['name']} - {func['price']}‚ÇΩ")
            
            await session.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
            await session.rollback()
    
    # 3. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –¥–ª—è –∞–¥–º–∏–Ω–∞
    print("\n3Ô∏è‚É£ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞...")
    async with async_session_maker() as session:
        try:
            admin_tg_id = 389694638
            admin_email = "germannm@vk.com"
            
            # Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            tg_user = await get_user_by_tg_id(session, admin_tg_id)
            if tg_user:
                tg_user.is_premium = True
                print("‚úÖ –ü—Ä–µ–º–∏—É–º –¥–ª—è Telegram –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            # –í–µ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            web_user = await get_user_by_email(session, admin_email)
            if web_user:
                web_user.is_premium = True
                print("‚úÖ –ü—Ä–µ–º–∏—É–º –¥–ª—è –≤–µ–± –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            await session.commit()
            print("‚úÖ –ü—Ä–µ–º–∏—É–º –¥–ª—è –∞–¥–º–∏–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞: {e}")
            await session.rollback()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    package_json_path = "calorie-love-tracker/package.json"
    if os.path.exists(package_json_path):
        print("‚úÖ React –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç start
        with open(package_json_path, 'r') as f:
            content = f.read()
            if '"start":' in content:
                print("‚úÖ –°–∫—Ä–∏–ø—Ç start —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                print("‚ö†Ô∏è  –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç start –≤ package.json")
    else:
        print("‚ùå React –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\n‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
    print("\nüìã –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω Mistral AI –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")
    print("‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ (200‚ÇΩ –∑–∞ –Ω–µ–¥–µ–ª—é)")
    print("‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º –¥–ª—è –∞–¥–º–∏–Ω–∞")
    print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 0.1 –¥–ª—è –≤—Å–µ—Ö AI –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python start_all_services.py")

if __name__ == "__main__":
    asyncio.run(fix_all_issues()) 