#!/bin/bash

echo "üîí –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï SSL –ë–ï–ó –ù–ê–†–£–®–ï–ù–ò–Ø –†–ê–ë–û–¢–´..."

echo "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞..."
docker ps | grep nginx

echo "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
if [ -f "/etc/letsencrypt/live/5.129.198.80/fullchain.pem" ]; then
    echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"
    
    echo "3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ nginx –∫–æ–Ω—Ñ–∏–≥–∞ —Å SSL..."
    cat > nginx-ssl.conf << 'EOF'
server {
    listen 80;
    server_name 5.129.198.80;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name 5.129.198.80;

    ssl_certificate /etc/letsencrypt/live/5.129.198.80/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/5.129.198.80/privkey.pem;

    # API endpoints
    location /api/ {
        proxy_pass http://api:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Frontend
    location / {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}
EOF
else
    echo "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º HTTP –∫–æ–Ω—Ñ–∏–≥..."
    cat > nginx-ssl.conf << 'EOF'
server {
    listen 80;
    server_name 5.129.198.80;

    # API endpoints
    location /api/ {
        proxy_pass http://api:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Frontend
    location / {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}
EOF
fi

echo "4Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ nginx..."
docker-compose -f docker-compose.minimal.yml restart nginx

echo "5Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ nginx..."
sleep 10

echo "6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ nginx..."
docker ps | grep nginx

echo "7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP..."
curl -I http://5.129.198.80/api/docs 2>/dev/null | head -1

echo "8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPS (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)..."
if [ -f "/etc/letsencrypt/live/5.129.198.80/fullchain.pem" ]; then
    curl -I https://5.129.198.80/api/docs 2>/dev/null | head -1
else
    echo "‚ö†Ô∏è HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤)"
fi

echo "9Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞..."
docker exec dieta-api-1 python3 -c "
import asyncio
import bcrypt
from database.init_database import async_session_maker
from sqlalchemy import text

async def fix_admin():
    print('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ germannm@vk.com...')
    
    password = 'Germ@nnM3'
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)
    
    async with async_session_maker() as session:
        try:
            result = await session.execute(
                text('SELECT id, email, is_admin FROM users WHERE email = :email'),
                {'email': 'germannm@vk.com'}
            )
            user = result.fetchone()
            
            if user:
                print(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.email}')
                
                await session.execute(
                    text('UPDATE users SET password_hash = :password_hash, is_admin = true, is_verified = true WHERE email = :email'),
                    {'password_hash': hashed_password.decode('utf-8'), 'email': 'germannm@vk.com'}
                )
                print('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–Ω –∞–¥–º–∏–Ω–æ–º')
            else:
                print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...')
                
                await session.execute(
                    text('INSERT INTO users (email, password_hash, is_admin, is_verified, created_at) VALUES (:email, :password_hash, true, true, NOW())'),
                    {'email': 'germannm@vk.com', 'password_hash': hashed_password.decode('utf-8')}
                )
                print('‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω')
            
            await session.commit()
            print('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            await session.rollback()

asyncio.run(fix_admin())
"

echo "üîü –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
docker ps

echo "‚úÖ SSL –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù! –°–ê–ô–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!" 