import math
from typing import Optional, Dict, Any

class FatPercentageCalculator:
    """
    –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    @staticmethod
    def navy_method(waist_cm: float, hip_cm: float, neck_cm: Optional[float], 
                   height_cm: float, gender: str) -> float:
        """
        Navy Method (US Navy) - –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥
        
        Args:
            waist_cm: –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤ —Å–º
            hip_cm: –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –≤ —Å–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∂–µ–Ω—â–∏–Ω)
            neck_cm: –û–±—Ö–≤–∞—Ç —à–µ–∏ –≤ —Å–º
            height_cm: –†–æ—Å—Ç –≤ —Å–º
            gender: 'male' –∏–ª–∏ 'female'
            
        Returns:
            –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ
        """
        if gender.lower() == 'male':
            if neck_cm is None:
                raise ValueError("–î–ª—è –º—É–∂—á–∏–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ö–≤–∞—Ç —à–µ–∏")
            
            # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –º—É–∂—á–∏–Ω
            body_fat = (86.010 * math.log10(waist_cm - neck_cm) - 
                       70.041 * math.log10(height_cm) + 36.76)
        else:
            # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω
            if neck_cm is None:
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –±–µ–∑ —à–µ–∏
                body_fat = (163.205 * math.log10(waist_cm + hip_cm) - 
                           97.684 * math.log10(height_cm) - 78.387)
            else:
                body_fat = (163.205 * math.log10(waist_cm + hip_cm - neck_cm) - 
                           97.684 * math.log10(height_cm) - 78.387)
        
        return max(0, min(50, round(body_fat, 1)))
    
    @staticmethod
    def simplified_waist_hip_ratio(waist_cm: float, hip_cm: float, 
                                  gender: str, age: Optional[int] = None) -> float:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ç–∞–ª–∏—è/–±–µ–¥—Ä–∞
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Ç–µ –∏ —à–µ–µ
        
        Args:
            waist_cm: –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤ —Å–º
            hip_cm: –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –≤ —Å–º
            gender: 'male' –∏–ª–∏ 'female'
            age: –í–æ–∑—Ä–∞—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)
            
        Returns:
            –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
        """
        ratio = waist_cm / hip_cm
        
        if gender.lower() == 'male':
            # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –º—É–∂—á–∏–Ω
            if ratio < 0.85:
                base_fat = 10
            elif ratio < 0.90:
                base_fat = 15
            elif ratio < 0.95:
                base_fat = 20
            elif ratio < 1.00:
                base_fat = 25
            else:
                base_fat = 30
        else:
            # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω
            if ratio < 0.75:
                base_fat = 15
            elif ratio < 0.80:
                base_fat = 20
            elif ratio < 0.85:
                base_fat = 25
            elif ratio < 0.90:
                base_fat = 30
            else:
                base_fat = 35
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        if age:
            if age > 40:
                base_fat += (age - 40) * 0.2
            elif age < 25:
                base_fat -= (25 - age) * 0.1
        
        return max(5, min(45, round(base_fat, 1)))
    
    @staticmethod
    def get_fat_category(fat_percent: float, gender: str, age: Optional[int] = None) -> Dict[str, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞
        
        Args:
            fat_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
            gender: 'male' –∏–ª–∏ 'female'
            age: –í–æ–∑—Ä–∞—Å—Ç
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        """
        if gender.lower() == 'male':
            if fat_percent < 6:
                return {"category": "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π", "description": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", "emoji": "‚ö†Ô∏è"}
            elif fat_percent < 13:
                return {"category": "–ê—Ç–ª–µ—Ç–∏—á–µ—Å–∫–∏–π", "description": "–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞", "emoji": "üí™"}
            elif fat_percent < 17:
                return {"category": "–•–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞", "description": "–ó–¥–æ—Ä–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "emoji": "‚úÖ"}
            elif fat_percent < 25:
                return {"category": "–ù–æ—Ä–º–∞", "description": "–ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å", "emoji": "üëç"}
            else:
                return {"category": "–ò–∑–±—ã—Ç–æ–∫", "description": "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è", "emoji": "‚ö°"}
        else:
            if fat_percent < 16:
                return {"category": "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π", "description": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", "emoji": "‚ö†Ô∏è"}
            elif fat_percent < 20:
                return {"category": "–ê—Ç–ª–µ—Ç–∏—á–µ—Å–∫–∏–π", "description": "–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞", "emoji": "üí™"}
            elif fat_percent < 25:
                return {"category": "–•–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞", "description": "–ó–¥–æ—Ä–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "emoji": "‚úÖ"}
            elif fat_percent < 32:
                return {"category": "–ù–æ—Ä–º–∞", "description": "–ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å", "emoji": "üëç"}
            else:
                return {"category": "–ò–∑–±—ã—Ç–æ–∫", "description": "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è", "emoji": "‚ö°"}
    
    @staticmethod
    def calculate_fat_percentage(waist_cm: float, hip_cm: float, 
                               height_cm: Optional[float] = None,
                               neck_cm: Optional[float] = None,
                               gender: str = 'female',
                               age: Optional[int] = None) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥
        
        Args:
            waist_cm: –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤ —Å–º
            hip_cm: –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –≤ —Å–º
            height_cm: –†–æ—Å—Ç –≤ —Å–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            neck_cm: –û–±—Ö–≤–∞—Ç —à–µ–∏ –≤ —Å–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            gender: 'male' –∏–ª–∏ 'female'
            age: –í–æ–∑—Ä–∞—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞
        """
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Navy Method
            if height_cm and (neck_cm or gender.lower() == 'female'):
                fat_percent = FatPercentageCalculator.navy_method(
                    waist_cm, hip_cm, neck_cm, height_cm, gender
                )
                method = "Navy Method"
                accuracy = "–í—ã—Å–æ–∫–∞—è"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                fat_percent = FatPercentageCalculator.simplified_waist_hip_ratio(
                    waist_cm, hip_cm, gender, age
                )
                method = "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–∞–ª–∏—è/–±–µ–¥—Ä–∞"
                accuracy = "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_info = FatPercentageCalculator.get_fat_category(fat_percent, gender, age)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–∞–ª–∏—è/–±–µ–¥—Ä–∞
            waist_hip_ratio = round(waist_cm / hip_cm, 3)
            
            return {
                "fat_percent": fat_percent,
                "method": method,
                "accuracy": accuracy,
                "category": category_info["category"],
                "description": category_info["description"],
                "emoji": category_info["emoji"],
                "waist_hip_ratio": waist_hip_ratio,
                "measurements": {
                    "waist_cm": waist_cm,
                    "hip_cm": hip_cm,
                    "neck_cm": neck_cm,
                    "height_cm": height_cm
                }
            }
            
        except Exception as e:
            return {
                "error": f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}",
                "fat_percent": 0
            }
    
    @staticmethod
    def get_healthy_range(gender: str, age: Optional[int] = None) -> Dict[str, float]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞
        
        Args:
            gender: 'male' –∏–ª–∏ 'female'
            age: –í–æ–∑—Ä–∞—Å—Ç
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–¥–æ—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
        """
        if gender.lower() == 'male':
            if age and age > 40:
                return {"min": 13, "max": 22, "optimal": 17}
            else:
                return {"min": 10, "max": 20, "optimal": 15}
        else:
            if age and age > 40:
                return {"min": 18, "max": 28, "optimal": 23}
            else:
                return {"min": 16, "max": 25, "optimal": 20} 