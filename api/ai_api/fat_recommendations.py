import os
import asyncio
from typing import Dict, Any, Optional
from api.ai_api.generate_text import answer_to_text_prompt

async def generate_fat_recommendations(
    fat_percent: float,
    goal_fat_percent: Optional[float],
    gender: str,
    age: Optional[int],
    height_cm: Optional[float],
    weight_kg: Optional[float],
    activity_level: Optional[int],
    waist_cm: float,
    hip_cm: float,
    measurement_history: Optional[list] = None
) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å–µ —á–µ—Ä–µ–∑ Mistral AI
    
    Args:
        fat_percent: –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
        goal_fat_percent: –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
        gender: –ü–æ–ª ('male' –∏–ª–∏ 'female')
        age: –í–æ–∑—Ä–∞—Å—Ç
        height_cm: –†–æ—Å—Ç –≤ —Å–º
        weight_kg: –í–µ—Å –≤ –∫–≥
        activity_level: –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1-5)
        waist_cm: –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏
        hip_cm: –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä
        measurement_history: –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º
    """
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–∏—Ä–∞
        if gender.lower() == 'male':
            if fat_percent < 6:
                category = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π"
            elif fat_percent < 13:
                category = "–∞—Ç–ª–µ—Ç–∏—á–µ—Å–∫–∏–π"
            elif fat_percent < 17:
                category = "—Ö–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞"
            elif fat_percent < 25:
                category = "–Ω–æ—Ä–º–∞"
            else:
                category = "–∏–∑–±—ã—Ç–æ–∫"
        else:
            if fat_percent < 16:
                category = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π"
            elif fat_percent < 20:
                category = "–∞—Ç–ª–µ—Ç–∏—á–µ—Å–∫–∏–π"
            elif fat_percent < 25:
                category = "—Ö–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞"
            elif fat_percent < 32:
                category = "–Ω–æ—Ä–º–∞"
            else:
                category = "–∏–∑–±—ã—Ç–æ–∫"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_info = ""
        if measurement_history and len(measurement_history) > 1:
            recent_change = fat_percent - measurement_history[-2]['fat_percent']
            if recent_change > 0:
                progress_info = f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {recent_change:.1f}%. "
            elif recent_change < 0:
                progress_info = f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ {abs(recent_change):.1f}%. "
            else:
                progress_info = "–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º. "
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Mistral
        gender_ru = "–º—É–∂—á–∏–Ω–∞" if gender.lower() == 'male' else "–∂–µ–Ω—â–∏–Ω–∞"
        
        prompt = f"""–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥-—ç–∫—Å–ø–µ—Ä—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å–µ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ü–æ–ª: {gender_ru}
- –í–æ–∑—Ä–∞—Å—Ç: {age if age else '–Ω–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç
- –†–æ—Å—Ç: {height_cm if height_cm else '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º
- –í–µ—Å: {weight_kg if weight_kg else '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_level if activity_level else '–Ω–µ —É–∫–∞–∑–∞–Ω'}/5
- –¢–µ–∫—É—â–∏–π % –∂–∏—Ä–∞: {fat_percent}% (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})
- –¶–µ–ª—å: {goal_fat_percent if goal_fat_percent else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}%
- –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏: {waist_cm} —Å–º
- –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä: {hip_cm} —Å–º
- –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–∞–ª–∏—è/–±–µ–¥—Ä–∞: {round(waist_cm/hip_cm, 3)}
{progress_info}

–ó–ê–î–ê–ß–ê:
–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ 3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û—Ç–≤–µ—Ç –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
- –£—á–∏—Ç—ã–≤–∞–π –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ü–µ–ª–∏
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–æ–Ω
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏
"""

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Mistral
        response_text = await answer_to_text_prompt(prompt, 0)
        response = {"text": response_text}
        
        if not response or 'error' in response:
            # Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            fallback_recommendations = _get_fallback_recommendations(
                fat_percent, goal_fat_percent, gender, category
            )
            return {
                "recommendations": fallback_recommendations,
                "analysis": f"–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ {fat_percent}% –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.",
                "source": "system_fallback",
                "category": category
            }
        
        return {
            "recommendations": response['text'],
            "analysis": f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {fat_percent}% –∂–∏—Ä–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}'.",
            "source": "mistral_ai",
            "category": category,
            "tokens_used": response.get('tokens_used', 0)
        }
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        fallback = _get_fallback_recommendations(fat_percent, goal_fat_percent, gender, category)
        return {
            "recommendations": fallback,
            "analysis": f"–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ {fat_percent}% (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})",
            "source": "system_fallback",
            "error": str(e)
        }

def _get_fallback_recommendations(fat_percent: float, goal_fat_percent: Optional[float], 
                                 gender: str, category: str) -> str:
    """–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –ò–ò"""
    
    if category == "–∏–∑–±—ã—Ç–æ–∫":
        return (
            "üî• –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 300-500 –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            "üí™ –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
            "üèÉ‚Äç‚ôÄÔ∏è –ö–∞—Ä–¥–∏–æ 150 –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é\n" 
            "ü•ó –ë–æ–ª—å—à–µ –±–µ–ª–∫–∞ (1.6-2–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞)"
        )
    elif category == "–∞—Ç–ª–µ—Ç–∏—á–µ—Å–∫–∏–π" or category == "—Ö–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞":
        return (
            "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ñ–æ—Ä–º—É\n"
            "üí™ –°–∏–ª–æ–≤—ã–µ + –∫–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
            "üçé –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
            "üò¥ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω 7-9 —á–∞—Å–æ–≤"
        )
    elif category == "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π":
        return (
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π % –∂–∏—Ä–∞ –æ–ø–∞—Å–µ–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è\n"
            "üçΩÔ∏è –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è\n"
            "üí™ –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã\n"
            "üë®‚Äç‚öïÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É"
        )
    else:  # –Ω–æ—Ä–º–∞
        if goal_fat_percent and goal_fat_percent < fat_percent:
            return (
                "üéØ –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏:\n"
                "üî• –õ–µ–≥–∫–∏–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 200-300 –∫–∫–∞–ª\n"
                "üí™ –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
                "üèÉ‚Äç‚ôÄÔ∏è –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –∫–∞—Ä–¥–∏–æ"
            )
        else:
            return (
                "üëç –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–∞! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ:\n"
                "üçé –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
                "üí™ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
                "üìä –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
            )

async def generate_quick_tip(fat_percent: float, gender: str) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
    
    try:
        prompt = f"""–î–∞–π –æ–¥–∏–Ω –∫—Ä–∞—Ç–∫–∏–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Å–æ–≤–µ—Ç –¥–ª—è {'–º—É–∂—á–∏–Ω—ã' if gender.lower() == 'male' else '–∂–µ–Ω—â–∏–Ω—ã'} —Å {fat_percent}% –∂–∏—Ä–∞. 
        
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 
- –î–æ 80 —Å–∏–º–≤–æ–ª–æ–≤
- –° —ç–º–æ–¥–∑–∏
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π"""
        
        response_text = await answer_to_text_prompt(prompt, 0)
        response = {"text": response_text}
        
        if response and 'text' in response:
            return response['text']
        else:
            return "üí™ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!"
            
    except:
        return "üéØ –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!"

async def analyze_fat_progress(measurements_history: list) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
    
    if len(measurements_history) < 2:
        return {"status": "insufficient_data"}
    
    try:
        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        latest = measurements_history[0]
        previous = measurements_history[1] if len(measurements_history) > 1 else None
        oldest = measurements_history[-1] if len(measurements_history) > 2 else previous
        
        analysis = {
            "total_measurements": len(measurements_history),
            "latest_fat_percent": latest['fat_percent'],
            "measurement_span_days": (latest['date'] - oldest['date']).days if oldest else 0
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∏–∑–º–µ—Ä–µ–Ω–∏—è)
        if previous:
            short_change = latest['fat_percent'] - previous['fat_percent']
            analysis['short_term_change'] = short_change
            analysis['short_term_trend'] = (
                "—É–ª—É—á—à–µ–Ω–∏–µ" if short_change < -0.5 else
                "—É—Ö—É–¥—à–µ–Ω–∏–µ" if short_change > 0.5 else
                "—Å—Ç–∞–±–∏–ª—å–Ω–æ"
            )
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if oldest and oldest != previous:
            long_change = latest['fat_percent'] - oldest['fat_percent']
            analysis['long_term_change'] = long_change
            analysis['long_term_trend'] = (
                "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ" if long_change < -2 else
                "—É–ª—É—á—à–µ–Ω–∏–µ" if long_change < -0.5 else
                "—É—Ö—É–¥—à–µ–Ω–∏–µ" if long_change > 0.5 else
                "—Å—Ç–∞–±–∏–ª—å–Ω–æ"
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if analysis.get('short_term_trend') == '—É–ª—É—á—à–µ–Ω–∏–µ':
            analysis['motivation'] = "üéâ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        elif analysis.get('short_term_trend') == '—É—Ö—É–¥—à–µ–Ω–∏–µ':
            analysis['motivation'] = "üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        else:
            analysis['motivation'] = "üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - —ç—Ç–æ —Ç–æ–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        
        return analysis
        
    except Exception as e:
        return {"status": "error", "error": str(e)} 