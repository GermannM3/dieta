#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import bcrypt
from sqlalchemy import select
from database.init_database import async_session
from database.models import WebUser

async def reset_admin_password():
    """–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üîß –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    # –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_email = "germannm@vk.com"
    new_password = "admin123"  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    async with async_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(WebUser).where(WebUser.email == admin_email)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {admin_email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        password_hash = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        user.password_hash = password_hash
        user.is_confirmed = True  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
        
        await session.commit()
        
        print(f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è {admin_email} –æ–±–Ω–æ–≤–ª–µ–Ω")
        print(f"üìß Email: {admin_email}")
        print(f"üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {new_password}")
        print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞!")

if __name__ == "__main__":
    asyncio.run(reset_admin_password()) 