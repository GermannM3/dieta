#!/usr/bin/env python3
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import subprocess
import time
import signal
import psutil

def run_command(cmd, description=""):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.stdout:
            print(f"‚úÖ {result.stdout}")
        if result.stderr:
            print(f"‚ö†Ô∏è {result.stderr}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def kill_all_processes():
    """–£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python –∏ npm"""
    print("üî• –£–±–∏–≤–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å—ã
    run_command("sudo systemctl stop api frontend nginx bot", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    run_command("sudo pkill -f 'python.*main.py'", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã main.py")
    run_command("sudo pkill -f 'python.*main'", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã main")
    run_command("sudo pkill -f 'python.*improved_api_server'", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã API")
    run_command("sudo pkill -f 'python.*start_all_services'", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã start_all_services")
    
    # –£–±–∏—Ç—å npm –ø—Ä–æ—Ü–µ—Å—Å—ã
    run_command("sudo pkill -f 'npm'", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã npm")
    run_command("sudo pkill -f 'vite'", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã vite")
    run_command("sudo pkill -f 'node'", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã node")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç—ã
    run_command("sudo lsof -ti :8000 | xargs sudo kill -9 2>/dev/null || true", "–û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 8000")
    run_command("sudo lsof -ti :80 | xargs sudo kill -9 2>/dev/null || true", "–û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 80")
    run_command("sudo lsof -ti :5173 | xargs sudo kill -9 2>/dev/null || true", "–û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 5173")
    
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —É–±–∏—Ç—ã
    result = subprocess.run("ps aux | grep -E '(python|npm)' | grep -v grep", shell=True, capture_output=True, text=True)
    if result.stdout.strip():
        print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ—Ü–µ—Å—Å—ã: {result.stdout}")
        return False
    else:
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã")
        return True

def create_systemd_services():
    """–°–æ–∑–¥–∞—Ç—å systemd —Å–µ—Ä–≤–∏—Å—ã"""
    print("üìù –°–æ–∑–¥–∞—é systemd —Å–µ—Ä–≤–∏—Å—ã...")
    
    # –°–æ–∑–¥–∞—Ç—å bot.service
    bot_service = """[Unit]
Description=Dieta Telegram Bot
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/dieta
ExecStart=/opt/dieta/venv/bin/python main.py
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
"""
    
    with open("/tmp/bot.service", "w") as f:
        f.write(bot_service)
    
    run_command("sudo cp /tmp/bot.service /etc/systemd/system/", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ bot.service")
    
    # –°–æ–∑–¥–∞—Ç—å api.service –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists("/etc/systemd/system/api.service"):
        api_service = """[Unit]
Description=Dieta API
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/dieta
ExecStart=/opt/dieta/venv/bin/python -m uvicorn improved_api_server:app --host 0.0.0.0 --port 8000
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
"""
        
        with open("/tmp/api.service", "w") as f:
            f.write(api_service)
        
        run_command("sudo cp /tmp/api.service /etc/systemd/system/", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ api.service")
    
    # –°–æ–∑–¥–∞—Ç—å frontend.service –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists("/etc/systemd/system/frontend.service"):
        frontend_service = """[Unit]
Description=Dieta Frontend
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/dieta/calorie-love-tracker
ExecStart=/usr/bin/npm start
Environment=PORT=5173
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
"""
        
        with open("/tmp/frontend.service", "w") as f:
            f.write(frontend_service)
        
        run_command("sudo cp /tmp/frontend.service /etc/systemd/system/", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ frontend.service")

def start_services():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å—ã...")
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å systemd
    run_command("sudo systemctl daemon-reload", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    run_command("sudo systemctl enable --now api", "–ó–∞–ø—É—Å–∫ API")
    time.sleep(2)
    
    run_command("sudo systemctl enable --now frontend", "–ó–∞–ø—É—Å–∫ Frontend")
    time.sleep(2)
    
    run_command("sudo systemctl enable --now nginx", "–ó–∞–ø—É—Å–∫ Nginx")
    time.sleep(2)
    
    run_command("sudo systemctl enable --now bot", "–ó–∞–ø—É—Å–∫ Bot")
    time.sleep(3)

def check_services():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    services = ["api", "frontend", "nginx", "bot"]
    for service in services:
        result = subprocess.run(f"sudo systemctl is-active {service}", shell=True, capture_output=True, text=True)
        status = result.stdout.strip()
        if status == "active":
            print(f"‚úÖ {service}: {status}")
        else:
            print(f"‚ùå {service}: {status}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    result = subprocess.run("ps aux | grep 'main.py' | grep -v grep", shell=True, capture_output=True, text=True)
    if result.stdout.strip():
        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞: {result.stdout}")
    else:
        print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Ä—Ç—ã...")
    ports = [8000, 5173, 80]
    for port in ports:
        result = subprocess.run(f"netstat -tlnp | grep :{port}", shell=True, capture_output=True, text=True)
        if result.stdout.strip():
            print(f"‚úÖ –ü–æ—Ä—Ç {port}: {result.stdout.strip()}")
        else:
            print(f"‚ùå –ü–æ—Ä—Ç {port}: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

def test_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoints"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é endpoints...")
    
    # –¢–µ—Å—Ç API
    result = subprocess.run("curl -s http://localhost:8000/api/health", shell=True, capture_output=True, text=True)
    if result.stdout and "healthy" in result.stdout:
        print("‚úÖ API /api/health —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå API /api/health –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    
    # –¢–µ—Å—Ç Frontend
    result = subprocess.run("curl -s -I http://localhost:5173", shell=True, capture_output=True, text=True)
    if "200 OK" in result.stdout:
        print("‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    
    # –¢–µ—Å—Ç Nginx
    result = subprocess.run("curl -s -I http://localhost", shell=True, capture_output=True, text=True)
    if "200 OK" in result.stdout:
        print("‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå Nginx –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists("main.py"):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /opt/dieta")
        return
    
    # 1. –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    if not kill_all_processes():
        print("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—ã–ª–∏ —É–±–∏—Ç—ã")
    
    # 2. –°–æ–∑–¥–∞—Ç—å systemd —Å–µ—Ä–≤–∏—Å—ã
    create_systemd_services()
    
    # 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    start_services()
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    check_services()
    
    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoints
    test_endpoints()
    
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ë–û–¢–ê:")
    print("1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    print("\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:")
    print("sudo journalctl -u bot -f")
    print("sudo journalctl -u api -f")
    print("sudo journalctl -u frontend -f")

if __name__ == "__main__":
    main() 