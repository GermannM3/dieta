#!/usr/bin/env python3
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import subprocess
import time
import signal
import psutil
import logging

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def run_command(cmd, description=""):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    logging.info(f"üîÑ {description}")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=False)
        if result.stdout:
            logging.info(f"‚úÖ {result.stdout.strip()}")
        if result.stderr:
            logging.warning(f"‚ö†Ô∏è {result.stderr.strip()}")
        return result.returncode == 0
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{cmd}': {e}")
        return False

def kill_process_on_port(port):
    """–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É"""
    try:
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                connections = proc.connections()
                for conn in connections:
                    if hasattr(conn, 'laddr') and conn.laddr.port == port:
                        logging.info(f"–£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å {proc.info['name']} (PID: {proc.info['pid']}) –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                        proc.terminate()
                        proc.wait(timeout=5)
                        return True
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
    return False

def kill_all_processes():
    """–£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python, npm, node –∏ nginx"""
    logging.info("üî• –£–±–∏–≤–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")

    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å—ã
    run_command("sudo systemctl stop api frontend nginx bot", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤")

    # –£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    run_command("sudo pkill -f \"python.*main.py\"", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã main.py")
    run_command("sudo pkill -f \"python.*main\"", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã main")
    run_command("sudo pkill -f \"python.*improved_api_server\"", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã API")
    run_command("sudo pkill -f \"python.*start_all_services\"", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã start_all_services")

    # –£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Node/NPM
    run_command("sudo pkill -f \"npm\"", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã npm")
    run_command("sudo pkill -f \"vite\"", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã vite")
    run_command("sudo pkill -f \"node\"", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã node")

    # –£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Nginx
    run_command("sudo pkill -f \"nginx\"", "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã nginx")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç—ã
    run_command("sudo lsof -ti :8000 | xargs sudo kill -9 2>/dev/null || true", "–û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 8000")
    run_command("sudo lsof -ti :80 | xargs sudo kill -9 2>/dev/null || true", "–û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 80")
    run_command("sudo lsof -ti :5173 | xargs sudo kill -9 2>/dev/null || true", "–û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 5173")

    time.sleep(2) # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
    remaining_procs = subprocess.run("ps aux | grep -E \"(python|npm|node|nginx)\" | grep -v grep", shell=True, capture_output=True, text=True).stdout.strip()
    if remaining_procs:
        logging.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ—Ü–µ—Å—Å—ã: {remaining_procs}")
        return False
    else:
        logging.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ —É–±–∏—Ç—ã.")
        return True

def create_systemd_services():
    """–°–æ–∑–¥–∞—Ç—å systemd unit —Ñ–∞–π–ª—ã –¥–ª—è –±–æ—Ç–∞ –∏ API"""
    logging.info("üìù –°–æ–∑–¥–∞—é systemd —Å–µ—Ä–≤–∏—Å—ã...")

    bot_service_content = """[Unit]
Description=Dieta Telegram Bot
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/dieta
ExecStart=/opt/dieta/venv/bin/python main.py
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
"""
    api_service_content = """[Unit]
Description=Dieta API
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/dieta
ExecStart=/opt/dieta/venv/bin/python -m uvicorn improved_api_server:app --host 0.0.0.0 --port 8000
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
"""
    frontend_service_content = """[Unit]
Description=Dieta Frontend
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/dieta/calorie-love-tracker
ExecStart=/usr/bin/npm start
Environment=PORT=5173
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
"""
    nginx_config_content = """server {
    listen 80;
    server_name tvoi-kalkulyator.ru;

    location / {
        proxy_pass http://127.0.0.1:5173;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/ {
        proxy_pass http://127.0.0.1:8000/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
"""

    run_command(f"echo \"{bot_service_content}\" | sudo tee /etc/systemd/system/bot.service > /dev/null", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ bot.service")
    run_command(f"echo \"{api_service_content}\" | sudo tee /etc/systemd/system/api.service > /dev/null", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ api.service")
    run_command(f"echo \"{frontend_service_content}\" | sudo tee /etc/systemd/system/frontend.service > /dev/null", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ frontend.service")
    run_command(f"echo \"{nginx_config_content}\" | sudo tee /etc/nginx/sites-enabled/tvoi-kalkulyator > /dev/null", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥–∞")

    # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ Nginx, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    run_command("sudo rm -f /etc/nginx/sites-enabled/default", "–£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ Nginx")

def start_services():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å—ã"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å—ã...")
    run_command("sudo systemctl daemon-reload", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd")
    run_command("sudo systemctl enable --now api", "–ó–∞–ø—É—Å–∫ API")
    run_command("sudo systemctl enable --now frontend", "–ó–∞–ø—É—Å–∫ Frontend")
    run_command("sudo systemctl enable --now nginx", "–ó–∞–ø—É—Å–∫ Nginx")
    run_command("sudo systemctl enable --now bot", "–ó–∞–ø—É—Å–∫ Bot")
    time.sleep(5) # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è

def check_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...")
    api_status = subprocess.run("sudo systemctl is-active api", shell=True, capture_output=True, text=True).stdout.strip()
    frontend_status = subprocess.run("sudo systemctl is-active frontend", shell=True, capture_output=True, text=True).stdout.strip()
    nginx_status = subprocess.run("sudo systemctl is-active nginx", shell=True, capture_output=True, text=True).stdout.strip()
    bot_status = subprocess.run("sudo systemctl is-active bot", shell=True, capture_output=True, text=True).stdout.strip()

    logging.info(f"‚úÖ api: {api_status}")
    logging.info(f"‚úÖ frontend: {frontend_status}")
    logging.info(f"‚úÖ nginx: {nginx_status}")
    logging.info(f"‚úÖ bot: {bot_status}")

    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    bot_procs = subprocess.run("ps aux | grep 'main.py' | grep -v grep", shell=True, capture_output=True, text=True).stdout.strip()
    if bot_procs:
        logging.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞: {bot_procs}")
    else:
        logging.warning("‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Ä—Ç—ã...")
    port_8000 = subprocess.run("netstat -tlnp | grep 8000", shell=True, capture_output=True, text=True).stdout.strip()
    port_5173 = subprocess.run("netstat -tlnp | grep 5173", shell=True, capture_output=True, text=True).stdout.strip()
    port_80 = subprocess.run("netstat -tlnp | grep 80 ", shell=True, capture_output=True, text=True).stdout.strip()

    if port_8000:
        logging.info(f"‚úÖ –ü–æ—Ä—Ç 8000: {port_8000}")
    else:
        logging.warning("‚ùå –ü–æ—Ä—Ç 8000: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    if port_5173:
        logging.info(f"‚úÖ –ü–æ—Ä—Ç 5173: {port_5173}")
    else:
        logging.warning("‚ùå –ü–æ—Ä—Ç 5173: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    if port_80:
        logging.info(f"‚úÖ –ü–æ—Ä—Ç 80: {port_80}")
    else:
        logging.warning("‚ùå –ü–æ—Ä—Ç 80: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

    logging.info("üß™ –¢–µ—Å—Ç–∏—Ä—É—é endpoints...")
    api_health_check = run_command("curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:8000/api/health", "API /api/health")
    frontend_check = run_command("curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:5173", "Frontend")
    nginx_check = run_command("curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:80", "Nginx")

    if api_health_check:
        logging.info("‚úÖ API /api/health —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logging.error("‚ùå API /api/health –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    if frontend_check:
        logging.info("‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logging.error("‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    if nginx_check:
        logging.info("‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logging.error("‚ùå Nginx –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")

if __name__ == "__main__":
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í")
    print("==================================================")
    if kill_all_processes():
        create_systemd_services()
        start_services()
        check_status()
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ë–û–¢–ê:")
    print("1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")

    print("\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:")
    print("sudo journalctl -u bot -f")
    print("sudo journalctl -u api -f")
    print("sudo journalctl -u frontend -f") 