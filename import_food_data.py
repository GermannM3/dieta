import os
import csv
import psycopg2
from dotenv import load_dotenv
import time
from tqdm import tqdm

load_dotenv()

def get_file_line_count(file_path):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ"""
    with open(file_path, 'r', encoding='utf-8') as f:
        return sum(1 for _ in f) - 1  # -1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

def import_food_csv():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ food.csv —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    print("üçΩÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã food...")
    
    db_url = os.getenv('DATABASE_URL')
    if db_url.startswith('postgres://'):
        db_url = db_url.replace('postgres://', 'postgresql://', 1)
    
    file_path = 'fooddata_tmp/FoodData_Central_csv_2025-04-24/food.csv'
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    total_lines = get_file_line_count(file_path)
    print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {total_lines:,}")
    
    try:
        conn = psycopg2.connect(db_url)
        cur = conn.cursor()
        
        with open(file_path, encoding='utf-8') as f:
            reader = csv.DictReader(f)
            batch = []
            imported = 0
            
            with tqdm(total=total_lines, desc="–ò–º–ø–æ—Ä—Ç food") as pbar:
                for row in reader:
                    try:
                        batch.append((
                            int(row['fdc_id']), 
                            row['description'], 
                            row.get('food_category_id'), 
                            row.get('data_type')
                        ))
                    except (ValueError, KeyError) as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {e}")
                        continue
                    
                    if len(batch) >= 1000:  # –£–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        try:
                            cur.executemany(
                                'INSERT INTO food (fdc_id, description, food_category_id, data_type) VALUES (%s, %s, %s, %s) ON CONFLICT (fdc_id) DO NOTHING', 
                                batch
                            )
                            imported += len(batch)
                            conn.commit()
                            pbar.update(len(batch))
                            batch = []
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –±–∞—Ç—á–∞: {e}")
                            conn.rollback()
                            batch = []
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
                if batch:
                    try:
                        cur.executemany(
                            'INSERT INTO food (fdc_id, description, food_category_id, data_type) VALUES (%s, %s, %s, %s) ON CONFLICT (fdc_id) DO NOTHING', 
                            batch
                        )
                        imported += len(batch)
                        conn.commit()
                        pbar.update(len(batch))
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ç—á–∞: {e}")
                        conn.rollback()
        
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç food –∑–∞–≤–µ—Ä—à—ë–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported:,} –∑–∞–ø–∏—Å–µ–π")
        cur.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ food: {e}")
        return False

def import_food_nutrient_csv():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ food_nutrient.csv —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    print("ü•ó –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã food_nutrient...")
    
    db_url = os.getenv('DATABASE_URL')
    if db_url.startswith('postgres://'):
        db_url = db_url.replace('postgres://', 'postgresql://', 1)
    
    file_path = 'fooddata_tmp/FoodData_Central_csv_2025-04-24/food_nutrient.csv'
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    total_lines = get_file_line_count(file_path)
    print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {total_lines:,}")
    
    try:
        conn = psycopg2.connect(db_url)
        cur = conn.cursor()
        
        with open(file_path, encoding='utf-8') as f:
            reader = csv.DictReader(f)
            batch = []
            imported = 0
            
            with tqdm(total=total_lines, desc="–ò–º–ø–æ—Ä—Ç food_nutrient") as pbar:
                for row in reader:
                    try:
                        batch.append((
                            int(row['id']), 
                            int(row['fdc_id']), 
                            int(row['nutrient_id']), 
                            float(row['amount'])
                        ))
                    except (ValueError, KeyError) as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {e}")
                        continue
                    
                    if len(batch) >= 1000:  # –£–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
                        try:
                            cur.executemany(
                                'INSERT INTO food_nutrient (id, fdc_id, nutrient_id, amount) VALUES (%s, %s, %s, %s) ON CONFLICT (id) DO NOTHING', 
                                batch
                            )
                            imported += len(batch)
                            conn.commit()
                            pbar.update(len(batch))
                            batch = []
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –±–∞—Ç—á–∞: {e}")
                            conn.rollback()
                            batch = []
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
                if batch:
                    try:
                        cur.executemany(
                            'INSERT INTO food_nutrient (id, fdc_id, nutrient_id, amount) VALUES (%s, %s, %s, %s) ON CONFLICT (id) DO NOTHING', 
                            batch
                        )
                        imported += len(batch)
                        conn.commit()
                        pbar.update(len(batch))
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ç—á–∞: {e}")
                        conn.rollback()
        
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç food_nutrient –∑–∞–≤–µ—Ä—à—ë–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported:,} –∑–∞–ø–∏—Å–µ–π")
        cur.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ food_nutrient: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö FoodData Central –≤ Neon PostgreSQL")
    print("=" * 60)
    
    start_time = time.time()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º food.csv
    food_success = import_food_csv()
    
    if food_success:
        print("\n" + "=" * 60)
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º food_nutrient.csv
        nutrient_success = import_food_nutrient_csv()
        
        if nutrient_success:
            end_time = time.time()
            duration = end_time - start_time
            print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        else:
            print("\n‚ùå –ò–º–ø–æ—Ä—Ç food_nutrient –Ω–µ —É–¥–∞–ª—Å—è")
    else:
        print("\n‚ùå –ò–º–ø–æ—Ä—Ç food –Ω–µ —É–¥–∞–ª—Å—è")
    
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    os.system("python check_db_status.py") 