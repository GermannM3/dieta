#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–∏–µ—Ç–æ–ª–æ–≥–∞
"""

import subprocess
import time
import signal
import sys
import os
import logging
import socket
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('services.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def check_port_available(port, host='127.0.0.1'):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            result = sock.connect_ex((host, port))
            return result != 0  # –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    except Exception:
        return True  # –°—á–∏—Ç–∞–µ–º –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–Ω—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

def kill_process_on_port(port):
    """–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç"""
    try:
        # –î–ª—è Windows
        if os.name == 'nt':
            result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True)
            lines = result.stdout.split('\n')
            for line in lines:
                if f':{port}' in line and 'LISTENING' in line:
                    parts = line.strip().split()
                    if len(parts) > 4:
                        pid = parts[-1]
                        logging.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å PID {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                        subprocess.run(['taskkill', '/F', '/PID', pid], capture_output=True)
                        time.sleep(1)
                        break
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")

def selective_stop_processes():
    """–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
    print("üîå –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤...")
    kill_process_on_port(8000)  # API —Å–µ—Ä–≤–µ—Ä
    kill_process_on_port(5173)  # Frontend (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
    
    # –ü–æ–∏—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    try:
        result = subprocess.run(['wmic', 'process', 'get', 'ProcessId,CommandLine'], 
                              capture_output=True, text=True)
        lines = result.stdout.split('\n')
        
        target_scripts = ['main.py', 'improved_api_server.py']
        pids_to_kill = []
        
        for line in lines:
            for script in target_scripts:
                if script in line and 'python' in line.lower():
                    parts = line.strip().split()
                    if parts:
                        try:
                            pid = parts[-1]
                            if pid.isdigit():
                                pids_to_kill.append((pid, script))
                        except:
                            continue
        
        for pid, script in pids_to_kill:
            try:
                subprocess.run(['taskkill', '/F', '/PID', pid], capture_output=True)
                print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {script} (PID: {pid})")
            except:
                pass
                
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

class ServiceManager:
    def __init__(self):
        self.processes = {}
        self.running = True
        self.restart_attempts = {'api': 0, 'bot': 0}
        self.max_restart_attempts = 3
        
    def start_api_server(self):
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 8000
            if not check_port_available(8000):
                logging.warning("–ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç, –æ—Å–≤–æ–±–æ–∂–¥–∞—é...")
                kill_process_on_port(8000)
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                if not check_port_available(8000):
                    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 8000")
                    return False
            
            logging.info("–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
            process = subprocess.Popen(
                [sys.executable, "improved_api_server.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            self.processes['api'] = process
            logging.info(f"API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            time.sleep(3)
            if process.poll() is not None:
                stdout, stderr = process.communicate()
                if stderr:
                    logging.error(f"API —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {stderr}")
                return False
            
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            logging.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            process = subprocess.Popen(
                [sys.executable, "main.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            self.processes['bot'] = process
            logging.info(f"Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    def check_process(self, name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if name not in self.processes:
            return False
        
        process = self.processes[name]
        if process.poll() is None:
            return True
        else:
            # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            stdout, stderr = process.communicate()
            if stdout:
                logging.info(f"STDOUT {name}: {stdout}")
            if stderr:
                logging.error(f"STDERR {name}: {stderr}")
            logging.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–∫–æ–¥: {process.returncode})")
            return False
    
    def restart_process(self, name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if self.restart_attempts[name] >= self.max_restart_attempts:
            logging.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è {name}")
            return False
        
        self.restart_attempts[name] += 1
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {name} ({self.restart_attempts[name]}/{self.max_restart_attempts})")
        
        if name in self.processes:
            self.stop_process(name)
        
        time.sleep(5)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
        
        if name == 'api':
            success = self.start_api_server()
        elif name == 'bot':
            success = self.start_bot()
        else:
            return False
        
        if success:
            self.restart_attempts[name] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        
        return success
    
    def stop_process(self, name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if name in self.processes:
            process = self.processes[name]
            try:
                process.terminate()
                process.wait(timeout=5)
                logging.info(f"{name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                process.kill()
                logging.warning(f"{name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
            del self.processes[name]
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        for name in list(self.processes.keys()):
            self.stop_process(name)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        if not self.start_api_server():
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä")
            return
        
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è API —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        
        if not self.start_bot():
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            self.stop_all()
            return
        
        logging.info("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        logging.info("üîÑ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å–±–æ—è—Ö")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        consecutive_failures = {'api': 0, 'bot': 0}
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                for name in ['api', 'bot']:
                    if not self.check_process(name):
                        consecutive_failures[name] += 1
                        
                        if consecutive_failures[name] <= 5:  # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
                            logging.warning(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ {name} (–ø–æ–ø—ã—Ç–∫–∞ {consecutive_failures[name]}/5)...")
                            if self.restart_process(name):
                                consecutive_failures[name] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                                logging.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                            else:
                                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å {name}")
                        else:
                            logging.error(f"üíÄ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è {name}")
                            if name == 'bot':
                                logging.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
                    else:
                        consecutive_failures[name] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                
                time.sleep(15)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                
            except KeyboardInterrupt:
                logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.running = False
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)
        
        self.stop_all()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    if hasattr(signal_handler, 'manager'):
        signal_handler.manager.running = False

if __name__ == "__main__":
    print("ü§ñ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–∏–µ—Ç–æ–ª–æ–≥-–±–æ—Ç–æ–º")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    selective_stop_processes()
    time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    print("-" * 50)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
    manager = ServiceManager()
    signal_handler.manager = manager
    
    try:
        manager.run()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        manager.stop_all()
        sys.exit(1) 