#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import subprocess
import sys
import os
import socket
import psutil
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def check_file_exists(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    exists = os.path.exists(filename)
    logging.info(f"üìÅ {filename}: {'‚úÖ' if exists else '‚ùå'}")
    return exists

def check_port_available(port, host='127.0.0.1'):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            result = s.connect_ex((host, port))
            available = result != 0
            logging.info(f"üîå –ü–æ—Ä—Ç {port}: {'‚úÖ' if available else '‚ùå (–∑–∞–Ω—è—Ç)'}")
            return available
    except Exception as e:
        logging.error(f"üîå –ü–æ—Ä—Ç {port}: ‚ùå (–æ—à–∏–±–∫–∞: {e})")
        return False

def check_process_running(process_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    count = 0
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = proc.info['cmdline']
            if cmdline and process_name in ' '.join(cmdline):
                count += 1
                logging.info(f"üîÑ {process_name}: ‚úÖ (PID: {proc.info['pid']})")
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    if count == 0:
        logging.info(f"üîÑ {process_name}: ‚ùå (–Ω–µ –∑–∞–ø—É—â–µ–Ω)")
    
    return count

def check_python_modules():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π"""
    modules = [
        'fastapi', 'aiogram', 'sqlalchemy', 'psutil', 
        'requests', 'pydantic', 'uvicorn', 'python-dotenv'
    ]
    
    for module in modules:
        try:
            __import__(module)
            logging.info(f"üêç {module}: ‚úÖ")
        except ImportError:
            logging.info(f"üêç {module}: ‚ùå")

def check_node_modules():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –º–æ–¥—É–ª–µ–π"""
    frontend_dir = "calorie-love-tracker"
    if os.path.exists(frontend_dir):
        node_modules = os.path.join(frontend_dir, "node_modules")
        exists = os.path.exists(node_modules)
        logging.info(f"üì¶ node_modules: {'‚úÖ' if exists else '‚ùå'}")
        return exists
    else:
        logging.info(f"üìÅ {frontend_dir}: ‚ùå (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
        return False

def check_nginx_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx"""
    try:
        result = subprocess.run(
            ["nginx", "-t"], 
            capture_output=True, 
            text=True, 
            timeout=10
        )
        if result.returncode == 0:
            logging.info("üîß nginx config: ‚úÖ")
            return True
        else:
            logging.error(f"üîß nginx config: ‚ùå ({result.stderr})")
            return False
    except Exception as e:
        logging.error(f"üîß nginx config: ‚ùå (–æ—à–∏–±–∫–∞: {e})")
        return False

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env"""
    env_file = ".env"
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            content = f.read()
            required_vars = [
                'TG_TOKEN', 'DATABASE_URL', 'YOOKASSA_SHOP_ID', 
                'YOOKASSA_SECRET_KEY', 'GIGACHAT_ACCESS_TOKEN'
            ]
            
            missing_vars = []
            for var in required_vars:
                if var not in content:
                    missing_vars.append(var)
            
            if missing_vars:
                logging.warning(f"üîë .env: ‚ö†Ô∏è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_vars)})")
            else:
                logging.info("üîë .env: ‚úÖ")
            return len(missing_vars) == 0
    else:
        logging.error("üîë .env: ‚ùå (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        return False

async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from database.init_database import engine
        from sqlalchemy import text
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT 1"))
            logging.info("üóÑÔ∏è Database: ‚úÖ")
            return True
    except Exception as e:
        logging.error(f"üóÑÔ∏è Database: ‚ùå ({e})")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logging.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
    logging.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    logging.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    check_file_exists("main.py")
    check_file_exists("improved_api_server.py")
    check_file_exists("nginx-prod.conf")
    check_file_exists("requirements.txt")
    check_file_exists("package.json")
    
    logging.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    logging.info("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:")
    check_port_available(8000)
    check_port_available(3000)
    check_port_available(80)
    
    logging.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
    check_process_running("main.py")
    check_process_running("improved_api_server.py")
    check_process_running("npm start")
    check_process_running("nginx")
    
    logging.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –º–æ–¥—É–ª–∏
    logging.info("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π:")
    check_python_modules()
    
    logging.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –º–æ–¥—É–ª–∏
    logging.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –º–æ–¥—É–ª–µ–π:")
    check_node_modules()
    
    logging.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx
    logging.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx:")
    check_nginx_config()
    
    logging.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
    logging.info("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ .env:")
    check_env_file()
    
    logging.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logging.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    await check_database_connection()
    
    logging.info("")
    logging.info("=" * 50)
    logging.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 