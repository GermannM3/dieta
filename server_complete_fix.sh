#!/bin/bash
echo "üîß –ò—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Timeweb"
echo "======================================================="

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
echo "üìÇ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É /opt/dieta..."
cd /opt/dieta || { echo "‚ùå –ü–∞–ø–∫–∞ /opt/dieta –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"; exit 1; }

echo "üìç –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: $(pwd)"

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
echo "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
git fetch origin
git reset --hard origin/main
git pull origin main

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–ø–æ—Ä—Ç–æ–º –≤ PresetPicker.jsx
echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –≤ PresetPicker.jsx..."
sed -i "s|import { getFoodCalories, searchFood } from '../lib/foodData';|import { getFoodCalories, searchFood } from '../lib/foodData.js';|g" calorie-love-tracker/src/components/PresetPicker.jsx

# –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã frontend –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã frontend..."

# –°–æ–∑–¥–∞–µ–º lib/utils.ts –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f "calorie-love-tracker/src/lib/utils.ts" ]; then
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ lib/utils.ts..."
    mkdir -p calorie-love-tracker/src/lib
    cat > calorie-love-tracker/src/lib/utils.ts << 'EOF'
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
EOF
fi

# –°–æ–∑–¥–∞–µ–º lib/foodData.js –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f "calorie-love-tracker/src/lib/foodData.js" ]; then
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ lib/foodData.js..."
    cat > calorie-love-tracker/src/lib/foodData.js << 'EOF'
// –í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –¢–æ–ª—å–∫–æ CalorieNinjas API:

const CALORIE_NINJAS_API_KEY = 'S+MDs4qFxUiE/WZHQXbHbw==TSlWYv6M8HzwQwKa';
const CALORIE_NINJAS_URL = 'https://api.calorieninjas.com/v1/nutrition?query=';

export const searchFood = async (query) => {
  const res = await fetch(CALORIE_NINJAS_URL + encodeURIComponent(query), {
    headers: { 'X-Api-Key': CALORIE_NINJAS_API_KEY }
  });
  const data = await res.json();
  return data.items || [];
};

export const getFoodCalories = async (foodName) => {
  const items = await searchFood(foodName);
  if (!items.length) return null;
  return items[0];
};
EOF
fi

# –°–æ–∑–¥–∞–µ–º lib/presets.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f "calorie-love-tracker/src/lib/presets.json" ]; then
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ lib/presets.json..."
    cat > calorie-love-tracker/src/lib/presets.json << 'EOF'
[
  {
    "title": "–û—Ñ–∏—Å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫",
    "items": [
      { "name": "–∫–æ—Ñ–µ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π", "grams": 200, "kcal": 4 },
      { "name": "—Å—ã—Ä–Ω–∏–∫–∏", "grams": 150, "kcal": 310 },
      { "name": "—è–±–ª–æ–∫–æ", "grams": 100, "kcal": 50 }
    ]
  },
  {
    "title": "–õ—ë–≥–∫–∏–π —É–∂–∏–Ω",
    "items": [
      { "name": "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", "grams": 150, "kcal": 165 },
      { "name": "–æ–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç", "grams": 100, "kcal": 60 }
    ]
  },
  {
    "title": "–†–∞—Ü–∏–æ–Ω –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
    "items": [
      { "name": "–±–∞–Ω–∞–Ω", "grams": 100, "kcal": 89 },
      { "name": "—Ç–≤–æ—Ä–æ–≥", "grams": 200, "kcal": 160 },
      { "name": "–ø—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –±–∞—Ç–æ–Ω—á–∏–∫", "grams": 60, "kcal": 220 }
    ]
  }
]
EOF
fi

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞
echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker..."
docker system prune -a -f
docker volume prune -f

# –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞
echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker rmi $(docker images "dieta*" -q) 2>/dev/null || true
docker rmi $(docker images "*dieta*" -q) 2>/dev/null || true

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –±–µ–∑ –∫—ç—à–∞
echo "üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down --volumes --remove-orphans

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ API –∏ Bot
echo "üöÄ –ó–∞–ø—É—Å–∫ API –∏ Bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose up -d api bot

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞..."
for i in {1..5}; do
    if curl -f http://localhost:8000/health; then
        echo "‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!"
        break
    else
        echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $i/5 - API –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤..."
        sleep 10
    fi
done

# –¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º frontend –æ—Ç–¥–µ–ª—å–Ω–æ
echo "üîß –°–±–æ—Ä–∫–∞ frontend..."
docker-compose build --no-cache frontend

# –ó–∞–ø—É—Å–∫–∞–µ–º frontend
echo "üöÄ –ó–∞–ø—É—Å–∫ frontend..."
docker-compose up -d frontend

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:"
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ API:"
docker-compose logs --tail=5 api

echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ Bot:"
docker-compose logs --tail=5 bot

echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ Frontend:"
docker-compose logs --tail=5 frontend

echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "- API: http://5.129.198.80:8000"
echo "- Health: http://5.129.198.80:8000/health"
echo "- Docs: http://5.129.198.80:8000/docs"
echo "- Frontend: http://5.129.198.80:3000" 