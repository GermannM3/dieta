#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_premium –≤ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import psycopg2
from dotenv import load_dotenv

load_dotenv()

def update_tables():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_premium –≤ —Ç–∞–±–ª–∏—Ü—ã"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    PGHOST = os.getenv('PGHOST')
    PGUSER = os.getenv('PGUSER')
    PGPASSWORD = os.getenv('PGPASSWORD')
    PGDATABASE = os.getenv('PGDATABASE')
    
    if not all([PGHOST, PGUSER, PGPASSWORD, PGDATABASE]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –≤ .env!")
        return False
    
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            host=PGHOST,
            user=PGUSER,
            password=PGPASSWORD,
            database=PGDATABASE,
            sslmode='require'
        )
        cur = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_premium –≤ —Ç–∞–±–ª–∏—Ü—É web_profiles
        try:
            cur.execute("""
                ALTER TABLE web_profiles 
                ADD COLUMN is_premium BOOLEAN DEFAULT FALSE
            """)
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_premium –≤ web_profiles")
        except psycopg2.errors.DuplicateColumn:
            print("‚ÑπÔ∏è –ü–æ–ª–µ is_premium —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ web_profiles")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_premium –≤ —Ç–∞–±–ª–∏—Ü—É users (–¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º)
        try:
            cur.execute("""
                ALTER TABLE users 
                ADD COLUMN is_premium BOOLEAN DEFAULT FALSE
            """)
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_premium –≤ users")
        except psycopg2.errors.DuplicateColumn:
            print("‚ÑπÔ∏è –ü–æ–ª–µ is_premium —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ users")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã –≤ —Ç–∞–±–ª–∏—Ü—É users
        try:
            cur.execute("""
                ALTER TABLE users 
                ADD COLUMN body_fat_percent FLOAT
            """)
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ body_fat_percent –≤ users")
        except psycopg2.errors.DuplicateColumn:
            print("‚ÑπÔ∏è –ü–æ–ª–µ body_fat_percent —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ users")
        
        try:
            cur.execute("""
                ALTER TABLE users 
                ADD COLUMN goal_fat_percent FLOAT
            """)
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ goal_fat_percent –≤ users")
        except psycopg2.errors.DuplicateColumn:
            print("‚ÑπÔ∏è –ü–æ–ª–µ goal_fat_percent —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ users")
        
        conn.commit()
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        cur.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    success = update_tables()
    
    if success:
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        print("‚úÖ –ü–æ–ª—è –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print("‚úÖ –ü–æ–ª—è –¥–ª—è –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main() 