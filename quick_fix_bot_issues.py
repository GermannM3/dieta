#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º
"""

import os
import sys
import subprocess
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_redis():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Redis"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Redis —á–µ—Ä–µ–∑ snap
    success, output, error = run_command("sudo snap services redis")
    if success and "active" in output:
        print("‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ snap")
        return True
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis —á–µ—Ä–µ–∑ snap
    print("üîÑ –ó–∞–ø—É—Å–∫ Redis —á–µ—Ä–µ–∑ snap...")
    success, output, error = run_command("sudo snap start redis")
    if success:
        print("‚úÖ Redis –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ snap")
        return True
    
    # –ï—Å–ª–∏ snap –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º Docker
    print("üîÑ –ó–∞–ø—É—Å–∫ Redis —á–µ—Ä–µ–∑ Docker...")
    success, output, error = run_command("sudo docker ps | grep redis")
    if success and output.strip():
        print("‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Docker")
        return True
    
    # –°–æ–∑–¥–∞–µ–º Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    success, output, error = run_command("sudo docker run -d --name redis -p 6379:6379 redis:alpine")
    if success:
        print("‚úÖ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω")
        return True
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis")
    return False

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    success, output, error = run_command("sudo systemctl stop bot")
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    run_command("sudo pkill -f 'python.*main'")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    import time
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    success, output, error = run_command("sudo systemctl start bot")
    if success:
        print("‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {error}")
        return False

def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...")
    
    success, output, error = run_command("sudo systemctl status bot")
    if success:
        print("üìã –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:")
        print(output)
        
        if "active (running)" in output:
            print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ö†Ô∏è –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {error}")
        return False

def check_bot_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–∞...")
    
    success, output, error = run_command("sudo journalctl -u bot --tail=20")
    if success:
        print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞:")
        print(output)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if "ERROR" in output or "Exception" in output:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö")
            return False
        else:
            print("‚úÖ –õ–æ–≥–∏ –±–µ–∑ –æ—à–∏–±–æ–∫")
            return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {error}")
        return False

def update_env_file():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª .env —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ YooKassa"""
    print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa...")
    
    env_file = ".env"
    if not os.path.exists(env_file):
        print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(env_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YooKassa
    new_settings = """# ===== YOOKASSA –ù–ê–°–¢–†–û–ô–ö–ò =====
YOOKASSA_SHOP_ID=390540012
YOOKASSA_SECRET_KEY=live_4nHajHuzYGMrBPFLXQojoRW1_6ay2jy7SqSBUl16JOA
YOOKASSA_PAYMENT_TOKEN=390540012:LIVE:73839
"""
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    lines = content.split('\n')
    new_lines = []
    skip_yookassa = False
    
    for line in lines:
        if line.startswith('# ===== YOOKASSA'):
            skip_yookassa = True
            new_lines.append(new_settings.strip())
        elif skip_yookassa and (line.startswith('YOOKASSA_') or line.startswith('SUBSCRIPTION_')):
            continue
        elif skip_yookassa and line.strip() == '':
            skip_yookassa = False
            new_lines.append(line)
        elif not skip_yookassa:
            new_lines.append(line)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(new_lines))
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YooKassa –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º")
    print("=" * 50)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    update_env_file()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    redis_ok = check_redis()
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_restarted = restart_bot()
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    import time
    time.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    bot_status = check_bot_status()
    logs_ok = check_bot_logs()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("=" * 50)
    
    print(f"Redis: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if redis_ok else '‚ùå –ü–†–û–ë–õ–ï–ú–´'}")
    print(f"–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω: {'‚úÖ –î–ê' if bot_restarted else '‚ùå –ù–ï–¢'}")
    print(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if bot_status else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"–õ–æ–≥–∏ –±–æ—Ç–∞: {'‚úÖ –ë–ï–ó –û–®–ò–ë–û–ö' if logs_ok else '‚ö†Ô∏è –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    
    if bot_status and logs_ok:
        print("\nüéâ –ë–û–¢ –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ Telegram")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: sudo journalctl -u bot -f")

if __name__ == "__main__":
    main() 