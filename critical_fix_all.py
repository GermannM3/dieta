#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú
===================================
"""

import os
import sys
import subprocess
import time
import logging
import re
import socket
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def check_syntax(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            code = f.read()
        compile(code, file_path, 'exec')
        return True, "OK"
    except SyntaxError as e:
        return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {e.lineno}: {e.msg}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {e}"

def fix_database_url():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ"""
    env_file = ".env"
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DATABASE_URL...")
    
    # –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    else:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º DATABASE_URL
    fixed_lines = []
    found_db_url = False
    
    for line in lines:
        if line.startswith('DATABASE_URL='):
            found_db_url = True
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            db_url = line.strip().split('=', 1)[1]
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ URL
            if 'postgres://' in db_url and 'postgresql+asyncpg://' not in db_url:
                db_url = db_url.replace('postgres://', 'postgresql+asyncpg://')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Ä—Ç–∞
            db_url = re.sub(r'[^\w\-\.\:\/\@\?\=\&]', '', db_url)
            
            fixed_lines.append(f"DATABASE_URL={db_url}\n")
            print(f"‚úÖ DATABASE_URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {db_url[:50]}...")
        else:
            fixed_lines.append(line)
    
    if not found_db_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        return False
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(env_file, 'w', encoding='utf-8') as f:
        f.writelines(fixed_lines)
    
    return True

def check_port(port):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        result = sock.connect_ex(('127.0.0.1', port))
        return result != 0

def kill_process_on_port(port):
    """–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É (Windows)"""
    try:
        result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True)
        lines = result.stdout.split('\n')
        for line in lines:
            if f':{port}' in line and 'LISTENING' in line:
                parts = line.strip().split()
                if len(parts) > 4:
                    pid = parts[-1]
                    print(f"üî´ –£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å PID {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                    subprocess.run(['taskkill', '/F', '/PID', pid], capture_output=True)
                    time.sleep(1)
                    break
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")

def start_service(service_name, script_path, port=None):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        if port and not check_port(port):
            print(f"üîå –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç, –æ—Å–≤–æ–±–æ–∂–¥–∞—é...")
            kill_process_on_port(port)
            time.sleep(2)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ {service_name}...")
        process = subprocess.Popen(
            [sys.executable, script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        
        if process.poll() is None:
            print(f"‚úÖ {service_name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå {service_name} —É–ø–∞–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞:")
            if stderr:
                print(f"   –û—à–∏–±–∫–∞: {stderr}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {service_name}: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...")
    files_to_check = ['main.py', 'improved_api_server.py']
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            is_ok, message = check_syntax(file_path)
            if is_ok:
                print(f"‚úÖ {file_path}: {message}")
            else:
                print(f"‚ùå {file_path}: {message}")
                print("   –û—Å—Ç–∞–Ω–æ–≤–∫–∞ - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏!")
                return False
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DATABASE_URL
    print("\n2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DATABASE_URL...")
    if not fix_database_url():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å DATABASE_URL!")
        return False
    
    # 3. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("\n3Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    kill_process_on_port(8000)  # API
    kill_process_on_port(5173)  # Frontend dev server
    
    # 4. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\n4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫ API
    api_process = start_service("API —Å–µ—Ä–≤–µ—Ä", "improved_api_server.py", 8000)
    if not api_process:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä!")
        return False
    
    time.sleep(5)  # –î–∞–µ–º API –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    try:
        import requests
        response = requests.get("http://127.0.0.1:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API health check –ø—Ä–æ—à–µ–ª")
        else:
            print(f"‚ö†Ô∏è API health check: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è API health check –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_process = start_service("Telegram –±–æ—Ç", "main.py")
    if not bot_process:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!")
        return False
    
    print("\nüéâ –í–°–ï –°–ï–†–í–ò–°–´ –ó–ê–ü–£–©–ï–ù–´!")
    print("=" * 50)
    print("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
    print("   - API: http://127.0.0.1:8000")
    print("   - Health: http://127.0.0.1:8000/health")
    print("   - API Docs: http://127.0.0.1:8000/docs")
    print("   - Telegram –±–æ—Ç: –∞–∫—Ç–∏–≤–µ–Ω")
    print("\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:")
    print("   - –õ–æ–≥–∏ API: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª")
    print("   - –õ–æ–≥–∏ –±–æ—Ç–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª")
    print("\n‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    
    try:
        while True:
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –∂–∏–≤—ã
            if api_process.poll() is not None:
                print("‚ùå API —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª!")
                break
            if bot_process.poll() is not None:
                print("‚ùå Telegram –±–æ—Ç —É–ø–∞–ª!")
                break
            
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            api_process.terminate()
            bot_process.terminate()
        except:
            pass
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            sys.exit(1)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 