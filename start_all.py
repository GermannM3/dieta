#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–∏–µ—Ç-–±–æ—Ç–∞
"""

import subprocess
import sys
import time
import logging
import signal
import os
import socket
import psutil
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('start_all.log'),
        logging.StreamHandler()
    ]
)

def check_port_available(port, host='127.0.0.1'):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            result = s.connect_ex((host, port))
            return result != 0
    except Exception:
        return False

def kill_process_on_port(port):
    """–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É"""
    try:
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                connections = proc.connections()
                for conn in connections:
                    if conn.laddr.port == port:
                        logging.info(f"–£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å {proc.info['name']} (PID: {proc.info['pid']}) –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                        proc.terminate()
                        proc.wait(timeout=5)
                        return True
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
    return False

def stop_old_processes():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    logging.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–æ—Ä—Ç–∞–º
    for port in [8000, 3000, 80]:
        if not check_port_available(port):
            kill_process_on_port(port)
            time.sleep(1)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏
    try:
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                cmdline = proc.info['cmdline']
                if cmdline:
                    cmd_str = ' '.join(cmdline)
                    if any(keyword in cmd_str for keyword in ['main.py', 'improved_api_server.py', 'npm start', 'nginx']):
                        logging.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é: {proc.info['name']} (PID: {proc.info['pid']})")
                        proc.terminate()
                        proc.wait(timeout=5)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def start_api():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    if not check_port_available(8000):
        kill_process_on_port(8000)
        time.sleep(2)
    
    try:
        process = subprocess.Popen(
            [sys.executable, "improved_api_server.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        
        if process.poll() is None:
            logging.info(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
        else:
            stdout, stderr = process.communicate()
            logging.error(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")
        return None

def start_frontend():
    """–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    logging.info("üåê –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    if not check_port_available(3000):
        kill_process_on_port(3000)
        time.sleep(2)
    
    frontend_dir = "calorie-love-tracker"
    if not os.path.exists(frontend_dir):
        logging.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {frontend_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
        if not os.path.exists(os.path.join(frontend_dir, "node_modules")):
            logging.info("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
            install_process = subprocess.run(
                ["npm", "install"],
                cwd=frontend_dir,
                capture_output=True,
                text=True
            )
            if install_process.returncode != 0:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {install_process.stderr}")
                return None
        
        process = subprocess.Popen(
            ["npm", "start"],
            cwd=frontend_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(5)
        
        if process.poll() is None:
            logging.info(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
        else:
            stdout, stderr = process.communicate()
            logging.error(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        return None

def start_nginx():
    """–ó–∞–ø—É—Å–∫ nginx"""
    logging.info("üîß –ó–∞–ø—É—Å–∫ nginx...")
    
    if not check_port_available(80):
        kill_process_on_port(80)
        time.sleep(2)
    
    nginx_conf = "nginx-prod.conf"
    if not os.path.exists(nginx_conf):
        logging.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {nginx_conf} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        subprocess.run(["cp", nginx_conf, "/etc/nginx/sites-available/tvoi-kalkulyator"], check=True)
        subprocess.run(["ln", "-sf", "/etc/nginx/sites-available/tvoi-kalkulyator", "/etc/nginx/sites-enabled/"], check=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        result = subprocess.run(["nginx", "-t"], capture_output=True, text=True)
        if result.returncode != 0:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx: {result.stderr}")
            return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º nginx
        process = subprocess.Popen(
            ["nginx"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        time.sleep(2)
        
        if process.poll() is None:
            logging.info(f"‚úÖ Nginx –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
        else:
            stdout, stderr = process.communicate()
            logging.error(f"‚ùå Nginx –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ nginx: {e}")
        return None

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        process = subprocess.Popen(
            [sys.executable, "main.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        
        if process.poll() is None:
            logging.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
        else:
            stdout, stderr = process.communicate()
            logging.error(f"‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return None

def check_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
    
    services = [
        ("API", "http://localhost:8000/health"),
        ("–§—Ä–æ–Ω—Ç–µ–Ω–¥", "http://localhost:3000"),
        ("Nginx", "http://localhost")
    ]
    
    for name, url in services:
        try:
            result = subprocess.run(
                ["curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", url],
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.returncode == 0 and result.stdout.strip() in ["200", "301", "302"]:
                logging.info(f"‚úÖ {name} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logging.warning(f"‚ö†Ô∏è {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {name}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Dieta Bot...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    stop_old_processes()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    processes = {}
    
    # API
    api_process = start_api()
    if api_process:
        processes['api'] = api_process
    
    # –§—Ä–æ–Ω—Ç–µ–Ω–¥
    frontend_process = start_frontend()
    if frontend_process:
        processes['frontend'] = frontend_process
    
    # Nginx
    nginx_process = start_nginx()
    if nginx_process:
        processes['nginx'] = nginx_process
    
    # –ë–æ—Ç
    bot_process = start_bot()
    if bot_process:
        processes['bot'] = bot_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
    time.sleep(5)
    check_services()
    
    logging.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    logging.info("üìä –õ–æ–≥–∏:")
    logging.info("  API: tail -f logs/api.log")
    logging.info("  –§—Ä–æ–Ω—Ç–µ–Ω–¥: tail -f logs/frontend.log")
    logging.info("  –ë–æ—Ç: tail -f logs/bot.log")
    logging.info("  Nginx: tail -f /var/log/nginx/tvoi-kalkulyator.error.log")
    logging.info("üåê –°–∞–π—Ç: http://tvoi-kalkulyator.ru")
    logging.info("ü§ñ –ë–æ—Ç: @tvoy_diet_bot")
    
    try:
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            time.sleep(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            for name, process in processes.items():
                if process.poll() is not None:
                    logging.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
    except KeyboardInterrupt:
        logging.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        logging.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        for name, process in processes.items():
            if process and process.poll() is None:
                logging.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {name}...")
                process.terminate()
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    process.kill()
        
        logging.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main() 