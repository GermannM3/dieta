#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Dieta Bot
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python start_all.py
"""

import os
import sys
import time
import signal
import subprocess
import threading
from pathlib import Path

class ServiceManager:
    def __init__(self):
        self.processes = {}
        self.logs_dir = Path("logs")
        self.logs_dir.mkdir(exist_ok=True)
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def stop_processes(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏
        processes_to_kill = [
            "main.py", "improved_api_server.py", 
            "npm start", "node", "nginx"
        ]
        
        for proc_name in processes_to_kill:
            try:
                subprocess.run(f"pkill -f '{proc_name}'", shell=True, capture_output=True)
                self.log(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {proc_name}")
            except:
                pass
                
        time.sleep(2)
        
    def start_api_server(self):
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
        self.log("üåê –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8000...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
            api_process = subprocess.Popen(
                [sys.executable, "improved_api_server.py"],
                stdout=open(self.logs_dir / "api.log", "w"),
                stderr=subprocess.STDOUT,
                cwd=os.getcwd()
            )
            
            self.processes['api'] = api_process
            self.log(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {api_process.pid})")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
            try:
                import requests
                response = requests.get("http://localhost:8000/health", timeout=5)
                if response.status_code == 200:
                    self.log("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
                else:
                    self.log("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    return False
            except:
                self.log("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")
            return False
            
    def start_frontend(self):
        """–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        self.log("üé® –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...")
        
        frontend_dir = Path("calorie-love-tracker")
        if not frontend_dir.exists():
            self.log("‚ùå –ü–∞–ø–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            os.chdir(frontend_dir)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not Path("node_modules").exists():
                self.log("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
                subprocess.run(["npm", "install"], check=True)
                
            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            self.log("üî® –°–æ–±–∏—Ä–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...")
            subprocess.run(["npm", "run", "build"], check=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            self.log("üåê –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ –ø–æ—Ä—Ç—É 3000...")
            frontend_process = subprocess.Popen(
                ["npm", "start"],
                stdout=open(Path("../logs/frontend.log"), "w"),
                stderr=subprocess.STDOUT
            )
            
            self.processes['frontend'] = frontend_process
            self.log(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω (PID: {frontend_process.pid})")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
            os.chdir("..")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            try:
                import requests
                response = requests.get("http://localhost:3000", timeout=5)
                if response.status_code == 200:
                    self.log("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
                else:
                    self.log("‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    return False
            except:
                self.log("‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
            os.chdir("..")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
            return False
            
    def setup_nginx(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ nginx"""
        self.log("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º nginx...")
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            subprocess.run([
                "cp", "nginx-prod.conf", 
                "/etc/nginx/sites-available/tvoi-kalkulyator"
            ], check=True)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
            subprocess.run([
                "ln", "-sf", 
                "/etc/nginx/sites-available/tvoi-kalkulyator",
                "/etc/nginx/sites-enabled/"
            ], check=True)
            
            # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∞–π—Ç
            try:
                os.remove("/etc/nginx/sites-enabled/default")
            except:
                pass
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            subprocess.run(["nginx", "-t"], check=True)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º nginx
            subprocess.run(["systemctl", "restart", "nginx"], check=True)
            
            self.log("‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nginx: {e}")
            return False
            
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        self.log("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
        
        try:
            bot_process = subprocess.Popen(
                [sys.executable, "main.py"],
                stdout=open(self.logs_dir / "bot.log", "w"),
                stderr=subprocess.STDOUT,
                cwd=os.getcwd()
            )
            
            self.processes['bot'] = bot_process
            self.log(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {bot_process.pid})")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
            
    def save_pids(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        for name, process in self.processes.items():
            with open(self.logs_dir / f"{name}.pid", "w") as f:
                f.write(str(process.pid))
                
    def check_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã...")
        
        checks = [
            ("API (–ø–æ—Ä—Ç 8000)", "http://localhost:8000/health"),
            ("–§—Ä–æ–Ω—Ç–µ–Ω–¥ (–ø–æ—Ä—Ç 3000)", "http://localhost:3000"),
            ("Nginx (–ø–æ—Ä—Ç 80)", "http://localhost")
        ]
        
        for name, url in checks:
            try:
                import requests
                if "health" in url:
                    response = requests.get(url, timeout=5)
                    status = response.text if response.status_code == 200 else "–ù–ï –†–ê–ë–û–¢–ê–ï–¢"
                else:
                    response = requests.get(url, timeout=5)
                    status = response.status_code if response.status_code == 200 else "–ù–ï –†–ê–ë–û–¢–ê–ï–¢"
                    
                self.log(f"{name}: {status}")
            except:
                self.log(f"{name}: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
                
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
        self.stop_processes()
        sys.exit(0)
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ Dieta Bot...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.stop_processes()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        success = True
        
        if not self.start_api_server():
            success = False
            
        if not self.start_frontend():
            success = False
            
        if not self.setup_nginx():
            success = False
            
        if not self.start_bot():
            success = False
            
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
            self.save_pids()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
            self.check_services()
            
            self.log("")
            self.log("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
            self.log("")
            self.log("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            self.log("  API —Å–µ—Ä–≤–µ—Ä: http://localhost:8000")
            self.log("  –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://localhost:3000")
            self.log("  –í–µ–±-—Å–∞–π—Ç: http://tvoi-kalkulyator.ru")
            self.log("  –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω: http://—Ç–≤–æ–π-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Ä—Ñ")
            self.log("")
            self.log("üìä –õ–æ–≥–∏:")
            self.log("  API: tail -f logs/api.log")
            self.log("  –§—Ä–æ–Ω—Ç–µ–Ω–¥: tail -f logs/frontend.log")
            self.log("  –ë–æ—Ç: tail -f logs/bot.log")
            self.log("  Nginx: tail -f /var/log/nginx/tvoi-kalkulyator.error.log")
            self.log("")
            self.log("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                self.stop_processes()
        else:
            self.log("‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å")
            self.stop_processes()
            sys.exit(1)

if __name__ == "__main__":
    manager = ServiceManager()
    manager.run() 