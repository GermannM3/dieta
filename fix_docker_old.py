#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—Ç–∞—Ä—ã–º Docker
"""

import subprocess
import os
import sys
import requests
import time

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_docker_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Docker"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Docker...")
    
    success, output, error = run_command("docker --version")
    if success:
        print(f"üìã –í–µ—Ä—Å–∏—è Docker: {output.strip()}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {error}")
        return False

def fix_requirements():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç requirements.txt –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ requirements.txt...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    try:
        with open('requirements.txt', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        replacements = [
            ('aiohttp~=3.9.0', 'aiohttp>=3.9.0,<3.12'),
            ('pydantic<2.11', 'pydantic>=2.0.0,<2.11'),
            ('aiofiles~=23.2.1', 'aiofiles>=23.0.0,<24.0.0'),
        ]
        
        for old, new in replacements:
            if old in content:
                content = content.replace(old, new)
                print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: {old} ‚Üí {new}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('requirements.txt', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ requirements.txt –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è requirements.txt: {e}")
        return False

def stop_containers_old_docker():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ Docker"""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—Å—Ç–∞—Ä—ã–π Docker)...")
    
    commands = [
        "docker-compose down",
        "docker stop $(docker ps -q) 2>/dev/null || true",
        "docker system prune -f"  # –ë–µ–∑ compose –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ Docker
    ]
    
    for cmd in commands:
        print(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}")
        success, output, error = run_command(cmd)
        if success:
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
        else:
            print(f"‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {cmd}")
            if error:
                print(f"   –û—à–∏–±–∫–∞: {error}")

def clean_docker_old():
    """–û—á–∏—â–∞–µ—Ç Docker –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ Docker"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ Docker (—Å—Ç–∞—Ä—ã–π Docker)...")
    
    commands = [
        "docker container prune -f",
        "docker image prune -f", 
        "docker volume prune -f",
        "docker network prune -f"
    ]
    
    for cmd in commands:
        success, output, error = run_command(cmd)
        if success:
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
        else:
            print(f"‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {cmd}")

def rebuild_containers_old():
    """–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ Docker"""
    print("üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—Å—Ç–∞—Ä—ã–π Docker)...")
    
    commands = [
        "docker-compose build --no-cache",
        "docker-compose up -d"
    ]
    
    for cmd in commands:
        print(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}")
        success, output, error = run_command(cmd)
        if success:
            print(f"‚úÖ {cmd} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        else:
            print(f"‚ùå {cmd} - –æ—à–∏–±–∫–∞: {error}")
            if output:
                print(f"   –í—ã–≤–æ–¥: {output}")
            return False
    
    return True

def wait_for_services():
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    for i in range(60):  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
        try:
            response = requests.get("http://5.129.198.80:8000/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ API –∑–∞–ø—É—â–µ–Ω")
                break
        except:
            pass
        
        time.sleep(1)
        if i % 10 == 0:
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... {i+1}/60")

def check_services_old():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ Docker"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    success, output, error = run_command("docker-compose ps")
    if success:
        print("üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print(output)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
        if "Up" in output and "Exit" not in output:
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            return True
        else:
            print("‚ö†Ô∏è  –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {error}")
        return False

def test_domains():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–º–µ–Ω—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤...")
    
    domains = [
        "https://—Ç–≤–æ–π-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Ä—Ñ",
        "https://tvoi-kalkulyator.ru"
    ]
    
    all_working = True
    for domain in domains:
        try:
            response = requests.get(domain, timeout=10, verify=False)
            if response.status_code == 200:
                print(f"‚úÖ {domain} - —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è  {domain} - —Å—Ç–∞—Ç—É—Å {response.status_code}")
                all_working = False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {domain} - –æ—à–∏–±–∫–∞: {e}")
            all_working = False
    
    return all_working

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    
    services = ["api", "bot", "frontend", "nginx"]
    
    for service in services:
        print(f"\nüîç –õ–æ–≥–∏ {service}:")
        success, output, error = run_command(f"docker-compose logs --tail=10 {service}")
        if success:
            print(output)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ {service}: {error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—Ç–∞—Ä—ã–º Docker...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Docker
    if not check_docker_version():
        print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º requirements.txt
    if not fix_requirements():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å requirements.txt")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    stop_containers_old_docker()
    
    # –û—á–∏—â–∞–µ–º Docker
    clean_docker_old()
    
    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    if rebuild_containers_old():
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        wait_for_services()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if check_services_old():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
            check_logs()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã
            if test_domains():
                print("\n" + "=" * 60)
                print("üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
                print("=" * 60)
                print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
                print("üåê API: http://5.129.198.80:8000")
                print("üì± Frontend: https://—Ç–≤–æ–π-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Ä—Ñ")
                print("üì± Frontend: https://tvoi-kalkulyator.ru")
                print("ü§ñ –ë–æ—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
                print("\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("\n‚ö†Ô∏è  –î–æ–º–µ–Ω—ã –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
                print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        else:
            print("\n‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ö–û–ù–¢–ï–ô–ù–ï–†–û–í!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")

if __name__ == "__main__":
    main() 