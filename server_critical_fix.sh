#!/bin/bash
echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –ù–ê –°–ï–†–í–ï–†–ï"
echo "=============================================="

cd /opt/dieta || { echo "‚ùå –ü–∞–ø–∫–∞ /opt/dieta –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"; exit 1; }

echo "üìç –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: $(pwd)"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down 2>/dev/null || true
docker stop $(docker ps -q) 2>/dev/null || true

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
echo "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
git fetch origin
git reset --hard origin/main
git pull origin main

echo "‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞!
echo "üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï .env —Ñ–∞–π–ª–∞..."
if [[ -f ".env" ]]; then
    echo "üìã –¢–µ–∫—É—â–∏–π .env:"
    cat .env
    
    echo ""
    echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DATABASE_URL..."
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    cp .env .env.backup
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º DATABASE_URL - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    sed -i 's|postgres://|postgresql+asyncpg://|g' .env
    sed -i 's|?sslmode=require||g' .env
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
    sed -i 's/[[:cntrl:]]//g' .env
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç DATABASE_URL
    if grep -q "DATABASE_URL=" .env; then
        # –ò–∑–≤–ª–µ–∫–∞–µ–º DATABASE_URL –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        DB_URL=$(grep "DATABASE_URL=" .env | cut -d'=' -f2- | tr -d '\r\n[:cntrl:]')
        
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
        grep -v "DATABASE_URL=" .env > .env.tmp
        echo "DATABASE_URL=$DB_URL" >> .env.tmp
        mv .env.tmp .env
        
        echo "‚úÖ DATABASE_URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
    else
        echo "‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"
        exit 1
    fi
    
    echo "üìã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π .env:"
    cat .env
else
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker
echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker..."
docker system prune -a -f
docker volume prune -f

# –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞
echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker rmi $(docker images "*dieta*" -q) 2>/dev/null || true
docker rmi $(docker images "*opt*" -q) 2>/dev/null || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Docker –¥–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å–∫–∞–µ–º..."
    systemctl start docker
    sleep 5
fi

# –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤..."

# –°–æ–∑–¥–∞–µ–º lib/utils.ts –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
mkdir -p calorie-love-tracker/src/lib
cat > calorie-love-tracker/src/lib/utils.ts << 'EOF'
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
EOF

# –°–æ–∑–¥–∞–µ–º lib/foodData.js –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
cat > calorie-love-tracker/src/lib/foodData.js << 'EOF'
// Fallback food data
export const fallbackFoodData = {
  "apple": { calories: 52, protein: 0.3, fat: 0.2, carbs: 14 },
  "banana": { calories: 89, protein: 1.1, fat: 0.3, carbs: 23 },
  "rice": { calories: 130, protein: 2.7, fat: 0.3, carbs: 28 },
  "chicken": { calories: 165, protein: 31, fat: 3.6, carbs: 0 },
  "bread": { calories: 265, protein: 9, fat: 3.2, carbs: 49 }
};

export function getFoodCalories(foodName) {
  const food = fallbackFoodData[foodName.toLowerCase()];
  return food ? food.calories : 100;
}

export function searchFood(query) {
  const results = [];
  for (const [name, data] of Object.entries(fallbackFoodData)) {
    if (name.includes(query.toLowerCase())) {
      results.push({ name, ...data });
    }
  }
  return results;
}
EOF

echo "‚úÖ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã"

# –ü–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üîß –ü–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º API –∏ Bot
echo "üì¶ –°–±–æ—Ä–∫–∞ API –∏ Bot..."
docker-compose build --no-cache api bot

if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ API/Bot!"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º API –∏ –∂–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
echo "üöÄ –ó–∞–ø—É—Å–∫ API..."
docker-compose up -d api

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API..."
for i in {1..10}; do
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        echo "‚úÖ API –≥–æ—Ç–æ–≤!"
        break
    else
        echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $i/10 - API –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤..."
        sleep 10
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ API –µ—Å–ª–∏ –æ–Ω –Ω–µ –≥–æ—Ç–æ–≤
if ! curl -s http://localhost:8000/health > /dev/null 2>&1; then
    echo "‚ùå API –Ω–µ –≥–æ—Ç–æ–≤! –õ–æ–≥–∏:"
    docker-compose logs api
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º Bot
echo "ü§ñ –ó–∞–ø—É—Å–∫ Bot..."
docker-compose up -d bot

# –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Frontend
echo "üé® –°–±–æ—Ä–∫–∞ Frontend..."
docker-compose build --no-cache frontend

echo "üöÄ –ó–∞–ø—É—Å–∫ Frontend..."
docker-compose up -d frontend

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
echo "üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose ps

echo ""
echo "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "=== API ==="
docker-compose logs --tail=10 api
echo ""
echo "=== Bot ==="
docker-compose logs --tail=10 bot
echo ""
echo "=== Frontend ==="
docker-compose logs --tail=10 frontend

echo ""
echo "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "- API: http://5.129.198.80:8000"
echo "- Health: http://5.129.198.80:8000/health"
echo "- Docs: http://5.129.198.80:8000/docs"
echo "- Frontend: http://5.129.198.80:3000"
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs -f" 