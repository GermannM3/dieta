#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï HTTPS –ò –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô..."

echo "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
if [ -d "/etc/letsencrypt/live/5.129.198.80" ]; then
    echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:"
    ls -la /etc/letsencrypt/live/5.129.198.80/
else
    echo "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ /etc/letsencrypt/live/5.129.198.80/"
fi

echo "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
find /etc -name "*.pem" -path "*5.129.198.80*" 2>/dev/null
find /opt -name "*.pem" -path "*ssl*" 2>/dev/null

echo "3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ nginx –∫–æ–Ω—Ñ–∏–≥–∞..."
docker exec dieta-nginx-1 cat /etc/nginx/conf.d/default.conf

echo "4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ nginx –∫–æ–Ω—Ñ–∏–≥–∞ —Å SSL..."
cat > nginx-ssl-working.conf << 'EOF'
server {
    listen 80;
    server_name 5.129.198.80;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name 5.129.198.80;

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
    ssl_certificate /etc/letsencrypt/live/5.129.198.80/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/5.129.198.80/privkey.pem;

    # Fallback –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    ssl_certificate /opt/dieta/ssl/fullchain.pem;
    ssl_certificate_key /opt/dieta/ssl/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # API endpoints - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏
    location /api/ {
        proxy_pass http://api:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # API –±–µ–∑ /api/ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    location /search_food {
        proxy_pass http://api:8000/search_food;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /login {
        proxy_pass http://api:8000/login;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /register {
        proxy_pass http://api:8000/register;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /calculate_calories {
        proxy_pass http://api:8000/calculate_calories;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Frontend
    location / {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}
EOF

echo "5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon –ë–î..."
docker exec dieta-api-1 python3 -c "
import asyncio
from database.init_database import async_session_maker
from sqlalchemy import text

async def test_db():
    print('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon –ë–î...')
    try:
        async with async_session_maker() as session:
            result = await session.execute(text('SELECT 1 as test'))
            row = result.fetchone()
            print(f'‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {row.test}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            result = await session.execute(text(\"\"\"
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
            \"\"\"))
            tables = [row[0] for row in result.fetchall()]
            print(f'‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {tables}')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}')

asyncio.run(test_db())
"

echo "6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
docker exec dieta-api-1 python3 -c "
import asyncio
import aiohttp
import json

async def test_api():
    print('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    async with aiohttp.ClientSession() as session:
        try:
            # –¢–µ—Å—Ç /docs
            async with session.get('http://localhost:8000/docs') as resp:
                print(f'‚úÖ /docs: {resp.status}')
            
            # –¢–µ—Å—Ç /search_food
            data = {'query': '—è–±–ª–æ–∫–æ'}
            async with session.post('http://localhost:8000/search_food', json=data) as resp:
                print(f'‚úÖ /search_food: {resp.status}')
                if resp.status == 200:
                    result = await resp.json()
                    print(f'   –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ')
            
            # –¢–µ—Å—Ç /login
            data = {'email': 'germannm@vk.com', 'password': 'Germ@nnM3'}
            async with session.post('http://localhost:8000/login', json=data) as resp:
                print(f'‚úÖ /login: {resp.status}')
                if resp.status == 200:
                    result = await resp.json()
                    print(f'   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get(\"message\", \"OK\")}')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}')

asyncio.run(test_api())
"

echo "7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend..."
docker exec dieta-frontend-1 curl -I http://localhost:3000 2>/dev/null | head -1

echo "8Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º..."
docker cp nginx-ssl-working.conf dieta-nginx-1:/etc/nginx/conf.d/default.conf
docker-compose -f docker-compose.minimal.yml restart nginx

echo "9Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
sleep 10

echo "üîü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPS..."
curl -I https://5.129.198.80/api/docs 2>/dev/null | head -1
curl -I https://5.129.198.80/ 2>/dev/null | head -1

echo "1Ô∏è‚É£1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–µ—Ä–µ–∑ nginx..."
curl -X POST https://5.129.198.80/search_food \
  -H "Content-Type: application/json" \
  -d '{"query": "—è–±–ª–æ–∫–æ"}' \
  2>/dev/null | head -1

echo "1Ô∏è‚É£2Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
docker ps

echo "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!" 