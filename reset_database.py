import asyncio
import os
from dotenv import load_dotenv
from database.init_database import init_db, engine

load_dotenv()

async def reset_database():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("üóÑÔ∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        async with engine.begin() as conn:
            await conn.run_sync(lambda sync_conn: sync_conn.execute("DROP SCHEMA public CASCADE"))
            await conn.run_sync(lambda sync_conn: sync_conn.execute("CREATE SCHEMA public"))
            await conn.run_sync(lambda sync_conn: sync_conn.execute("GRANT ALL ON SCHEMA public TO postgres"))
            await conn.run_sync(lambda sync_conn: sync_conn.execute("GRANT ALL ON SCHEMA public TO public"))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")
        return False
    
    return True

if __name__ == "__main__":
    asyncio.run(reset_database()) 