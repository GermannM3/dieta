#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –¥–æ–º–µ–Ω–æ–º –∏ –ø–æ—Ä—Ç–∞–º–∏
"""

import subprocess
import os
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def fix_all_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    logging.info("üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º...")
    
    # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    logging.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    subprocess.run(["pkill", "-f", "npm start"], capture_output=True)
    subprocess.run(["pkill", "-f", "vite"], capture_output=True)
    time.sleep(3)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª—ã
    logging.info("üìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª—ã...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π .env
    main_env_path = "/opt/dieta/.env"
    if os.path.exists(main_env_path):
        with open(main_env_path, 'r') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º IP –Ω–∞ –¥–æ–º–µ–Ω
        content = content.replace('http://5.129.198.80:8000', 'http://tvoi-kalkulyator.ru/api')
        content = content.replace('http://localhost:8000', 'http://tvoi-kalkulyator.ru/api')
        
        with open(main_env_path, 'w') as f:
            f.write(content)
        logging.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π .env –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    
    # –§—Ä–æ–Ω—Ç–µ–Ω–¥ .env
    frontend_env_path = "/opt/dieta/calorie-love-tracker/.env"
    frontend_env_content = """VITE_API_URL=http://tvoi-kalkulyator.ru/api
VITE_APP_TITLE=–¢–≤–æ–π –î–∏–µ—Ç–æ–ª–æ–≥ - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫
VITE_APP_DESCRIPTION=–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å –ª–∏—á–Ω—ã–º –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º
VITE_TELEGRAM_BOT_USERNAME=@tvoy_diet_bot
PORT=3000"""
    
    with open(frontend_env_path, 'w') as f:
        f.write(frontend_env_content)
    logging.info("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ .env –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    
    # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å
    logging.info("‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å...")
    
    service_content = """[Unit]
Description=Dieta Frontend
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/dieta/calorie-love-tracker
ExecStart=/usr/bin/npm start
Environment=PORT=3000
Environment=NODE_ENV=production
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target"""
    
    with open("/etc/systemd/system/frontend.service", 'w') as f:
        f.write(service_content)
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    subprocess.run(["systemctl", "daemon-reload"], check=True)
    subprocess.run(["systemctl", "enable", "frontend"], check=True)
    subprocess.run(["systemctl", "start", "frontend"], check=True)
    
    logging.info("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
    
    # 4. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    logging.info("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    time.sleep(10)
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    result = subprocess.run(["systemctl", "is-active", "frontend"], 
                          capture_output=True, text=True)
    if result.stdout.strip() == "active":
        logging.info("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ systemd")
        return True
    else:
        logging.error("‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        return False

def test_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
    logging.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã...")
    
    import requests
    
    services = [
        ("API", "http://tvoi-kalkulyator.ru/api/health"),
        ("–°–∞–π—Ç", "http://tvoi-kalkulyator.ru"),
    ]
    
    for name, url in services:
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                logging.info(f"‚úÖ {name} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logging.warning(f"‚ö†Ô∏è {name} –≤–µ—Ä–Ω—É–ª {response.status_code}")
        except Exception as e:
            logging.error(f"‚ùå {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logging.info("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
    
    services = ["nginx", "frontend"]
    for service in services:
        result = subprocess.run(["systemctl", "is-active", service], 
                              capture_output=True, text=True)
        status = result.stdout.strip()
        if status == "active":
            logging.info(f"‚úÖ {service}: –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            logging.warning(f"‚ö†Ô∏è {service}: {status}")

if __name__ == "__main__":
    if fix_all_issues():
        time.sleep(5)
        show_status()
        test_services()
        logging.info("üéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        logging.info("üåê –°–∞–π—Ç: http://tvoi-kalkulyator.ru")
        logging.info("üîó API: http://tvoi-kalkulyator.ru/api/health")
    else:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è") 