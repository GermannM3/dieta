#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import subprocess
import sys
import os
import time
import json
import logging
from pathlib import Path

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def check_syntax(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            code = f.read()
        compile(code, file_path, 'exec')
        return True, "OK"
    except SyntaxError as e:
        return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {e.lineno}: {e.msg}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {e}"

def find_free_port(start_port=8000):
    """–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –Ω–∞—á–∏–Ω–∞—è —Å start_port"""
    import socket
    for port in range(start_port, start_port + 100):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('127.0.0.1', port))
                return port
        except OSError:
            continue
    return None

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
    files_to_check = [
        'main.py',
        'improved_api_server.py', 
        'start_all_services.py'
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏...")
    all_ok = True
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            is_ok, message = check_syntax(file_path)
            if is_ok:
                print(f"‚úÖ {file_path}: {message}")
            else:
                print(f"‚ùå {file_path}: {message}")
                all_ok = False
        else:
            print(f"‚ö†Ô∏è  {file_path}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return all_ok

def start_api_server(port=8000):
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if port != 8000:
        try:
            with open('improved_api_server.py', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç –≤ uvicorn.run
            content = content.replace('port=8000', f'port={port}')
            
            with open('improved_api_server.py', 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ –ü–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {port}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞: {e}")
            return None
    
    try:
        process = subprocess.Popen(
            [sys.executable, "improved_api_server.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        time.sleep(3)
        if process.poll() is None:
            print(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {process.pid}) –Ω–∞ http://127.0.0.1:{port}")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª: {stderr}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    try:
        process = subprocess.Popen(
            [sys.executable, "main.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        time.sleep(2)
        if process.poll() is None:
            print(f"‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå Telegram –±–æ—Ç —É–ø–∞–ª: {stderr}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return None

def main():
    print("üîß –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–∏–µ—Ç–æ–ª–æ–≥-–±–æ—Ç–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not check_files():
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return False
    
    print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
    free_port = find_free_port(8000)
    if not free_port:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞")
        return False
    
    if free_port != 8000:
        print(f"‚ö†Ô∏è  –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç {free_port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    api_process = start_api_server(free_port)
    if not api_process:
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_process = start_bot()
    if not bot_process:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        api_process.terminate()
        return False
    
    print("\nüéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("-" * 50)
    print(f"üåê API —Å–µ—Ä–≤–µ—Ä: http://127.0.0.1:{free_port}")
    print(f"üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://127.0.0.1:{free_port}/docs")
    print(f"ü§ñ Telegram –±–æ—Ç: @tvoy_diet_bot")
    print("\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while True:
            if api_process.poll() is not None:
                print("‚ùå API —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª!")
                break
            if bot_process.poll() is not None:
                print("‚ùå Telegram –±–æ—Ç —É–ø–∞–ª!")
                break
            time.sleep(5)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    try:
        api_process.terminate()
        bot_process.terminate()
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except:
        pass
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        sys.exit(0) 