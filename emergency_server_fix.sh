#!/bin/bash
echo "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ï–†–ê"
echo "=================================="

cd /opt/dieta || { echo "‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"; exit 1; }

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down 2>/dev/null || true
docker stop $(docker ps -q) 2>/dev/null || true

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: DATABASE_URL"
echo "==============================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
if [[ -f ".env" ]]; then
    echo "üìã –¢–µ–∫—É—â–∏–π .env:"
    grep "DATABASE_URL" .env
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω
    if grep -q "user:password@host:port" .env; then
        echo "‚ùå –ù–ê–ô–î–ï–ù –®–ê–ë–õ–û–ù! –ò—Å–ø—Ä–∞–≤–ª—è–µ–º..."
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ SQLite –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        sed -i 's|DATABASE_URL=postgresql+asyncpg://user:password@host:port/database|DATABASE_URL=sqlite+aiosqlite:///./dieta.db|g' .env
        
        echo "‚úÖ DATABASE_URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ SQLite"
        echo "üìã –ù–æ–≤—ã–π DATABASE_URL:"
        grep "DATABASE_URL" .env
    else
        echo "‚úÖ DATABASE_URL –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    fi
else
    echo "‚ùå .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–µ–º..."
    cat > .env << 'EOF'
TG_TOKEN=your_telegram_bot_token_from_botfather
ADMIN_ID=your_telegram_id_number
DATABASE_URL=sqlite+aiosqlite:///./dieta.db
GIGACHAT_CLIENT_ID=your_gigachat_client_id
GIGACHAT_AUTH_KEY=your_gigachat_auth_key
GIGACHAT_ACCESS_TOKEN=your_gigachat_access_token
MISTRAL_API_KEY=your_mistral_api_key
CALORIE_NINJAS_API_KEY=your_calorie_ninjas_api_key
LOG_LEVEL=INFO
API_PORT=8000
EOF
    echo "‚úÖ .env —Å–æ–∑–¥–∞–Ω —Å SQLite"
fi

echo ""
echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: REQUIREMENTS"
echo "=============================="

# –î–æ–±–∞–≤–ª—è–µ–º aiosqlite –≤ requirements.txt
if [[ -f "requirements.txt" ]]; then
    if ! grep -q "aiosqlite" requirements.txt; then
        echo "aiosqlite>=0.20.0" >> requirements.txt
        echo "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω aiosqlite –≤ requirements.txt"
    else
        echo "‚úÖ aiosqlite —É–∂–µ –µ—Å—Ç—å –≤ requirements.txt"
    fi
else
    echo "‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

echo ""
echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: DATABASE INITIALIZATION"
echo "========================================="

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º init_database.py –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å SQLite
if [[ -f "database/init_database.py" ]]; then
    # –î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    cp database/init_database.py database/init_database.py.backup
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
    cat > database/init_database.py << 'EOF'
"""
Database initialization module
"""
import os
import logging
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, Integer, String, Float, DateTime, Text, BigInteger, Boolean
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# Base model
Base = declarative_base()

# Models
class User(Base):
    __tablename__ = 'users'
    
    tg_id = Column(BigInteger, primary_key=True)
    chat_context = Column(Text, default="")
    name = Column(String(100))
    age = Column(Integer)
    gender = Column(String(10))
    weight = Column(Float)
    height = Column(Float)
    activity_level = Column(String(50))
    water_ml = Column(Integer, default=0)
    score = Column(Integer, default=0)
    streak_days = Column(Integer, default=0)

class Meal(Base):
    __tablename__ = 'meals'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger)
    date = Column(String(10))
    meal_type = Column(String(20))
    food_name = Column(String(200))
    quantity = Column(Float)
    calories = Column(Float)
    protein = Column(Float, default=0)
    fat = Column(Float, default=0)
    carbs = Column(Float, default=0)
    timestamp = Column(DateTime, default=datetime.utcnow)

class Preset(Base):
    __tablename__ = 'presets'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger)
    name = Column(String(100))
    foods = Column(Text)

class Food(Base):
    __tablename__ = 'foods'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(200))
    calories_per_100g = Column(Float)
    protein_per_100g = Column(Float, default=0)
    fat_per_100g = Column(Float, default=0)
    carbs_per_100g = Column(Float, default=0)

class FoodNutrient(Base):
    __tablename__ = 'food_nutrients'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    food_id = Column(Integer)
    nutrient_name = Column(String(100))
    value_per_100g = Column(Float)

# Database configuration
DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite+aiosqlite:///./dieta.db')

# –°–æ–∑–¥–∞–µ–º engine
try:
    engine = create_async_engine(
        DATABASE_URL,
        echo=False,
        future=True,
        pool_pre_ping=True
    )
    print(f"‚úÖ Database engine created: {DATABASE_URL}")
except Exception as e:
    print(f"‚ùå Database engine error: {e}")
    raise

# –°–æ–∑–¥–∞–µ–º session maker
async_session = async_sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False
)

async def init_db():
    """Initialize database tables"""
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ Database tables created")
    except Exception as e:
        print(f"‚ùå Database initialization error: {e}")
        raise

# For compatibility
def get_session():
    return async_session()
EOF
    
    echo "‚úÖ database/init_database.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
else
    echo "‚ùå database/init_database.py –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

echo ""
echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: DOCKER REBUILD"
echo "================================"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker
docker system prune -a -f

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
docker-compose build --no-cache api

if [ $? -eq 0 ]; then
    echo "‚úÖ API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–±—Ä–∞–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ API
echo "üöÄ –ó–∞–ø—É—Å–∫ API..."
docker-compose up -d api

sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API..."
if curl -s http://localhost:8000/health > /dev/null 2>&1; then
    echo "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    echo "‚ö†Ô∏è API –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
    docker-compose logs api
fi

echo ""
echo "‚úÖ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo "===================================="
echo ""
echo "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
echo "- API: http://5.129.198.80:8000/health"
echo "- –õ–æ–≥–∏: docker-compose logs -f api"
echo ""
echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ï—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø—É—Å—Ç–∏—Ç–µ bot: docker-compose up -d bot"
echo "2. –ü–æ—Ç–æ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ frontend: docker-compose up -d frontend"
echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PostgreSQL URL –≤ .env –µ—Å–ª–∏ –Ω—É–∂–Ω–æ" 