#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import subprocess
import sys
import os
import time
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_database():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logging.info("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from database.init_database import engine
        from sqlalchemy import text
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        with engine.begin() as conn:
            result = conn.execute(text("SELECT 1"))
            logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_api():
    """–¢–µ—Å—Ç API —Å–µ—Ä–≤–µ—Ä–∞"""
    logging.info("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–µ—Ä–≤–µ—Ä...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
        process = subprocess.Popen(
            [sys.executable, "-m", "uvicorn", "improved_api_server:app", "--host", "0.0.0.0", "--port", "8000"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        time.sleep(5)
        
        if process.poll() is None:
            logging.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
            try:
                import requests
                response = requests.get("http://localhost:8000/health", timeout=5)
                if response.status_code == 200:
                    logging.info("‚úÖ API health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    process.terminate()
                    return True
                else:
                    logging.error(f"‚ùå API health endpoint –≤–µ—Ä–Ω—É–ª {response.status_code}")
                    process.terminate()
                    return False
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API: {e}")
                process.terminate()
                return False
        else:
            stdout, stderr = process.communicate()
            logging.error(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")
        return False

def test_bot():
    """–¢–µ—Å—Ç –±–æ—Ç–∞"""
    logging.info("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        process = subprocess.Popen(
            [sys.executable, "main.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        time.sleep(5)
        
        if process.poll() is None:
            logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            process.terminate()
            return True
        else:
            stdout, stderr = process.communicate()
            logging.error(f"‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return False

def test_frontend():
    """–¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    logging.info("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...")
    
    frontend_dir = "calorie-love-tracker"
    if not os.path.exists(frontend_dir):
        logging.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {frontend_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
        if not os.path.exists(os.path.join(frontend_dir, "node_modules")):
            logging.info("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
            install_process = subprocess.run(
                ["npm", "install"],
                cwd=frontend_dir,
                capture_output=True,
                text=True
            )
            if install_process.returncode != 0:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {install_process.stderr}")
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        process = subprocess.Popen(
            ["npm", "start"],
            cwd=frontend_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        time.sleep(10)
        
        if process.poll() is None:
            logging.info("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            try:
                import requests
                response = requests.get("http://localhost:3000", timeout=5)
                if response.status_code == 200:
                    logging.info("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    process.terminate()
                    return True
                else:
                    logging.error(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª {response.status_code}")
                    process.terminate()
                    return False
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: {e}")
                process.terminate()
                return False
        else:
            stdout, stderr = process.communicate()
            logging.error(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    logging.info("=" * 50)
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    results['database'] = test_database()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    results['api'] = test_api()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    results['bot'] = test_bot()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    results['frontend'] = test_frontend()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logging.info("")
    logging.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    logging.info("=" * 50)
    
    for service, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        logging.info(f"{status} {service}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_passed = all(results.values())
    if all_passed:
        logging.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        logging.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    logging.info("=" * 50)

if __name__ == "__main__":
    main() 