version: '3.8'

services:
  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: python improved_api_server.py
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_ID=${ADMIN_ID}
      - TG_TOKEN=${TG_TOKEN}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - GIGACHAT_CLIENT_ID=${GIGACHAT_CLIENT_ID}
      - GIGACHAT_AUTH_KEY=${GIGACHAT_AUTH_KEY}
      - GIGACHAT_ACCESS_TOKEN=${GIGACHAT_ACCESS_TOKEN}
      - CALORIE_NINJAS_API_KEY=${CALORIE_NINJAS_API_KEY}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    env_file:
      - .env
    environment:
      - API_BASE_URL=http://api:8000
      - DATABASE_URL=${DATABASE_URL}
      - ADMIN_ID=${ADMIN_ID}
      - TG_TOKEN=${TG_TOKEN}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - GIGACHAT_CLIENT_ID=${GIGACHAT_CLIENT_ID}
      - GIGACHAT_AUTH_KEY=${GIGACHAT_AUTH_KEY}
      - GIGACHAT_ACCESS_TOKEN=${GIGACHAT_ACCESS_TOKEN}
      - CALORIE_NINJAS_API_KEY=${CALORIE_NINJAS_API_KEY}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - api

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SMTP Mail Server (MailHog для тестирования)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    restart: unless-stopped
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-correct.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt/live:/etc/letsencrypt/live:ro
      - /etc/letsencrypt/archive:/etc/letsencrypt/archive:ro
    restart: unless-stopped
    depends_on:
      - frontend
      - api
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 