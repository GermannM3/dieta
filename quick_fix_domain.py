#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–∫—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import subprocess
import os
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def fix_domain_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–º–µ–Ω–æ–º"""
    logging.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–º–µ–Ω–æ–º...")
    
    # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    logging.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    subprocess.run(["pkill", "-f", "npm start"], capture_output=True)
    subprocess.run(["pkill", "-f", "vite"], capture_output=True)
    time.sleep(2)
    
    # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π .env —Ñ–∞–π–ª
    logging.info("üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π .env —Ñ–∞–π–ª...")
    env_content = """VITE_API_URL=http://tvoi-kalkulyator.ru/api
VITE_APP_TITLE=–¢–≤–æ–π –î–∏–µ—Ç–æ–ª–æ–≥ - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫
VITE_APP_DESCRIPTION=–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å –ª–∏—á–Ω—ã–º –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º
VITE_TELEGRAM_BOT_USERNAME=@tvoy_diet_bot
PORT=3000"""
    
    with open("calorie-love-tracker/.env", "w") as f:
        f.write(env_content)
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ –ø–æ—Ä—Ç—É 3000...")
    frontend_dir = "calorie-love-tracker"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env = os.environ.copy()
    env["PORT"] = "3000"
    
    process = subprocess.Popen(
        ["npm", "start"],
        cwd=frontend_dir,
        env=env,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    time.sleep(10)
    
    if process.poll() is None:
        logging.info("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000")
        logging.info("üåê –°–∞–π—Ç: http://tvoi-kalkulyator.ru")
        logging.info("üîó API: http://tvoi-kalkulyator.ru/api/health")
        return True
    else:
        stdout, stderr = process.communicate()
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {stderr}")
        return False

def test_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã"""
    logging.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
    
    import requests
    
    # –¢–µ—Å—Ç API
    try:
        response = requests.get("http://tvoi-kalkulyator.ru/api/health", timeout=5)
        if response.status_code == 200:
            logging.info("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logging.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª {response.status_code}")
    except Exception as e:
        logging.error(f"‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
    
    # –¢–µ—Å—Ç —Å–∞–π—Ç–∞
    try:
        response = requests.get("http://tvoi-kalkulyator.ru", timeout=5)
        if response.status_code == 200:
            logging.info("‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logging.error(f"‚ùå –°–∞–π—Ç –≤–µ—Ä–Ω—É–ª {response.status_code}")
    except Exception as e:
        logging.error(f"‚ùå –°–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")

if __name__ == "__main__":
    if fix_domain_issues():
        time.sleep(5)
        test_services()
    else:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã") 