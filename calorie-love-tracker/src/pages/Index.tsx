import { useEffect, useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { AuthForm } from "../components/AuthForm";
import { ProfileForm } from "../components/ProfileForm";
import { MealEntryForm } from "../components/MealEntryForm";
import { DailySummary } from "../components/DailySummary";
import { FoodTable } from "../components/FoodTable";
import { MoodTracker } from "../components/MoodTracker";
import { WaterTracker } from "../components/WaterTracker";
import { PresetPicker } from "../components/PresetPicker";
import { AdminPanel } from "../components/AdminPanel";
import { Button } from "@/components/ui/button";
import { LogOut } from "lucide-react";
import { toast } from "@/hooks/use-toast";

const Index = () => {
  const [session, setSession] = useState(null);
  const [user, setUser] = useState(null);
  const [meals, setMeals] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAuth, setShowAuth] = useState(false);
  const [showGuestMode, setShowGuestMode] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('checking'); // 'checking', 'connected', 'error'

  useEffect(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –±—ç–∫–µ–Ω–¥–∞ ‚Äî –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ /api/auth/me
    const tryBackendSession = async () => {
      const token = localStorage.getItem('token');
      if (!token) return false;
      try {
        const base = (import.meta.env.VITE_API_URL || '').replace(/\/$/, '');
        const resp = await fetch(`${base}/auth/me`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (!resp.ok) return false;
        const me = await resp.json();
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        setSession({ user: { id: me.id, email: me.email } });
        setUser({
          user_id: me.id,
          email: me.email,
          name: me.name,
          is_confirmed: me.is_confirmed,
          created_at: me.created_at,
        });
        setLoading(false);
        return true;
      } catch (e) {
        console.error('Backend session check failed:', e);
        return false;
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const checkConnection = async () => {
      try {
        const { data, error } = await supabase.from('profiles').select('count').limit(1);
        if (error) throw error;
        setConnectionStatus('connected');
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        setConnectionStatus('error');
      }
    };

    (async () => {
      await checkConnection();

      // –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî Supabase
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:", error);
        toast({
          title: "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º",
          description: "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
          variant: "destructive",
        });
      }
      setSession(session);
      if (session) {
        loadUserProfile(session.user.id);
      } else {
        // –ï—Å–ª–∏ Supabase-—Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ –±—ç–∫–µ–Ω–¥-—Ç–æ–∫–µ–Ω—É
        const ok = await tryBackendSession();
        if (!ok) setLoading(false);
      }
    })();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Supabase
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      console.log("Auth state changed:", _event, session);
      setSession(session);
      if (session) {
        loadUserProfile(session.user.id);
      } else {
        setUser(null);
        setMeals([]);
        setLoading(false);
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  const loadUserProfile = async (userId) => {
    try {
      const { data, error } = await supabase
        .from("profiles")
        .select("*")
        .eq("user_id", userId)
        .maybeSingle();

      if (error && error.code !== "PGRST116") {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
        throw error;
      }
      setUser(data);
    } catch (error) {
      console.error("Error loading profile:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è",
        description: "–ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSignOut = async () => {
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ Supabase (–µ—Å–ª–∏ –±—ã–ª –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ)
    await supabase.auth.signOut();
    // –ß–∏—Å—Ç–∏–º –±—ç–∫–µ–Ω–¥-—Ç–æ–∫–µ–Ω
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    setSession(null);
    setUser(null);
  };

  // –í –Ω–∞—á–∞–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ loading
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          {connectionStatus === 'error' && (
            <p className="text-destructive mt-2 text-sm">
              ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            </p>
          )}
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 via-accent/5 to-info/5">
        <div className="container mx-auto px-4 py-8">
          {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
          {connectionStatus === 'error' && (
            <div className="mb-4 p-3 bg-destructive/10 border border-destructive/20 rounded-lg text-center">
              <p className="text-destructive text-sm">
                ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
              </p>
            </div>
          )}
          
          {connectionStatus === 'connected' && (
            <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg text-center">
              <p className="text-green-700 text-sm">
                ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
              </p>
            </div>
          )}
          
          {/* Telegram Bot Link –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
          <div className="fixed top-4 right-4 z-50">
            <a 
              href="https://t.me/tvoy_diet_bot" 
              target="_blank" 
              rel="noopener noreferrer"
              className="group flex flex-col items-center bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 border border-primary/20"
            >
              <img 
                src="/kangaroo-icon.svg" 
                alt="Telegram Bot" 
                className="w-8 h-8 mb-1"
              />
              <span className="text-xs font-medium text-center text-primary group-hover:text-primary/80">
                –ù–∞—à –¢–ì-–±–æ—Ç<br/>—Å –ò–ò-–¥–∏–µ—Ç–æ–ª–æ–≥–æ–º
              </span>
            </a>
          </div>
          
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-primary via-accent to-info bg-clip-text text-transparent mb-4">
              ü•ó –¢—Ä–µ–∫–µ—Ä –ö–∞–ª–æ—Ä–∏–π
            </h1>
            <p className="text-muted-foreground mb-6">
              –í–µ–¥–∏—Ç–µ —É—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –ª–µ–≥–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button 
                onClick={() => setShowAuth(true)}
                className="bg-gradient-to-r from-primary to-accent"
              >
                –í–æ–π—Ç–∏ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
              </Button>
              <Button 
                variant="outline"
                onClick={() => setShowGuestMode(true)}
                className="border-info text-info hover:bg-info/10"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
              </Button>
            </div>
          </div>
          
          {showAuth && <AuthForm onAuthSuccess={() => setShowAuth(false)} />}
          
          {showGuestMode && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <DailySummary 
                  user={null} 
                  meals={meals} 
                  setMeals={setMeals} 
                />
                <MealEntryForm 
                  user={null} 
                  onMealAdded={() => {
                    // –î–ª—è –≥–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    window.dispatchEvent(new CustomEvent('guestMealsChanged'));
                  }}
                />
              </div>
              
              <FoodTable meals={meals} />
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-accent/5 to-info/5">
      <div className="container mx-auto px-4 py-8">
        
        {/* Telegram Bot Link –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
        <div className="fixed top-4 right-4 z-50">
          <a 
            href="https://t.me/tvoy_diet_bot" 
            target="_blank" 
            rel="noopener noreferrer"
            className="group flex flex-col items-center bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 border border-primary/20"
          >
            <img 
              src="/kangaroo-icon.svg" 
              alt="Telegram Bot" 
              className="w-8 h-8 mb-1"
            />
            <span className="text-xs font-medium text-center text-primary group-hover:text-primary/80">
              –ù–∞—à –¢–ì-–±–æ—Ç<br/>—Å –ò–ò-–¥–∏–µ—Ç–æ–ª–æ–≥–æ–º
            </span>
          </a>
        </div>

        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-primary bg-clip-text text-transparent">
              ü•ó –¢—Ä–µ–∫–µ—Ä –ö–∞–ª–æ—Ä–∏–π
            </h1>
            <p className="text-muted-foreground">
              –ü—Ä–∏–≤–µ—Ç, {user?.name || session.user.email}!
            </p>
          </div>
          <Button 
            variant="outline" 
            onClick={handleSignOut}
            className="flex items-center gap-2"
          >
            <LogOut className="h-4 w-4" />
            –í—ã–π—Ç–∏
          </Button>
        </div>

        {/* Main Content */}
        <div className="space-y-6">
          {/* Profile Section */}
          {!user && (
            <ProfileForm 
              user={user} 
              setUser={setUser}
              onProfileCreated={() => loadUserProfile(session.user.id)}
            />
          )}

          {/* Dashboard */}
          {user && (
            <>
              {/* Mood and Water Tracking */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <MoodTracker 
                  user={user} 
                  onMoodUpdate={(mood) => setUser(prev => ({...prev, mood}))}
                />
                <WaterTracker 
                  user={user} 
                  onWaterUpdate={(water_ml) => setUser(prev => ({...prev, water_ml}))}
                />
              </div>

              {/* Main Dashboard */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <DailySummary 
                  user={user} 
                  meals={meals} 
                  setMeals={setMeals} 
                />
                <MealEntryForm 
                  user={user} 
                  onMealAdded={() => {
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ realtime –ø–æ–¥–ø–∏—Å–∫—É –≤ DailySummary
                  }}
                />
              </div>

              {/* Presets */}
              <PresetPicker 
                user={user}
                onPresetSelected={(preset) => {
                  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞
                  preset.food_items.forEach(async (item) => {
                    try {
                      await supabase.from("meals").insert({
                        user_id: user.user_id,
                        food_name: item.name,
                        weight_grams: item.weight,
                        calories: item.calories,
                      });
                    } catch (error) {
                      console.error("Error adding preset item:", error);
                    }
                  });
                }}
              />
              
              <FoodTable meals={meals} />

              <div className="text-center">
                <Button 
                  variant="outline" 
                  onClick={() => setUser(null)}
                  className="mt-4"
                >
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                </Button>
              </div>

              {/* Admin Panel */}
              {user?.email === 'germannm@vk.com' && (
                <div className="mt-8">
                  <AdminPanel user={user} />
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Index;
