import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from "@/hooks/use-toast";

export const AuthForm = ({ onAuthSuccess }) => {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);

  const handleAuth = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (isLogin) {
        // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–∞—à API
        const response = await fetch(`${import.meta.env.VITE_API_URL}/api/auth/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email,
            password
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
          localStorage.setItem('authToken', data.access_token);
          localStorage.setItem('user', JSON.stringify(data.user));
          console.log("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:", data);
          toast({ title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" });
          onAuthSuccess();
        } else {
          const errorData = await response.json();
          throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
        }
      } else {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–∞—à API
        const response = await fetch(`${import.meta.env.VITE_API_URL}/api/auth/register`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email,
            password,
            name: email.split('@')[0] // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å email –∫–∞–∫ –∏–º—è
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", data);
          
          if (data.requires_confirmation) {
            toast({ 
              title: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email", 
              description: "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É —Å–ø–∞–º.",
              variant: "default"
            });
          } else {
            // –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            localStorage.setItem('authToken', data.access_token);
            localStorage.setItem('user', JSON.stringify(data.user));
            toast({ title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" });
            onAuthSuccess();
          }
        } else {
          const errorData = await response.json();
          throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
      
      let errorMessage = error.message;
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
      if (error.message.includes("Invalid login credentials") || error.message.includes("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")) {
        errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
      } else if (error.message.includes("User already registered") || error.message.includes("—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")) {
        errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω";
      } else if (error.message.includes("Password should be at least") || error.message.includes("–º–∏–Ω–∏–º—É–º")) {
        errorMessage = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤";
      } else if (error.message.includes("Unable to validate email address") || error.message.includes("—Ñ–æ—Ä–º–∞—Ç email")) {
        errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
      } else if (error.message.includes("Email not confirmed") || error.message.includes("–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")) {
        errorMessage = "Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.";
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDemoLogin = async () => {
    setLoading(true);
    try {
      // –í—Ö–æ–¥ –ø–æ–¥ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –Ω–∞—à API
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: "demo@example.com",
          password: "demo123456"
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
        localStorage.setItem('authToken', data.access_token);
        localStorage.setItem('user', JSON.stringify(data.user));
        toast({ title: "–í—Ö–æ–¥ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —É—Å–ø–µ—à–µ–Ω!" });
        onAuthSuccess();
      } else {
        // –ï—Å–ª–∏ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (response.status === 401) {
          const registerResponse = await fetch(`${import.meta.env.VITE_API_URL}/api/auth/register`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: "demo@example.com",
              password: "demo123456",
              name: "–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            })
          });
          
          if (registerResponse.ok) {
            const registerData = await registerResponse.json();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
            localStorage.setItem('authToken', registerData.access_token);
            localStorage.setItem('user', JSON.stringify(registerData.user));
            toast({ title: "–î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" });
            onAuthSuccess();
          } else {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç");
          }
        } else {
          throw new Error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–µ–º–æ-–≤—Ö–æ–¥–∞:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ –¥–µ–º–æ-–≤—Ö–æ–¥–∞",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-primary/10 via-accent/5 to-info/10">
      <Card className="w-full max-w-md shadow-card-hover">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl font-bold bg-gradient-primary bg-clip-text text-transparent">
            ü•ó –¢—Ä–µ–∫–µ—Ä –ö–∞–ª–æ—Ä–∏–π
          </CardTitle>
          <CardDescription>
            {isLogin ? "–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç" : "–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç"}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleAuth} className="space-y-4">
            <div className="space-y-2">
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <Button 
              type="submit" 
              className="w-full" 
              disabled={loading}
            >
              {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : (isLogin ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")}
            </Button>
          </form>
          
          {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–º–æ-–≤—Ö–æ–¥–∞ */}
          <div className="mt-4">
            <Button 
              onClick={handleDemoLogin}
              variant="outline"
              className="w-full"
              disabled={loading}
            >
              üé≠ –î–µ–º–æ-–≤—Ö–æ–¥ (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
            </Button>
          </div>
          
          <div className="mt-4 text-center">
            <button
              type="button"
              onClick={() => setIsLogin(!isLogin)}
              className="text-sm text-primary hover:underline"
            >
              {isLogin ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å" : "–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ"}
            </button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};