import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from "@/hooks/use-toast";

export const AuthForm = ({ onAuthSuccess }) => {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);

  const handleAuth = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (isLogin) {
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });
        if (error) throw error;
        
        console.log("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:", data);
        toast({ title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" });
        onAuthSuccess();
      } else {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
        const { data, error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            emailRedirectTo: `${window.location.origin}/`,
            data: {
              email_confirm: false // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            }
          }
        });
        
        if (error) throw error;
        
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if (data.user && !data.session) {
          toast({ 
            title: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email", 
            description: "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É —Å–ø–∞–º.",
            variant: "default"
          });
        } else if (data.session) {
          // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å—Ä–∞–∑—É - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
          toast({ title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" });
          onAuthSuccess();
        } else {
          // –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏
          toast({ 
            title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", 
            description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
          });
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
      
      let errorMessage = error.message;
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
      if (error.message.includes("Invalid login credentials")) {
        errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
      } else if (error.message.includes("User already registered")) {
        errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω";
      } else if (error.message.includes("Password should be at least")) {
        errorMessage = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤";
      } else if (error.message.includes("Unable to validate email address")) {
        errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
      } else if (error.message.includes("Email not confirmed")) {
        errorMessage = "Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.";
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDemoLogin = async () => {
    setLoading(true);
    try {
      // –í—Ö–æ–¥ –ø–æ–¥ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–æ–º
      const { data, error } = await supabase.auth.signInWithPassword({
        email: "demo@example.com",
        password: "demo123456",
      });
      
      if (error) {
        // –ï—Å–ª–∏ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (error.message.includes("Invalid login credentials")) {
          const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
            email: "demo@example.com",
            password: "demo123456",
            options: {
              data: {
                email_confirm: false
              }
            }
          });
          
          if (signUpError) throw signUpError;
          
          if (signUpData.session) {
            toast({ title: "–î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" });
            onAuthSuccess();
          } else {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç");
          }
        } else {
          throw error;
        }
      } else {
        toast({ title: "–í—Ö–æ–¥ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —É—Å–ø–µ—à–µ–Ω!" });
        onAuthSuccess();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–µ–º–æ-–≤—Ö–æ–¥–∞:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ –¥–µ–º–æ-–≤—Ö–æ–¥–∞",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-primary/10 via-accent/5 to-info/10">
      <Card className="w-full max-w-md shadow-card-hover">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl font-bold bg-gradient-primary bg-clip-text text-transparent">
            ü•ó –¢—Ä–µ–∫–µ—Ä –ö–∞–ª–æ—Ä–∏–π
          </CardTitle>
          <CardDescription>
            {isLogin ? "–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç" : "–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç"}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleAuth} className="space-y-4">
            <div className="space-y-2">
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <Button 
              type="submit" 
              className="w-full" 
              disabled={loading}
            >
              {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : (isLogin ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")}
            </Button>
          </form>
          
          {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–º–æ-–≤—Ö–æ–¥–∞ */}
          <div className="mt-4">
            <Button 
              onClick={handleDemoLogin}
              variant="outline"
              className="w-full"
              disabled={loading}
            >
              üé≠ –î–µ–º–æ-–≤—Ö–æ–¥ (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
            </Button>
          </div>
          
          <div className="mt-4 text-center">
            <button
              type="button"
              onClick={() => setIsLogin(!isLogin)}
              className="text-sm text-primary hover:underline"
            >
              {isLogin ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å" : "–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ"}
            </button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};