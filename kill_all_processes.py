#!/usr/bin/env python3
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–±–∏–π—Å—Ç–≤–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
"""

import os
import subprocess
import signal
import psutil
import time

def run_command(cmd, description=""):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.stdout:
            print(f"‚úÖ {result.stdout}")
        if result.stderr:
            print(f"‚ö†Ô∏è {result.stderr}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def kill_process_by_pid(pid):
    """–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID"""
    try:
        process = psutil.Process(pid)
        print(f"üî• –£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å {pid} ({process.name()})")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è terminate
        process.terminate()
        try:
            process.wait(timeout=3)
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
        except psutil.TimeoutExpired:
            # –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, —É–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            process.kill()
            process.wait(timeout=2)
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ç")
            return True
    except psutil.NoSuchProcess:
        print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {e}")
        return False

def kill_all_python_processes():
    """–£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python"""
    print("üî• –£–±–∏–≤–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python...")
    
    killed_count = 0
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] and 'python' in proc.info['name'].lower():
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if 'main.py' in cmdline or 'improved_api_server' in cmdline or 'start_all_services' in cmdline:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å Python: {proc.info['pid']} - {cmdline}")
                    if kill_process_by_pid(proc.info['pid']):
                        killed_count += 1
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    print(f"‚úÖ –£–±–∏—Ç–æ {killed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python")
    return killed_count

def kill_all_npm_processes():
    """–£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã npm/node"""
    print("üî• –£–±–∏–≤–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã npm/node...")
    
    killed_count = 0
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] and any(name in proc.info['name'].lower() for name in ['npm', 'node', 'vite']):
                cmdline = ' '.join(proc.info['cmdline'] or [])
                print(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å npm/node: {proc.info['pid']} - {cmdline}")
                if kill_process_by_pid(proc.info['pid']):
                    killed_count += 1
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    print(f"‚úÖ –£–±–∏—Ç–æ {killed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ npm/node")
    return killed_count

def force_kill_by_port(port):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É"""
    print(f"üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞—é –ø–æ—Ä—Ç {port}...")
    
    try:
        # –ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É
        for conn in psutil.net_connections():
            if conn.laddr.port == port and conn.pid:
                print(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {port}: {conn.pid}")
                kill_process_by_pid(conn.pid)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ {port}: {e}")

def main():
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –£–ë–ò–ô–°–¢–í–û –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í")
    print("=" * 50)
    
    # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å—ã
    print("\n1Ô∏è‚É£ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é systemd —Å–µ—Ä–≤–∏—Å—ã...")
    run_command("sudo systemctl stop api frontend nginx bot", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # 2. –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    print("\n2Ô∏è‚É£ –£–±–∏–≤–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python...")
    killed_python = kill_all_python_processes()
    
    # 3. –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã npm/node
    print("\n3Ô∏è‚É£ –£–±–∏–≤–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã npm/node...")
    killed_npm = kill_all_npm_processes()
    
    # 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç—ã
    print("\n4Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞—é –ø–æ—Ä—Ç—ã...")
    force_kill_by_port(8000)
    force_kill_by_port(80)
    force_kill_by_port(5173)
    
    # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–±–∏–π—Å—Ç–≤–∞
    print("\n5Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–±–∏–π—Å—Ç–≤–∞...")
    run_command("sudo pkill -9 -f 'python.*main.py'", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ main.py")
    run_command("sudo pkill -9 -f 'python.*main'", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ main")
    run_command("sudo pkill -9 -f 'python.*improved_api_server'", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ API")
    run_command("sudo pkill -9 -f 'python.*start_all_services'", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ start_all_services")
    run_command("sudo pkill -9 -f 'npm'", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ npm")
    run_command("sudo pkill -9 -f 'vite'", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ vite")
    run_command("sudo pkill -9 -f 'node'", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ node")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —É–±–∏—Ç—ã
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã...")
    time.sleep(2)
    
    remaining_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name']:
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if any(keyword in cmdline for keyword in ['main.py', 'improved_api_server', 'start_all_services']):
                    remaining_processes.append(f"{proc.info['pid']} - {cmdline}")
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    if remaining_processes:
        print("‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ—Ü–µ—Å—Å—ã:")
        for proc in remaining_processes:
            print(f"   {proc}")
        
        print("\nüî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        for proc in remaining_processes:
            pid = proc.split(' - ')[0]
            try:
                kill_process_by_pid(int(pid))
            except:
                pass
    else:
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã!")
    
    # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n7Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    run_command("ps aux | grep -E '(python|npm|node)' | grep -v grep", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    run_command("netstat -tlnp | grep -E '(8000|80|5173)'", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤")
    
    print("\nüéØ –ì–û–¢–û–í–û! –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –∑–∞–Ω–æ–≤–æ:")

if __name__ == "__main__":
    main() 